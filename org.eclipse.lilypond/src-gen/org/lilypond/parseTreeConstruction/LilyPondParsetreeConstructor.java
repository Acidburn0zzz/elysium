/*
* generated by Xtext
*/
package org.lilypond.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.lilypond.services.LilyPondGrammarAccess;

import com.google.inject.Inject;

public class LilyPondParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private LilyPondGrammarAccess grammarAccess;
		
	public LilyPondGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LilyPond_ExpressionsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule LilyPond ****************
 *
 * LilyPond:
 *   expressions+=ToplevelExpression*;
 *
 **/

// expressions+=ToplevelExpression*
protected class LilyPond_ExpressionsAssignment extends AssignmentToken  {
	
	public LilyPond_ExpressionsAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLilyPondAccess().getExpressionsAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LilyPond_ExpressionsAssignment(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLilyPondRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expressions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expressions");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLilyPondAccess().getExpressionsToplevelExpressionTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule LilyPond ****************/


}
