/*
* generated by Xtext
*/

package org.lilypond.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;


@Singleton
public class LilyPondGrammarAccess implements IGrammarAccess {
	
	
	public class LilyPondElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LilyPond");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentDUMMYTerminalRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//LilyPond:
		//  content=DUMMY?;
		public ParserRule getRule() { return rule; }

		//content=DUMMY?
		public Assignment getContentAssignment() { return cContentAssignment; }

		//DUMMY
		public RuleCall getContentDUMMYTerminalRuleCall_0() { return cContentDUMMYTerminalRuleCall_0; }
	}
	
	
	private LilyPondElements pLilyPond;
	private TerminalRule tDUMMY;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public LilyPondGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//LilyPond:
	//  content=DUMMY?;
	public LilyPondElements getLilyPondAccess() {
		return (pLilyPond != null) ? pLilyPond : (pLilyPond = new LilyPondElements());
	}
	
	public ParserRule getLilyPondRule() {
		return getLilyPondAccess().getRule();
	}

	//terminal DUMMY:
	//  (!"\n"* "\n")* !"\n"*;
	public TerminalRule getDUMMYRule() {
		return (tDUMMY != null) ? tDUMMY : (tDUMMY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DUMMY"));
	} 
}
