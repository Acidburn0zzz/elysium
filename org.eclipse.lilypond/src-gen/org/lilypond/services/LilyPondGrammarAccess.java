/*
* generated by Xtext
*/

package org.lilypond.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;


@Singleton
public class LilyPondGrammarAccess implements IGrammarAccess {
	
	
	public class LilyPondElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LilyPond");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsTopLevelExpressionTerminalRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//LilyPond:
		//  expressions+=TopLevelExpression*;
		public ParserRule getRule() { return rule; }

		//expressions+=TopLevelExpression*
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }

		//TopLevelExpression
		public RuleCall getExpressionsTopLevelExpressionTerminalRuleCall_0() { return cExpressionsTopLevelExpressionTerminalRuleCall_0; }
	}
	
	
	private LilyPondElements pLilyPond;
	private TerminalRule tWS;
	private TerminalRule tWS_CHAR;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tTopLevelExpression;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public LilyPondGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//LilyPond:
	//  expressions+=TopLevelExpression*;
	public LilyPondElements getLilyPondAccess() {
		return (pLilyPond != null) ? pLilyPond : (pLilyPond = new LilyPondElements());
	}
	
	public ParserRule getLilyPondRule() {
		return getLilyPondAccess().getRule();
	}

	//terminal WS:
	//  WS_CHAR+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal WS_CHAR:
	//  " " | "\t" | "\r" | "\n";
	public TerminalRule getWS_CHARRule() {
		return (tWS_CHAR != null) ? tWS_CHAR : (tWS_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS_CHAR"));
	} 

	//terminal SL_COMMENT:
	//  "%" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ML_COMMENT:
	//  "%{"->"%}";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal TopLevelExpression:
	//  !WS_CHAR+;
	public TerminalRule getTopLevelExpressionRule() {
		return (tTopLevelExpression != null) ? tTopLevelExpression : (tTopLevelExpression = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelExpression"));
	} 
}
