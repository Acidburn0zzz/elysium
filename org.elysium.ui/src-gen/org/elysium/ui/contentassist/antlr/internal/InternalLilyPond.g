/*
* generated by Xtext
*/
grammar InternalLilyPond;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.elysium.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.elysium.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.elysium.services.LilyPondGrammarAccess;

}

@parser::members {
 
 	private LilyPondGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LilyPondGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLilyPond
entryRuleLilyPond 
:
{ before(grammarAccess.getLilyPondRule()); }
	 ruleLilyPond
{ after(grammarAccess.getLilyPondRule()); } 
	 EOF 
;

// Rule LilyPond
ruleLilyPond
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLilyPondAccess().getExpressionsAssignment()); }
(rule__LilyPond__ExpressionsAssignment)*
{ after(grammarAccess.getLilyPondAccess().getExpressionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getAlternatives()); }
(rule__Block__Alternatives)
{ after(grammarAccess.getBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleBlock
entryRuleSimpleBlock 
:
{ before(grammarAccess.getSimpleBlockRule()); }
	 ruleSimpleBlock
{ after(grammarAccess.getSimpleBlockRule()); } 
	 EOF 
;

// Rule SimpleBlock
ruleSimpleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleBlockAccess().getGroup()); }
(rule__SimpleBlock__Group__0)
{ after(grammarAccess.getSimpleBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimultaneousBlock
entryRuleSimultaneousBlock 
:
{ before(grammarAccess.getSimultaneousBlockRule()); }
	 ruleSimultaneousBlock
{ after(grammarAccess.getSimultaneousBlockRule()); } 
	 EOF 
;

// Rule SimultaneousBlock
ruleSimultaneousBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getGroup()); }
(rule__SimultaneousBlock__Group__0)
{ after(grammarAccess.getSimultaneousBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScheme
entryRuleScheme 
:
{ before(grammarAccess.getSchemeRule()); }
	 ruleScheme
{ after(grammarAccess.getSchemeRule()); } 
	 EOF 
;

// Rule Scheme
ruleScheme
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemeAccess().getGroup()); }
(rule__Scheme__Group__0)
{ after(grammarAccess.getSchemeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeExpression
entryRuleSchemeExpression 
:
{ before(grammarAccess.getSchemeExpressionRule()); }
	 ruleSchemeExpression
{ after(grammarAccess.getSchemeExpressionRule()); } 
	 EOF 
;

// Rule SchemeExpression
ruleSchemeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemeExpressionAccess().getGroup()); }
(rule__SchemeExpression__Group__0)
{ after(grammarAccess.getSchemeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeValue
entryRuleSchemeValue 
:
{ before(grammarAccess.getSchemeValueRule()); }
	 ruleSchemeValue
{ after(grammarAccess.getSchemeValueRule()); } 
	 EOF 
;

// Rule SchemeValue
ruleSchemeValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemeValueAccess().getAlternatives()); }
(rule__SchemeValue__Alternatives)
{ after(grammarAccess.getSchemeValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeBoolean
entryRuleSchemeBoolean 
:
{ before(grammarAccess.getSchemeBooleanRule()); }
	 ruleSchemeBoolean
{ after(grammarAccess.getSchemeBooleanRule()); } 
	 EOF 
;

// Rule SchemeBoolean
ruleSchemeBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemeBooleanAccess().getValueAssignment()); }
(rule__SchemeBoolean__ValueAssignment)
{ after(grammarAccess.getSchemeBooleanAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeList
entryRuleSchemeList 
:
{ before(grammarAccess.getSchemeListRule()); }
	 ruleSchemeList
{ after(grammarAccess.getSchemeListRule()); } 
	 EOF 
;

// Rule SchemeList
ruleSchemeList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemeListAccess().getGroup()); }
(rule__SchemeList__Group__0)
{ after(grammarAccess.getSchemeListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeBlock
entryRuleSchemeBlock 
:
{ before(grammarAccess.getSchemeBlockRule()); }
	 ruleSchemeBlock
{ after(grammarAccess.getSchemeBlockRule()); } 
	 EOF 
;

// Rule SchemeBlock
ruleSchemeBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemeBlockAccess().getGroup()); }
(rule__SchemeBlock__Group__0)
{ after(grammarAccess.getSchemeBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeText
entryRuleSchemeText 
:
{ before(grammarAccess.getSchemeTextRule()); }
	 ruleSchemeText
{ after(grammarAccess.getSchemeTextRule()); } 
	 EOF 
;

// Rule SchemeText
ruleSchemeText
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemeTextAccess().getValueAssignment()); }
(rule__SchemeText__ValueAssignment)
{ after(grammarAccess.getSchemeTextAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeTextLiterals
entryRuleSchemeTextLiterals 
:
{ before(grammarAccess.getSchemeTextLiteralsRule()); }
	 ruleSchemeTextLiterals
{ after(grammarAccess.getSchemeTextLiteralsRule()); } 
	 EOF 
;

// Rule SchemeTextLiterals
ruleSchemeTextLiterals
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getAlternatives()); }
(rule__SchemeTextLiterals__Alternatives)
{ after(grammarAccess.getSchemeTextLiteralsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeNumber
entryRuleSchemeNumber 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSchemeNumberRule()); }
	 ruleSchemeNumber
{ after(grammarAccess.getSchemeNumberRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeNumber
ruleSchemeNumber
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemeNumberAccess().getGroup()); }
(rule__SchemeNumber__Group__0)
{ after(grammarAccess.getSchemeNumberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandAccess().getAlternatives()); }
(rule__Command__Alternatives)
{ after(grammarAccess.getCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArbitraryCommand
entryRuleArbitraryCommand 
:
{ before(grammarAccess.getArbitraryCommandRule()); }
	 ruleArbitraryCommand
{ after(grammarAccess.getArbitraryCommandRule()); } 
	 EOF 
;

// Rule ArbitraryCommand
ruleArbitraryCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArbitraryCommandAccess().getKeywordAssignment()); }
(rule__ArbitraryCommand__KeywordAssignment)
{ after(grammarAccess.getArbitraryCommandAccess().getKeywordAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArbitraryCommandKeyword
entryRuleArbitraryCommandKeyword 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getArbitraryCommandKeywordRule()); }
	 ruleArbitraryCommandKeyword
{ after(grammarAccess.getArbitraryCommandKeywordRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ArbitraryCommandKeyword
ruleArbitraryCommandKeyword
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArbitraryCommandKeywordAccess().getGroup()); }
(rule__ArbitraryCommandKeyword__Group__0)
{ after(grammarAccess.getArbitraryCommandKeywordAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSpecialCommand
entryRuleSpecialCommand 
:
{ before(grammarAccess.getSpecialCommandRule()); }
	 ruleSpecialCommand
{ after(grammarAccess.getSpecialCommandRule()); } 
	 EOF 
;

// Rule SpecialCommand
ruleSpecialCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSpecialCommandAccess().getAlternatives()); }
(rule__SpecialCommand__Alternatives)
{ after(grammarAccess.getSpecialCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInclude
entryRuleInclude 
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIncludeAccess().getGroup()); }
(rule__Include__Group__0)
{ after(grammarAccess.getIncludeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIncludeKeyword
entryRuleIncludeKeyword 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getIncludeKeywordRule()); }
	 ruleIncludeKeyword
{ after(grammarAccess.getIncludeKeywordRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule IncludeKeyword
ruleIncludeKeyword
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIncludeKeywordAccess().getGroup()); }
(rule__IncludeKeyword__Group__0)
{ after(grammarAccess.getIncludeKeywordAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleVersion
entryRuleVersion 
:
{ before(grammarAccess.getVersionRule()); }
	 ruleVersion
{ after(grammarAccess.getVersionRule()); } 
	 EOF 
;

// Rule Version
ruleVersion
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVersionAccess().getGroup()); }
(rule__Version__Group__0)
{ after(grammarAccess.getVersionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVersionKeyword
entryRuleVersionKeyword 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getVersionKeywordRule()); }
	 ruleVersionKeyword
{ after(grammarAccess.getVersionKeywordRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VersionKeyword
ruleVersionKeyword
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVersionKeywordAccess().getGroup()); }
(rule__VersionKeyword__Group__0)
{ after(grammarAccess.getVersionKeywordAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleText
entryRuleText 
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextAccess().getValueAssignment()); }
(rule__Text__ValueAssignment)
{ after(grammarAccess.getTextAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getValueAssignment()); }
(rule__Number__ValueAssignment)
{ after(grammarAccess.getNumberAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getBlockParserRuleCall_0()); }
	ruleBlock
{ after(grammarAccess.getExpressionAccess().getBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getSchemeParserRuleCall_1()); }
	ruleScheme
{ after(grammarAccess.getExpressionAccess().getSchemeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getCommandParserRuleCall_2()); }
	ruleCommand
{ after(grammarAccess.getExpressionAccess().getCommandParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getTextParserRuleCall_3()); }
	ruleText
{ after(grammarAccess.getExpressionAccess().getTextParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getNumberParserRuleCall_4()); }
	ruleNumber
{ after(grammarAccess.getExpressionAccess().getNumberParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getSimpleBlockParserRuleCall_0()); }
	ruleSimpleBlock
{ after(grammarAccess.getBlockAccess().getSimpleBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBlockAccess().getSimultaneousBlockParserRuleCall_1()); }
	ruleSimultaneousBlock
{ after(grammarAccess.getBlockAccess().getSimultaneousBlockParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeValueAccess().getSchemeBooleanParserRuleCall_0()); }
	ruleSchemeBoolean
{ after(grammarAccess.getSchemeValueAccess().getSchemeBooleanParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeListParserRuleCall_1()); }
	ruleSchemeList
{ after(grammarAccess.getSchemeValueAccess().getSchemeListParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeBlockParserRuleCall_2()); }
	ruleSchemeBlock
{ after(grammarAccess.getSchemeValueAccess().getSchemeBlockParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeTextParserRuleCall_3()); }
	ruleSchemeText
{ after(grammarAccess.getSchemeValueAccess().getSchemeTextParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeNumberParserRuleCall_4()); }
	ruleSchemeNumber
{ after(grammarAccess.getSchemeValueAccess().getSchemeNumberParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeTextLiterals__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getReverseSolidusReverseSolidusKeyword_0()); }

	'\\\\' 

{ after(grammarAccess.getSchemeTextLiteralsAccess().getReverseSolidusReverseSolidusKeyword_0()); }
)

    |(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getSchemeTextLiteralsAccess().getIDTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getSchemeTextLiteralsAccess().getSTRINGTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getANY_OTHERTerminalRuleCall_3()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getSchemeTextLiteralsAccess().getANY_OTHERTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getArbitraryCommandParserRuleCall_0()); }
	ruleArbitraryCommand
{ after(grammarAccess.getCommandAccess().getArbitraryCommandParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getSpecialCommandParserRuleCall_1()); }
	ruleSpecialCommand
{ after(grammarAccess.getCommandAccess().getSpecialCommandParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArbitraryCommandKeyword__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArbitraryCommandKeywordAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
{ after(grammarAccess.getArbitraryCommandKeywordAccess().getIDTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getArbitraryCommandKeywordAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getArbitraryCommandKeywordAccess().getLeftParenthesisKeyword_1_1()); }
)

    |(
{ before(grammarAccess.getArbitraryCommandKeywordAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getArbitraryCommandKeywordAccess().getRightParenthesisKeyword_1_2()); }
)

    |(
{ before(grammarAccess.getArbitraryCommandKeywordAccess().getANY_OTHERTerminalRuleCall_1_3()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getArbitraryCommandKeywordAccess().getANY_OTHERTerminalRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCommand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialCommandAccess().getIncludeParserRuleCall_0()); }
	ruleInclude
{ after(grammarAccess.getSpecialCommandAccess().getIncludeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getVersionParserRuleCall_1()); }
	ruleVersion
{ after(grammarAccess.getSpecialCommandAccess().getVersionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Text__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextAccess().getValueSchemeTextLiteralsParserRuleCall_0_0()); }
	ruleSchemeTextLiterals
{ after(grammarAccess.getTextAccess().getValueSchemeTextLiteralsParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueApostropheKeyword_0_1()); }

	'\'' 

{ after(grammarAccess.getTextAccess().getValueApostropheKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueCommaKeyword_0_2()); }

	',' 

{ after(grammarAccess.getTextAccess().getValueCommaKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueLeftParenthesisKeyword_0_3()); }

	'(' 

{ after(grammarAccess.getTextAccess().getValueLeftParenthesisKeyword_0_3()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueRightParenthesisKeyword_0_4()); }

	')' 

{ after(grammarAccess.getTextAccess().getValueRightParenthesisKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SimpleBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__0__Impl
	rule__SimpleBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getSimpleBlockAction_0()); }
(

)
{ after(grammarAccess.getSimpleBlockAccess().getSimpleBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__1__Impl
	rule__SimpleBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getSimpleBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__2__Impl
	rule__SimpleBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getExpressionsAssignment_2()); }
(rule__SimpleBlock__ExpressionsAssignment_2)*
{ after(grammarAccess.getSimpleBlockAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getSimpleBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SimultaneousBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__0__Impl
	rule__SimultaneousBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getSimultaneousBlockAction_0()); }
(

)
{ after(grammarAccess.getSimultaneousBlockAccess().getSimultaneousBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__1__Impl
	rule__SimultaneousBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getLessThanSignLessThanSignKeyword_1()); }

	'<<' 

{ after(grammarAccess.getSimultaneousBlockAccess().getLessThanSignLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__2__Impl
	rule__SimultaneousBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getExpressionsAssignment_2()); }
(rule__SimultaneousBlock__ExpressionsAssignment_2)*
{ after(grammarAccess.getSimultaneousBlockAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getGreaterThanSignGreaterThanSignKeyword_3()); }

	'>>' 

{ after(grammarAccess.getSimultaneousBlockAccess().getGreaterThanSignGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Scheme__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scheme__Group__0__Impl
	rule__Scheme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getNumberSignKeyword_0()); }

	'#' 

{ after(grammarAccess.getSchemeAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scheme__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scheme__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getValueAssignment_1()); }
(rule__Scheme__ValueAssignment_1)
{ after(grammarAccess.getSchemeAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeExpression__Group__0__Impl
	rule__SchemeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotedAssignment_0()); }
(rule__SchemeExpression__QuotedAssignment_0)?
{ after(grammarAccess.getSchemeExpressionAccess().getQuotedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getValueAssignment_1()); }
(rule__SchemeExpression__ValueAssignment_1)
{ after(grammarAccess.getSchemeExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__0__Impl
	rule__SchemeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getSchemeListAction_0()); }
(

)
{ after(grammarAccess.getSchemeListAccess().getSchemeListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__1__Impl
	rule__SchemeList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSchemeListAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__2__Impl
	rule__SchemeList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getExpressionsAssignment_2()); }
(rule__SchemeList__ExpressionsAssignment_2)*
{ after(grammarAccess.getSchemeListAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getSchemeListAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SchemeBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__0__Impl
	rule__SchemeBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getNumberSignLeftCurlyBracketKeyword_0()); }

	'#{' 

{ after(grammarAccess.getSchemeBlockAccess().getNumberSignLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__1__Impl
	rule__SchemeBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSchemeBlockAccess().getExpressionsAssignment_1()); }
(rule__SchemeBlock__ExpressionsAssignment_1)
{ after(grammarAccess.getSchemeBlockAccess().getExpressionsAssignment_1()); }
)
(
{ before(grammarAccess.getSchemeBlockAccess().getExpressionsAssignment_1()); }
(rule__SchemeBlock__ExpressionsAssignment_1)*
{ after(grammarAccess.getSchemeBlockAccess().getExpressionsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getNumberSignRightCurlyBracketKeyword_2()); }

	'#}' 

{ after(grammarAccess.getSchemeBlockAccess().getNumberSignRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SchemeNumber__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumber__Group__0__Impl
	rule__SchemeNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getHexadecimalAssignment_0()); }
(rule__SchemeNumber__HexadecimalAssignment_0)?
{ after(grammarAccess.getSchemeNumberAccess().getHexadecimalAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeNumber__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumber__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getValueAssignment_1()); }
(rule__SchemeNumber__ValueAssignment_1)
{ after(grammarAccess.getSchemeNumberAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArbitraryCommandKeyword__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArbitraryCommandKeyword__Group__0__Impl
	rule__ArbitraryCommandKeyword__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArbitraryCommandKeyword__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArbitraryCommandKeywordAccess().getReverseSolidusKeyword_0()); }

	'\\' 

{ after(grammarAccess.getArbitraryCommandKeywordAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArbitraryCommandKeyword__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArbitraryCommandKeyword__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArbitraryCommandKeyword__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArbitraryCommandKeywordAccess().getAlternatives_1()); }
(rule__ArbitraryCommandKeyword__Alternatives_1)
{ after(grammarAccess.getArbitraryCommandKeywordAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Include__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getKeywordAssignment_0()); }
(rule__Include__KeywordAssignment_0)
{ after(grammarAccess.getIncludeAccess().getKeywordAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getImportURIAssignment_1()); }
(rule__Include__ImportURIAssignment_1)
{ after(grammarAccess.getIncludeAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IncludeKeyword__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeKeyword__Group__0__Impl
	rule__IncludeKeyword__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeKeyword__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeKeywordAccess().getReverseSolidusKeyword_0()); }

	'\\' 

{ after(grammarAccess.getIncludeKeywordAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeKeyword__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeKeyword__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeKeyword__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeKeywordAccess().getIncludeKeyword_1()); }

	'include' 

{ after(grammarAccess.getIncludeKeywordAccess().getIncludeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Version__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Version__Group__0__Impl
	rule__Version__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getKeywordAssignment_0()); }
(rule__Version__KeywordAssignment_0)
{ after(grammarAccess.getVersionAccess().getKeywordAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Version__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getVersionAssignment_1()); }
(rule__Version__VersionAssignment_1)
{ after(grammarAccess.getVersionAccess().getVersionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VersionKeyword__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionKeyword__Group__0__Impl
	rule__VersionKeyword__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionKeyword__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionKeywordAccess().getReverseSolidusKeyword_0()); }

	'\\' 

{ after(grammarAccess.getVersionKeywordAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VersionKeyword__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionKeyword__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionKeyword__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionKeywordAccess().getVersionKeyword_1()); }

	'version' 

{ after(grammarAccess.getVersionKeywordAccess().getVersionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__LilyPond__ExpressionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLilyPondAccess().getExpressionsExpressionParserRuleCall_0()); }
	ruleExpression{ after(grammarAccess.getLilyPondAccess().getExpressionsExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSimpleBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSimultaneousBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getValueSchemeExpressionParserRuleCall_1_0()); }
	ruleSchemeExpression{ after(grammarAccess.getSchemeAccess().getValueSchemeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__QuotedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0()); }
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0()); }

	'\'' 

{ after(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0()); }
)

{ after(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getValueSchemeValueParserRuleCall_1_0()); }
	ruleSchemeValue{ after(grammarAccess.getSchemeExpressionAccess().getValueSchemeValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBoolean__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBooleanAccess().getValueBOOLTerminalRuleCall_0()); }
	RULE_BOOL{ after(grammarAccess.getSchemeBooleanAccess().getValueBOOLTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getExpressionsSchemeExpressionParserRuleCall_2_0()); }
	ruleSchemeExpression{ after(grammarAccess.getSchemeListAccess().getExpressionsSchemeExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__ExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getExpressionsExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getSchemeBlockAccess().getExpressionsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeText__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextAccess().getValueSchemeTextLiteralsParserRuleCall_0()); }
	ruleSchemeTextLiterals{ after(grammarAccess.getSchemeTextAccess().getValueSchemeTextLiteralsParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__HexadecimalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getHexadecimalXKeyword_0_0()); }
(
{ before(grammarAccess.getSchemeNumberAccess().getHexadecimalXKeyword_0_0()); }

	'#x' 

{ after(grammarAccess.getSchemeNumberAccess().getHexadecimalXKeyword_0_0()); }
)

{ after(grammarAccess.getSchemeNumberAccess().getHexadecimalXKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSchemeNumberAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArbitraryCommand__KeywordAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArbitraryCommandAccess().getKeywordArbitraryCommandKeywordParserRuleCall_0()); }
	ruleArbitraryCommandKeyword{ after(grammarAccess.getArbitraryCommandAccess().getKeywordArbitraryCommandKeywordParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Include__KeywordAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getKeywordIncludeKeywordParserRuleCall_0_0()); }
	ruleIncludeKeyword{ after(grammarAccess.getIncludeAccess().getKeywordIncludeKeywordParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Include__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Version__KeywordAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getKeywordVersionKeywordParserRuleCall_0_0()); }
	ruleVersionKeyword{ after(grammarAccess.getVersionAccess().getKeywordVersionKeywordParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Version__VersionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getVersionSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getVersionAccess().getVersionSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Text__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextAccess().getValueAlternatives_0()); }
(rule__Text__ValueAlternatives_0)
{ after(grammarAccess.getTextAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_STRING : '"' ('\\' ('b'|'t'|'n'|' f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_INT : ('0'..'9')+;

RULE_BOOL : ('#f'|'#t');

RULE_ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'-')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ML_COMMENT : '%{' ( options {greedy=false;} : . )*'%}';

RULE_ANY_OTHER : .;


