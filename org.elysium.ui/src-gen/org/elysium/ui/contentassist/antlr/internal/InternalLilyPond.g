/*
* generated by Xtext
*/
parser grammar InternalLilyPond;

options {
	tokenVocab=InternalLilyPond;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@header {
package org.elysium.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.elysium.services.LilyPondGrammarAccess;

}

@members {
 
 	private LilyPondGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'!'");
		tokenNameToValue.put("KEYWORD_2", "'#'");
		tokenNameToValue.put("KEYWORD_3", "'\u0024'");
		tokenNameToValue.put("KEYWORD_4", "'\''");
		tokenNameToValue.put("KEYWORD_5", "'('");
		tokenNameToValue.put("KEYWORD_6", "')'");
		tokenNameToValue.put("KEYWORD_7", "'+'");
		tokenNameToValue.put("KEYWORD_8", "','");
		tokenNameToValue.put("KEYWORD_9", "'-'");
		tokenNameToValue.put("KEYWORD_10", "':'");
		tokenNameToValue.put("KEYWORD_11", "'<'");
		tokenNameToValue.put("KEYWORD_12", "'='");
		tokenNameToValue.put("KEYWORD_13", "'>'");
		tokenNameToValue.put("KEYWORD_14", "'?'");
		tokenNameToValue.put("KEYWORD_15", "'@'");
		tokenNameToValue.put("KEYWORD_16", "'['");
		tokenNameToValue.put("KEYWORD_17", "'\\'");
		tokenNameToValue.put("KEYWORD_18", "']'");
		tokenNameToValue.put("KEYWORD_19", "'`'");
		tokenNameToValue.put("KEYWORD_20", "'{'");
		tokenNameToValue.put("KEYWORD_21", "'}'");
		tokenNameToValue.put("KEYWORD_22", "'~'");
		tokenNameToValue.put("KEYWORD_23", "'#:'");
		tokenNameToValue.put("KEYWORD_24", "'#\\'");
		tokenNameToValue.put("KEYWORD_25", "'#{'");
		tokenNameToValue.put("KEYWORD_26", "'#}'");
		tokenNameToValue.put("KEYWORD_27", "'<<'");
		tokenNameToValue.put("KEYWORD_28", "'>>'");
		tokenNameToValue.put("KEYWORD_29", "'\\\\'");
		tokenNameToValue.put("KEYWORD_30", "'key'");
		tokenNameToValue.put("KEYWORD_31", "'new'");
		tokenNameToValue.put("KEYWORD_32", "'set'");
		tokenNameToValue.put("KEYWORD_33", "'book'");
		tokenNameToValue.put("KEYWORD_34", "'mark'");
		tokenNameToValue.put("KEYWORD_35", "'midi'");
		tokenNameToValue.put("KEYWORD_36", "'name'");
		tokenNameToValue.put("KEYWORD_37", "'once'");
		tokenNameToValue.put("KEYWORD_38", "'rest'");
		tokenNameToValue.put("KEYWORD_39", "'skip'");
		tokenNameToValue.put("KEYWORD_40", "'time'");
		tokenNameToValue.put("KEYWORD_41", "'type'");
		tokenNameToValue.put("KEYWORD_42", "'with'");
		tokenNameToValue.put("KEYWORD_43", "'alias'");
		tokenNameToValue.put("KEYWORD_44", "'drums'");
		tokenNameToValue.put("KEYWORD_45", "'paper'");
		tokenNameToValue.put("KEYWORD_46", "'score'");
		tokenNameToValue.put("KEYWORD_47", "'tempo'");
		tokenNameToValue.put("KEYWORD_48", "'times'");
		tokenNameToValue.put("KEYWORD_49", "'unset'");
		tokenNameToValue.put("KEYWORD_50", "'change'");
		tokenNameToValue.put("KEYWORD_51", "'chords'");
		tokenNameToValue.put("KEYWORD_52", "'denies'");
		tokenNameToValue.put("KEYWORD_53", "'header'");
		tokenNameToValue.put("KEYWORD_54", "'layout'");
		tokenNameToValue.put("KEYWORD_55", "'lyrics'");
		tokenNameToValue.put("KEYWORD_56", "'markup'");
		tokenNameToValue.put("KEYWORD_57", "'octave'");
		tokenNameToValue.put("KEYWORD_58", "'remove'");
		tokenNameToValue.put("KEYWORD_59", "'repeat'");
		tokenNameToValue.put("KEYWORD_60", "'revert'");
		tokenNameToValue.put("KEYWORD_61", "'accepts'");
		tokenNameToValue.put("KEYWORD_62", "'context'");
		tokenNameToValue.put("KEYWORD_63", "'default'");
		tokenNameToValue.put("KEYWORD_64", "'figures'");
		tokenNameToValue.put("KEYWORD_65", "'include'");
		tokenNameToValue.put("KEYWORD_66", "'partial'");
		tokenNameToValue.put("KEYWORD_67", "'version'");
		tokenNameToValue.put("KEYWORD_68", "'bookpart'");
		tokenNameToValue.put("KEYWORD_69", "'consists'");
		tokenNameToValue.put("KEYWORD_70", "'drummode'");
		tokenNameToValue.put("KEYWORD_71", "'lyricsto'");
		tokenNameToValue.put("KEYWORD_72", "'notemode'");
		tokenNameToValue.put("KEYWORD_73", "'objectid'");
		tokenNameToValue.put("KEYWORD_74", "'override'");
		tokenNameToValue.put("KEYWORD_75", "'relative'");
		tokenNameToValue.put("KEYWORD_76", "'addlyrics'");
		tokenNameToValue.put("KEYWORD_77", "'chordmode'");
		tokenNameToValue.put("KEYWORD_78", "'lyricmode'");
		tokenNameToValue.put("KEYWORD_79", "'maininput'");
		tokenNameToValue.put("KEYWORD_80", "'transpose'");
		tokenNameToValue.put("KEYWORD_81", "'figuremode'");
		tokenNameToValue.put("KEYWORD_82", "'sequential'");
		tokenNameToValue.put("KEYWORD_83", "'alternative'");
		tokenNameToValue.put("KEYWORD_84", "'description'");
		tokenNameToValue.put("KEYWORD_85", "'markuplines'");
		tokenNameToValue.put("KEYWORD_86", "'defaultchild'");
		tokenNameToValue.put("KEYWORD_87", "'simultaneous'");
		tokenNameToValue.put("KEYWORD_88", "'sourcefileline'");
		tokenNameToValue.put("KEYWORD_89", "'sourcefilename'");
		tokenNameToValue.put("KEYWORD_90", "'grobdescriptions'");
 	}
 	
    public void setGrammarAccess(LilyPondGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleLilyPond
entryRuleLilyPond 
:
{ before(grammarAccess.getLilyPondRule()); }
	 ruleLilyPond
{ after(grammarAccess.getLilyPondRule()); } 
	 EOF 
;

// Rule LilyPond
ruleLilyPond 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLilyPondAccess().getExpressionsAssignment()); }
(rule__LilyPond__ExpressionsAssignment)*
{ after(grammarAccess.getLilyPondAccess().getExpressionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleToplevelExpression
entryRuleToplevelExpression 
:
{ before(grammarAccess.getToplevelExpressionRule()); }
	 ruleToplevelExpression
{ after(grammarAccess.getToplevelExpressionRule()); } 
	 EOF 
;

// Rule ToplevelExpression
ruleToplevelExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getToplevelExpressionAccess().getAlternatives()); }
(rule__ToplevelExpression__Alternatives)
{ after(grammarAccess.getToplevelExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommonExpression
entryRuleCommonExpression 
:
{ before(grammarAccess.getCommonExpressionRule()); }
	 ruleCommonExpression
{ after(grammarAccess.getCommonExpressionRule()); } 
	 EOF 
;

// Rule CommonExpression
ruleCommonExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCommonExpressionAccess().getAlternatives()); }
(rule__CommonExpression__Alternatives)
{ after(grammarAccess.getCommonExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyAssignment
entryRulePropertyAssignment 
:
{ before(grammarAccess.getPropertyAssignmentRule()); }
	 rulePropertyAssignment
{ after(grammarAccess.getPropertyAssignmentRule()); } 
	 EOF 
;

// Rule PropertyAssignment
rulePropertyAssignment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPropertyAssignmentAccess().getGroup()); }
(rule__PropertyAssignment__Group__0)
{ after(grammarAccess.getPropertyAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBlockAccess().getAlternatives()); }
(rule__Block__Alternatives)
{ after(grammarAccess.getBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleBlock
entryRuleSimpleBlock 
:
{ before(grammarAccess.getSimpleBlockRule()); }
	 ruleSimpleBlock
{ after(grammarAccess.getSimpleBlockRule()); } 
	 EOF 
;

// Rule SimpleBlock
ruleSimpleBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimpleBlockAccess().getGroup()); }
(rule__SimpleBlock__Group__0)
{ after(grammarAccess.getSimpleBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimultaneousBlock
entryRuleSimultaneousBlock 
:
{ before(grammarAccess.getSimultaneousBlockRule()); }
	 ruleSimultaneousBlock
{ after(grammarAccess.getSimultaneousBlockRule()); } 
	 EOF 
;

// Rule SimultaneousBlock
ruleSimultaneousBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimultaneousBlockAccess().getGroup()); }
(rule__SimultaneousBlock__Group__0)
{ after(grammarAccess.getSimultaneousBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCommandAccess().getAlternatives()); }
(rule__Command__Alternatives)
{ after(grammarAccess.getCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpecialCharacter
entryRuleSpecialCharacter 
:
{ before(grammarAccess.getSpecialCharacterRule()); }
	 ruleSpecialCharacter
{ after(grammarAccess.getSpecialCharacterRule()); } 
	 EOF 
;

// Rule SpecialCharacter
ruleSpecialCharacter 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSpecialCharacterAccess().getAlternatives()); }
(rule__SpecialCharacter__Alternatives)
{ after(grammarAccess.getSpecialCharacterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnparsedBlock
entryRuleUnparsedBlock 
:
{ before(grammarAccess.getUnparsedBlockRule()); }
	 ruleUnparsedBlock
{ after(grammarAccess.getUnparsedBlockRule()); } 
	 EOF 
;

// Rule UnparsedBlock
ruleUnparsedBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnparsedBlockAccess().getGroup()); }
(rule__UnparsedBlock__Group__0)
{ after(grammarAccess.getUnparsedBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnparsedExpression
entryRuleUnparsedExpression 
:
{ before(grammarAccess.getUnparsedExpressionRule()); }
	 ruleUnparsedExpression
{ after(grammarAccess.getUnparsedExpressionRule()); } 
	 EOF 
;

// Rule UnparsedExpression
ruleUnparsedExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnparsedExpressionAccess().getAlternatives()); }
(rule__UnparsedExpression__Alternatives)
{ after(grammarAccess.getUnparsedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnparsedCommand
entryRuleUnparsedCommand 
:
{ before(grammarAccess.getUnparsedCommandRule()); }
	 ruleUnparsedCommand
{ after(grammarAccess.getUnparsedCommandRule()); } 
	 EOF 
;

// Rule UnparsedCommand
ruleUnparsedCommand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnparsedCommandAccess().getGroup()); }
(rule__UnparsedCommand__Group__0)
{ after(grammarAccess.getUnparsedCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReference
entryRuleReference 
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getReferenceAccess().getGroup()); }
(rule__Reference__Group__0)
{ after(grammarAccess.getReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleText
entryRuleText 
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTextAccess().getValueAssignment()); }
(rule__Text__ValueAssignment)
{ after(grammarAccess.getTextAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNumberAccess().getValueAssignment()); }
(rule__Number__ValueAssignment)
{ after(grammarAccess.getNumberAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpecialCommand
entryRuleSpecialCommand 
:
{ before(grammarAccess.getSpecialCommandRule()); }
	 ruleSpecialCommand
{ after(grammarAccess.getSpecialCommandRule()); } 
	 EOF 
;

// Rule SpecialCommand
ruleSpecialCommand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSpecialCommandAccess().getAlternatives()); }
(rule__SpecialCommand__Alternatives)
{ after(grammarAccess.getSpecialCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInclude
entryRuleInclude 
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIncludeAccess().getGroup()); }
(rule__Include__Group__0)
{ after(grammarAccess.getIncludeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVersion
entryRuleVersion 
:
{ before(grammarAccess.getVersionRule()); }
	 ruleVersion
{ after(grammarAccess.getVersionRule()); } 
	 EOF 
;

// Rule Version
ruleVersion 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVersionAccess().getGroup()); }
(rule__Version__Group__0)
{ after(grammarAccess.getVersionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSourceFileName
entryRuleSourceFileName 
:
{ before(grammarAccess.getSourceFileNameRule()); }
	 ruleSourceFileName
{ after(grammarAccess.getSourceFileNameRule()); } 
	 EOF 
;

// Rule SourceFileName
ruleSourceFileName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSourceFileNameAccess().getGroup()); }
(rule__SourceFileName__Group__0)
{ after(grammarAccess.getSourceFileNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSourceFileLine
entryRuleSourceFileLine 
:
{ before(grammarAccess.getSourceFileLineRule()); }
	 ruleSourceFileLine
{ after(grammarAccess.getSourceFileLineRule()); } 
	 EOF 
;

// Rule SourceFileLine
ruleSourceFileLine 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSourceFileLineAccess().getGroup()); }
(rule__SourceFileLine__Group__0)
{ after(grammarAccess.getSourceFileLineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMarkup
entryRuleMarkup 
:
{ before(grammarAccess.getMarkupRule()); }
	 ruleMarkup
{ after(grammarAccess.getMarkupRule()); } 
	 EOF 
;

// Rule Markup
ruleMarkup 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMarkupAccess().getGroup()); }
(rule__Markup__Group__0)
{ after(grammarAccess.getMarkupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMarkupLines
entryRuleMarkupLines 
:
{ before(grammarAccess.getMarkupLinesRule()); }
	 ruleMarkupLines
{ after(grammarAccess.getMarkupLinesRule()); } 
	 EOF 
;

// Rule MarkupLines
ruleMarkupLines 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMarkupLinesAccess().getGroup()); }
(rule__MarkupLines__Group__0)
{ after(grammarAccess.getMarkupLinesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMarkupBody
entryRuleMarkupBody 
:
{ before(grammarAccess.getMarkupBodyRule()); }
	 ruleMarkupBody
{ after(grammarAccess.getMarkupBodyRule()); } 
	 EOF 
;

// Rule MarkupBody
ruleMarkupBody 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMarkupBodyAccess().getGroup()); }
(rule__MarkupBody__Group__0)
{ after(grammarAccess.getMarkupBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockCommand
entryRuleBlockCommand 
:
{ before(grammarAccess.getBlockCommandRule()); }
	 ruleBlockCommand
{ after(grammarAccess.getBlockCommandRule()); } 
	 EOF 
;

// Rule BlockCommand
ruleBlockCommand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBlockCommandAccess().getGroup()); }
(rule__BlockCommand__Group__0)
{ after(grammarAccess.getBlockCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutputDefinition
entryRuleOutputDefinition 
:
{ before(grammarAccess.getOutputDefinitionRule()); }
	 ruleOutputDefinition
{ after(grammarAccess.getOutputDefinitionRule()); } 
	 EOF 
;

// Rule OutputDefinition
ruleOutputDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOutputDefinitionAccess().getGroup()); }
(rule__OutputDefinition__Group__0)
{ after(grammarAccess.getOutputDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelativeMusic
entryRuleRelativeMusic 
:
{ before(grammarAccess.getRelativeMusicRule()); }
	 ruleRelativeMusic
{ after(grammarAccess.getRelativeMusicRule()); } 
	 EOF 
;

// Rule RelativeMusic
ruleRelativeMusic 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRelativeMusicAccess().getGroup()); }
(rule__RelativeMusic__Group__0)
{ after(grammarAccess.getRelativeMusicAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePitch
entryRulePitch 
:
{ before(grammarAccess.getPitchRule()); }
	 rulePitch
{ after(grammarAccess.getPitchRule()); } 
	 EOF 
;

// Rule Pitch
rulePitch 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPitchAccess().getGroup()); }
(rule__Pitch__Group__0)
{ after(grammarAccess.getPitchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOctave
entryRuleOctave 
:
{ before(grammarAccess.getOctaveRule()); }
	 ruleOctave
{ after(grammarAccess.getOctaveRule()); } 
	 EOF 
;

// Rule Octave
ruleOctave 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOctaveAccess().getAlternatives()); }
(rule__Octave__Alternatives)
{ after(grammarAccess.getOctaveAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransposedMusic
entryRuleTransposedMusic 
:
{ before(grammarAccess.getTransposedMusicRule()); }
	 ruleTransposedMusic
{ after(grammarAccess.getTransposedMusicRule()); } 
	 EOF 
;

// Rule TransposedMusic
ruleTransposedMusic 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTransposedMusicAccess().getGroup()); }
(rule__TransposedMusic__Group__0)
{ after(grammarAccess.getTransposedMusicAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModeChange
entryRuleModeChange 
:
{ before(grammarAccess.getModeChangeRule()); }
	 ruleModeChange
{ after(grammarAccess.getModeChangeRule()); } 
	 EOF 
;

// Rule ModeChange
ruleModeChange 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getModeChangeAccess().getGroup()); }
(rule__ModeChange__Group__0)
{ after(grammarAccess.getModeChangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMusicWithLyrics
entryRuleMusicWithLyrics 
:
{ before(grammarAccess.getMusicWithLyricsRule()); }
	 ruleMusicWithLyrics
{ after(grammarAccess.getMusicWithLyricsRule()); } 
	 EOF 
;

// Rule MusicWithLyrics
ruleMusicWithLyrics 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMusicWithLyricsAccess().getGroup()); }
(rule__MusicWithLyrics__Group__0)
{ after(grammarAccess.getMusicWithLyricsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNewContext
entryRuleNewContext 
:
{ before(grammarAccess.getNewContextRule()); }
	 ruleNewContext
{ after(grammarAccess.getNewContextRule()); } 
	 EOF 
;

// Rule NewContext
ruleNewContext 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNewContextAccess().getGroup()); }
(rule__NewContext__Group__0)
{ after(grammarAccess.getNewContextAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContextModification
entryRuleContextModification 
:
{ before(grammarAccess.getContextModificationRule()); }
	 ruleContextModification
{ after(grammarAccess.getContextModificationRule()); } 
	 EOF 
;

// Rule ContextModification
ruleContextModification 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContextModificationAccess().getGroup()); }
(rule__ContextModification__Group__0)
{ after(grammarAccess.getContextModificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContextDef
entryRuleContextDef 
:
{ before(grammarAccess.getContextDefRule()); }
	 ruleContextDef
{ after(grammarAccess.getContextDefRule()); } 
	 EOF 
;

// Rule ContextDef
ruleContextDef 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContextDefAccess().getGroup()); }
(rule__ContextDef__Group__0)
{ after(grammarAccess.getContextDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOther
entryRuleOther 
:
{ before(grammarAccess.getOtherRule()); }
	 ruleOther
{ after(grammarAccess.getOtherRule()); } 
	 EOF 
;

// Rule Other
ruleOther 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOtherAccess().getGroup()); }
(rule__Other__Group__0)
{ after(grammarAccess.getOtherAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOtherName
entryRuleOtherName 
:
{ before(grammarAccess.getOtherNameRule()); }
	 ruleOtherName
{ after(grammarAccess.getOtherNameRule()); } 
	 EOF 
;

// Rule OtherName
ruleOtherName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOtherNameAccess().getAlternatives()); }
(rule__OtherName__Alternatives)
{ after(grammarAccess.getOtherNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpecialCommandName
entryRuleSpecialCommandName 
:
{ before(grammarAccess.getSpecialCommandNameRule()); }
	 ruleSpecialCommandName
{ after(grammarAccess.getSpecialCommandNameRule()); } 
	 EOF 
;

// Rule SpecialCommandName
ruleSpecialCommandName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSpecialCommandNameAccess().getAlternatives()); }
(rule__SpecialCommandName__Alternatives)
{ after(grammarAccess.getSpecialCommandNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScheme
entryRuleScheme 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SCHEME_SL_COMMENT", "RULE_SCHEME_ML_COMMENT");
}
:
{ before(grammarAccess.getSchemeRule()); }
	 ruleScheme
{ after(grammarAccess.getSchemeRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Scheme
ruleScheme 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SCHEME_SL_COMMENT", "RULE_SCHEME_ML_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeAccess().getGroup()); }
(rule__Scheme__Group__0)
{ after(grammarAccess.getSchemeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSchemeExpression
entryRuleSchemeExpression 
:
{ before(grammarAccess.getSchemeExpressionRule()); }
	 ruleSchemeExpression
{ after(grammarAccess.getSchemeExpressionRule()); } 
	 EOF 
;

// Rule SchemeExpression
ruleSchemeExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeExpressionAccess().getGroup()); }
(rule__SchemeExpression__Group__0)
{ after(grammarAccess.getSchemeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeValue
entryRuleSchemeValue 
:
{ before(grammarAccess.getSchemeValueRule()); }
	 ruleSchemeValue
{ after(grammarAccess.getSchemeValueRule()); } 
	 EOF 
;

// Rule SchemeValue
ruleSchemeValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeValueAccess().getAlternatives()); }
(rule__SchemeValue__Alternatives)
{ after(grammarAccess.getSchemeValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeBoolean
entryRuleSchemeBoolean 
:
{ before(grammarAccess.getSchemeBooleanRule()); }
	 ruleSchemeBoolean
{ after(grammarAccess.getSchemeBooleanRule()); } 
	 EOF 
;

// Rule SchemeBoolean
ruleSchemeBoolean 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeBooleanAccess().getValueAssignment()); }
(rule__SchemeBoolean__ValueAssignment)
{ after(grammarAccess.getSchemeBooleanAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeBooleanValue
entryRuleSchemeBooleanValue 
:
{ before(grammarAccess.getSchemeBooleanValueRule()); }
	 ruleSchemeBooleanValue
{ after(grammarAccess.getSchemeBooleanValueRule()); } 
	 EOF 
;

// Rule SchemeBooleanValue
ruleSchemeBooleanValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeBooleanValueAccess().getGroup()); }
(rule__SchemeBooleanValue__Group__0)
{ after(grammarAccess.getSchemeBooleanValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeList
entryRuleSchemeList 
:
{ before(grammarAccess.getSchemeListRule()); }
	 ruleSchemeList
{ after(grammarAccess.getSchemeListRule()); } 
	 EOF 
;

// Rule SchemeList
ruleSchemeList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeListAccess().getGroup()); }
(rule__SchemeList__Group__0)
{ after(grammarAccess.getSchemeListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeBlock
entryRuleSchemeBlock 
:
{ before(grammarAccess.getSchemeBlockRule()); }
	 ruleSchemeBlock
{ after(grammarAccess.getSchemeBlockRule()); } 
	 EOF 
;

// Rule SchemeBlock
ruleSchemeBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeBlockAccess().getGroup()); }
(rule__SchemeBlock__Group__0)
{ after(grammarAccess.getSchemeBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeCharacter
entryRuleSchemeCharacter 
:
{ before(grammarAccess.getSchemeCharacterRule()); }
	 ruleSchemeCharacter
{ after(grammarAccess.getSchemeCharacterRule()); } 
	 EOF 
;

// Rule SchemeCharacter
ruleSchemeCharacter 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeCharacterAccess().getGroup()); }
(rule__SchemeCharacter__Group__0)
{ after(grammarAccess.getSchemeCharacterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeText
entryRuleSchemeText 
:
{ before(grammarAccess.getSchemeTextRule()); }
	 ruleSchemeText
{ after(grammarAccess.getSchemeTextRule()); } 
	 EOF 
;

// Rule SchemeText
ruleSchemeText 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeTextAccess().getValueAssignment()); }
(rule__SchemeText__ValueAssignment)
{ after(grammarAccess.getSchemeTextAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeTextValue
entryRuleSchemeTextValue 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSchemeTextValueRule()); }
	 ruleSchemeTextValue
{ after(grammarAccess.getSchemeTextValueRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeTextValue
ruleSchemeTextValue 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeTextValueAccess().getGroup()); }
(rule__SchemeTextValue__Group__0)
{ after(grammarAccess.getSchemeTextValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSchemeTextValueSegment
entryRuleSchemeTextValueSegment 
:
{ before(grammarAccess.getSchemeTextValueSegmentRule()); }
	 ruleSchemeTextValueSegment
{ after(grammarAccess.getSchemeTextValueSegmentRule()); } 
	 EOF 
;

// Rule SchemeTextValueSegment
ruleSchemeTextValueSegment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeTextValueSegmentAccess().getAlternatives()); }
(rule__SchemeTextValueSegment__Alternatives)
{ after(grammarAccess.getSchemeTextValueSegmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeIdentifier
entryRuleSchemeIdentifier 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSchemeIdentifierRule()); }
	 ruleSchemeIdentifier
{ after(grammarAccess.getSchemeIdentifierRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeIdentifier
ruleSchemeIdentifier 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeIdentifierAccess().getGroup()); }
(rule__SchemeIdentifier__Group__0)
{ after(grammarAccess.getSchemeIdentifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSchemeNumber
entryRuleSchemeNumber 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSchemeNumberRule()); }
	 ruleSchemeNumber
{ after(grammarAccess.getSchemeNumberRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeNumber
ruleSchemeNumber 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeNumberAccess().getGroup()); }
(rule__SchemeNumber__Group__0)
{ after(grammarAccess.getSchemeNumberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSchemeNumberRadix
entryRuleSchemeNumberRadix 
:
{ before(grammarAccess.getSchemeNumberRadixRule()); }
	 ruleSchemeNumberRadix
{ after(grammarAccess.getSchemeNumberRadixRule()); } 
	 EOF 
;

// Rule SchemeNumberRadix
ruleSchemeNumberRadix 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeNumberRadixAccess().getGroup()); }
(rule__SchemeNumberRadix__Group__0)
{ after(grammarAccess.getSchemeNumberRadixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeMarkupCommand
entryRuleSchemeMarkupCommand 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSchemeMarkupCommandRule()); }
	 ruleSchemeMarkupCommand
{ after(grammarAccess.getSchemeMarkupCommandRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeMarkupCommand
ruleSchemeMarkupCommand 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeMarkupCommandAccess().getGroup()); }
(rule__SchemeMarkupCommand__Group__0)
{ after(grammarAccess.getSchemeMarkupCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}




rule__ToplevelExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToplevelExpressionAccess().getAssignmentParserRuleCall_0()); }
	ruleAssignment
{ after(grammarAccess.getToplevelExpressionAccess().getAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getCommonExpressionParserRuleCall_1()); }
	ruleCommonExpression
{ after(grammarAccess.getToplevelExpressionAccess().getCommonExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getPropertyAssignmentParserRuleCall_0()); }
	rulePropertyAssignment
{ after(grammarAccess.getExpressionAccess().getPropertyAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getCommonExpressionParserRuleCall_1()); }
	ruleCommonExpression
{ after(grammarAccess.getExpressionAccess().getCommonExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommonExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommonExpressionAccess().getCommandParserRuleCall_0()); }
	ruleCommand
{ after(grammarAccess.getCommonExpressionAccess().getCommandParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommonExpressionAccess().getBlockParserRuleCall_1()); }
	ruleBlock
{ after(grammarAccess.getCommonExpressionAccess().getBlockParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCommonExpressionAccess().getSchemeParserRuleCall_2()); }
	ruleScheme
{ after(grammarAccess.getCommonExpressionAccess().getSchemeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getCommonExpressionAccess().getTextParserRuleCall_3()); }
	ruleText
{ after(grammarAccess.getCommonExpressionAccess().getTextParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getCommonExpressionAccess().getNumberParserRuleCall_4()); }
	ruleNumber
{ after(grammarAccess.getCommonExpressionAccess().getNumberParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__NameAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0_0()); }
	RULE_ID
{ after(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getNameSTRINGTerminalRuleCall_0_0_1()); }
	RULE_STRING
{ after(grammarAccess.getAssignmentAccess().getNameSTRINGTerminalRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getSimpleBlockParserRuleCall_0()); }
	ruleSimpleBlock
{ after(grammarAccess.getBlockAccess().getSimpleBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBlockAccess().getSimultaneousBlockParserRuleCall_1()); }
	ruleSimultaneousBlock
{ after(grammarAccess.getBlockAccess().getSimultaneousBlockParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getSpecialCommandParserRuleCall_0()); }
	ruleSpecialCommand
{ after(grammarAccess.getCommandAccess().getSpecialCommandParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getReferenceParserRuleCall_1()); }
	ruleReference
{ after(grammarAccess.getCommandAccess().getReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCharacter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialCharacterAccess().getExclamationMarkKeyword_0()); }

	KEYWORD_1 

{ after(grammarAccess.getSpecialCharacterAccess().getExclamationMarkKeyword_0()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getQuestionMarkKeyword_1()); }

	KEYWORD_14 

{ after(grammarAccess.getSpecialCharacterAccess().getQuestionMarkKeyword_1()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getPlusSignKeyword_2()); }

	KEYWORD_7 

{ after(grammarAccess.getSpecialCharacterAccess().getPlusSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getLessThanSignKeyword_3()); }

	KEYWORD_11 

{ after(grammarAccess.getSpecialCharacterAccess().getLessThanSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getGreaterThanSignKeyword_4()); }

	KEYWORD_13 

{ after(grammarAccess.getSpecialCharacterAccess().getGreaterThanSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getLeftSquareBracketKeyword_5()); }

	KEYWORD_16 

{ after(grammarAccess.getSpecialCharacterAccess().getLeftSquareBracketKeyword_5()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getRightSquareBracketKeyword_6()); }

	KEYWORD_18 

{ after(grammarAccess.getSpecialCharacterAccess().getRightSquareBracketKeyword_6()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getTildeKeyword_7()); }

	KEYWORD_22 

{ after(grammarAccess.getSpecialCharacterAccess().getTildeKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnparsedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnparsedExpressionAccess().getPropertyAssignmentParserRuleCall_0()); }
	rulePropertyAssignment
{ after(grammarAccess.getUnparsedExpressionAccess().getPropertyAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnparsedExpressionAccess().getUnparsedCommandParserRuleCall_1()); }
	ruleUnparsedCommand
{ after(grammarAccess.getUnparsedExpressionAccess().getUnparsedCommandParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getUnparsedExpressionAccess().getUnparsedBlockParserRuleCall_2()); }
	ruleUnparsedBlock
{ after(grammarAccess.getUnparsedExpressionAccess().getUnparsedBlockParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getUnparsedExpressionAccess().getSchemeParserRuleCall_3()); }
	ruleScheme
{ after(grammarAccess.getUnparsedExpressionAccess().getSchemeParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getUnparsedExpressionAccess().getTextParserRuleCall_4()); }
	ruleText
{ after(grammarAccess.getUnparsedExpressionAccess().getTextParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getUnparsedExpressionAccess().getNumberParserRuleCall_5()); }
	ruleNumber
{ after(grammarAccess.getUnparsedExpressionAccess().getNumberParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnparsedCommand__CommandAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnparsedCommandAccess().getCommandIDTerminalRuleCall_1_0_0()); }
	RULE_ID
{ after(grammarAccess.getUnparsedCommandAccess().getCommandIDTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getUnparsedCommandAccess().getCommandSpecialCommandNameParserRuleCall_1_0_1()); }
	ruleSpecialCommandName
{ after(grammarAccess.getUnparsedCommandAccess().getCommandSpecialCommandNameParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Text__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextAccess().getValueSchemeTextValueSegmentParserRuleCall_0_0()); }
	ruleSchemeTextValueSegment
{ after(grammarAccess.getTextAccess().getValueSchemeTextValueSegmentParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueLeftParenthesisKeyword_0_1()); }

	KEYWORD_5 

{ after(grammarAccess.getTextAccess().getValueLeftParenthesisKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueRightParenthesisKeyword_0_2()); }

	KEYWORD_6 

{ after(grammarAccess.getTextAccess().getValueRightParenthesisKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueApostropheKeyword_0_3()); }

	KEYWORD_4 

{ after(grammarAccess.getTextAccess().getValueApostropheKeyword_0_3()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueCommaKeyword_0_4()); }

	KEYWORD_8 

{ after(grammarAccess.getTextAccess().getValueCommaKeyword_0_4()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueColonKeyword_0_5()); }

	KEYWORD_10 

{ after(grammarAccess.getTextAccess().getValueColonKeyword_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCommand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialCommandAccess().getIncludeParserRuleCall_0()); }
	ruleInclude
{ after(grammarAccess.getSpecialCommandAccess().getIncludeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getVersionParserRuleCall_1()); }
	ruleVersion
{ after(grammarAccess.getSpecialCommandAccess().getVersionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getSourceFileNameParserRuleCall_2()); }
	ruleSourceFileName
{ after(grammarAccess.getSpecialCommandAccess().getSourceFileNameParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getSourceFileLineParserRuleCall_3()); }
	ruleSourceFileLine
{ after(grammarAccess.getSpecialCommandAccess().getSourceFileLineParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getMarkupParserRuleCall_4()); }
	ruleMarkup
{ after(grammarAccess.getSpecialCommandAccess().getMarkupParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getMarkupLinesParserRuleCall_5()); }
	ruleMarkupLines
{ after(grammarAccess.getSpecialCommandAccess().getMarkupLinesParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getBlockCommandParserRuleCall_6()); }
	ruleBlockCommand
{ after(grammarAccess.getSpecialCommandAccess().getBlockCommandParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getOutputDefinitionParserRuleCall_7()); }
	ruleOutputDefinition
{ after(grammarAccess.getSpecialCommandAccess().getOutputDefinitionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getRelativeMusicParserRuleCall_8()); }
	ruleRelativeMusic
{ after(grammarAccess.getSpecialCommandAccess().getRelativeMusicParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getTransposedMusicParserRuleCall_9()); }
	ruleTransposedMusic
{ after(grammarAccess.getSpecialCommandAccess().getTransposedMusicParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getModeChangeParserRuleCall_10()); }
	ruleModeChange
{ after(grammarAccess.getSpecialCommandAccess().getModeChangeParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getMusicWithLyricsParserRuleCall_11()); }
	ruleMusicWithLyrics
{ after(grammarAccess.getSpecialCommandAccess().getMusicWithLyricsParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getNewContextParserRuleCall_12()); }
	ruleNewContext
{ after(grammarAccess.getSpecialCommandAccess().getNewContextParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getContextDefParserRuleCall_13()); }
	ruleContextDef
{ after(grammarAccess.getSpecialCommandAccess().getContextDefParserRuleCall_13()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getOtherParserRuleCall_14()); }
	ruleOther
{ after(grammarAccess.getSpecialCommandAccess().getOtherParserRuleCall_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBody__CommandAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBodyAccess().getCommandSchemeParserRuleCall_1_0_0()); }
	ruleScheme
{ after(grammarAccess.getMarkupBodyAccess().getCommandSchemeParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getMarkupBodyAccess().getCommandUnparsedCommandParserRuleCall_1_0_1()); }
	ruleUnparsedCommand
{ after(grammarAccess.getMarkupBodyAccess().getCommandUnparsedCommandParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__KeywordAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockCommandAccess().getKeywordBookKeyword_1_0_0()); }

	KEYWORD_33 

{ after(grammarAccess.getBlockCommandAccess().getKeywordBookKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getBlockCommandAccess().getKeywordBookpartKeyword_1_0_1()); }

	KEYWORD_68 

{ after(grammarAccess.getBlockCommandAccess().getKeywordBookpartKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getBlockCommandAccess().getKeywordHeaderKeyword_1_0_2()); }

	KEYWORD_53 

{ after(grammarAccess.getBlockCommandAccess().getKeywordHeaderKeyword_1_0_2()); }
)

    |(
{ before(grammarAccess.getBlockCommandAccess().getKeywordScoreKeyword_1_0_3()); }

	KEYWORD_46 

{ after(grammarAccess.getBlockCommandAccess().getKeywordScoreKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDefinition__KeywordAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDefinitionAccess().getKeywordPaperKeyword_1_0_0()); }

	KEYWORD_45 

{ after(grammarAccess.getOutputDefinitionAccess().getKeywordPaperKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getOutputDefinitionAccess().getKeywordMidiKeyword_1_0_1()); }

	KEYWORD_35 

{ after(grammarAccess.getOutputDefinitionAccess().getKeywordMidiKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getOutputDefinitionAccess().getKeywordLayoutKeyword_1_0_2()); }

	KEYWORD_54 

{ after(grammarAccess.getOutputDefinitionAccess().getKeywordLayoutKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOctaveAccess().getUpAssignment_0()); }
(rule__Octave__UpAssignment_0)
{ after(grammarAccess.getOctaveAccess().getUpAssignment_0()); }
)
(
{ before(grammarAccess.getOctaveAccess().getUpAssignment_0()); }
(rule__Octave__UpAssignment_0)*
{ after(grammarAccess.getOctaveAccess().getUpAssignment_0()); }
)
)

    |(
(
{ before(grammarAccess.getOctaveAccess().getDownAssignment_1()); }
(rule__Octave__DownAssignment_1)
{ after(grammarAccess.getOctaveAccess().getDownAssignment_1()); }
)
(
{ before(grammarAccess.getOctaveAccess().getDownAssignment_1()); }
(rule__Octave__DownAssignment_1)*
{ after(grammarAccess.getOctaveAccess().getDownAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModeChange__KeywordAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeChangeAccess().getKeywordChordmodeKeyword_1_0_0()); }

	KEYWORD_77 

{ after(grammarAccess.getModeChangeAccess().getKeywordChordmodeKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getModeChangeAccess().getKeywordDrummodeKeyword_1_0_1()); }

	KEYWORD_70 

{ after(grammarAccess.getModeChangeAccess().getKeywordDrummodeKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getModeChangeAccess().getKeywordFiguremodeKeyword_1_0_2()); }

	KEYWORD_81 

{ after(grammarAccess.getModeChangeAccess().getKeywordFiguremodeKeyword_1_0_2()); }
)

    |(
{ before(grammarAccess.getModeChangeAccess().getKeywordLyricmodeKeyword_1_0_3()); }

	KEYWORD_78 

{ after(grammarAccess.getModeChangeAccess().getKeywordLyricmodeKeyword_1_0_3()); }
)

    |(
{ before(grammarAccess.getModeChangeAccess().getKeywordNotemodeKeyword_1_0_4()); }

	KEYWORD_72 

{ after(grammarAccess.getModeChangeAccess().getKeywordNotemodeKeyword_1_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MusicWithLyrics__IdAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicWithLyricsAccess().getIdIDTerminalRuleCall_2_0_0()); }
	RULE_ID
{ after(grammarAccess.getMusicWithLyricsAccess().getIdIDTerminalRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getMusicWithLyricsAccess().getIdSTRINGTerminalRuleCall_2_0_1()); }
	RULE_STRING
{ after(grammarAccess.getMusicWithLyricsAccess().getIdSTRINGTerminalRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__KeywordAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getKeywordNewKeyword_1_0_0()); }

	KEYWORD_31 

{ after(grammarAccess.getNewContextAccess().getKeywordNewKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getNewContextAccess().getKeywordContextKeyword_1_0_1()); }

	KEYWORD_62 

{ after(grammarAccess.getNewContextAccess().getKeywordContextKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__IdAlternatives_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getIdIDTerminalRuleCall_3_1_0_0()); }
	RULE_ID
{ after(grammarAccess.getNewContextAccess().getIdIDTerminalRuleCall_3_1_0_0()); }
)

    |(
{ before(grammarAccess.getNewContextAccess().getIdSTRINGTerminalRuleCall_3_1_0_1()); }
	RULE_STRING
{ after(grammarAccess.getNewContextAccess().getIdSTRINGTerminalRuleCall_3_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Other__KeywordAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherAccess().getKeywordSpecialCharacterParserRuleCall_1_0_0()); }
	ruleSpecialCharacter
{ after(grammarAccess.getOtherAccess().getKeywordSpecialCharacterParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getOtherAccess().getKeywordLeftParenthesisKeyword_1_0_1()); }

	KEYWORD_5 

{ after(grammarAccess.getOtherAccess().getKeywordLeftParenthesisKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getOtherAccess().getKeywordRightParenthesisKeyword_1_0_2()); }

	KEYWORD_6 

{ after(grammarAccess.getOtherAccess().getKeywordRightParenthesisKeyword_1_0_2()); }
)

    |(
{ before(grammarAccess.getOtherAccess().getKeywordOtherNameParserRuleCall_1_0_3()); }
	ruleOtherName
{ after(grammarAccess.getOtherAccess().getKeywordOtherNameParserRuleCall_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OtherName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherNameAccess().getAcceptsKeyword_0()); }

	KEYWORD_61 

{ after(grammarAccess.getOtherNameAccess().getAcceptsKeyword_0()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getAddlyricsKeyword_1()); }

	KEYWORD_76 

{ after(grammarAccess.getOtherNameAccess().getAddlyricsKeyword_1()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getAliasKeyword_2()); }

	KEYWORD_43 

{ after(grammarAccess.getOtherNameAccess().getAliasKeyword_2()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getAlternativeKeyword_3()); }

	KEYWORD_83 

{ after(grammarAccess.getOtherNameAccess().getAlternativeKeyword_3()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getChangeKeyword_4()); }

	KEYWORD_50 

{ after(grammarAccess.getOtherNameAccess().getChangeKeyword_4()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getChordsKeyword_5()); }

	KEYWORD_51 

{ after(grammarAccess.getOtherNameAccess().getChordsKeyword_5()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getConsistsKeyword_6()); }

	KEYWORD_69 

{ after(grammarAccess.getOtherNameAccess().getConsistsKeyword_6()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getDefaultKeyword_7()); }

	KEYWORD_63 

{ after(grammarAccess.getOtherNameAccess().getDefaultKeyword_7()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getDefaultchildKeyword_8()); }

	KEYWORD_86 

{ after(grammarAccess.getOtherNameAccess().getDefaultchildKeyword_8()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getDeniesKeyword_9()); }

	KEYWORD_52 

{ after(grammarAccess.getOtherNameAccess().getDeniesKeyword_9()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getDescriptionKeyword_10()); }

	KEYWORD_84 

{ after(grammarAccess.getOtherNameAccess().getDescriptionKeyword_10()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getDrumsKeyword_11()); }

	KEYWORD_44 

{ after(grammarAccess.getOtherNameAccess().getDrumsKeyword_11()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getFiguresKeyword_12()); }

	KEYWORD_64 

{ after(grammarAccess.getOtherNameAccess().getFiguresKeyword_12()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getGrobdescriptionsKeyword_13()); }

	KEYWORD_90 

{ after(grammarAccess.getOtherNameAccess().getGrobdescriptionsKeyword_13()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getKeyKeyword_14()); }

	KEYWORD_30 

{ after(grammarAccess.getOtherNameAccess().getKeyKeyword_14()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getLyricsKeyword_15()); }

	KEYWORD_55 

{ after(grammarAccess.getOtherNameAccess().getLyricsKeyword_15()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getMaininputKeyword_16()); }

	KEYWORD_79 

{ after(grammarAccess.getOtherNameAccess().getMaininputKeyword_16()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getMarkKeyword_17()); }

	KEYWORD_34 

{ after(grammarAccess.getOtherNameAccess().getMarkKeyword_17()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getNameKeyword_18()); }

	KEYWORD_36 

{ after(grammarAccess.getOtherNameAccess().getNameKeyword_18()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getObjectidKeyword_19()); }

	KEYWORD_73 

{ after(grammarAccess.getOtherNameAccess().getObjectidKeyword_19()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getOctaveKeyword_20()); }

	KEYWORD_57 

{ after(grammarAccess.getOtherNameAccess().getOctaveKeyword_20()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getOnceKeyword_21()); }

	KEYWORD_37 

{ after(grammarAccess.getOtherNameAccess().getOnceKeyword_21()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getOverrideKeyword_22()); }

	KEYWORD_74 

{ after(grammarAccess.getOtherNameAccess().getOverrideKeyword_22()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getPartialKeyword_23()); }

	KEYWORD_66 

{ after(grammarAccess.getOtherNameAccess().getPartialKeyword_23()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getRemoveKeyword_24()); }

	KEYWORD_58 

{ after(grammarAccess.getOtherNameAccess().getRemoveKeyword_24()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getRepeatKeyword_25()); }

	KEYWORD_59 

{ after(grammarAccess.getOtherNameAccess().getRepeatKeyword_25()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getRestKeyword_26()); }

	KEYWORD_38 

{ after(grammarAccess.getOtherNameAccess().getRestKeyword_26()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getRevertKeyword_27()); }

	KEYWORD_60 

{ after(grammarAccess.getOtherNameAccess().getRevertKeyword_27()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getSequentialKeyword_28()); }

	KEYWORD_82 

{ after(grammarAccess.getOtherNameAccess().getSequentialKeyword_28()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getSetKeyword_29()); }

	KEYWORD_32 

{ after(grammarAccess.getOtherNameAccess().getSetKeyword_29()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getSimultaneousKeyword_30()); }

	KEYWORD_87 

{ after(grammarAccess.getOtherNameAccess().getSimultaneousKeyword_30()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getSkipKeyword_31()); }

	KEYWORD_39 

{ after(grammarAccess.getOtherNameAccess().getSkipKeyword_31()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getTempoKeyword_32()); }

	KEYWORD_47 

{ after(grammarAccess.getOtherNameAccess().getTempoKeyword_32()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getTimeKeyword_33()); }

	KEYWORD_40 

{ after(grammarAccess.getOtherNameAccess().getTimeKeyword_33()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getTimesKeyword_34()); }

	KEYWORD_48 

{ after(grammarAccess.getOtherNameAccess().getTimesKeyword_34()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getTypeKeyword_35()); }

	KEYWORD_41 

{ after(grammarAccess.getOtherNameAccess().getTypeKeyword_35()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getUnsetKeyword_36()); }

	KEYWORD_49 

{ after(grammarAccess.getOtherNameAccess().getUnsetKeyword_36()); }
)

    |(
{ before(grammarAccess.getOtherNameAccess().getWithKeyword_37()); }

	KEYWORD_42 

{ after(grammarAccess.getOtherNameAccess().getWithKeyword_37()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCommandName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialCommandNameAccess().getIncludeKeyword_0()); }

	KEYWORD_65 

{ after(grammarAccess.getSpecialCommandNameAccess().getIncludeKeyword_0()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getVersionKeyword_1()); }

	KEYWORD_67 

{ after(grammarAccess.getSpecialCommandNameAccess().getVersionKeyword_1()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getSourcefilenameKeyword_2()); }

	KEYWORD_89 

{ after(grammarAccess.getSpecialCommandNameAccess().getSourcefilenameKeyword_2()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getSourcefilelineKeyword_3()); }

	KEYWORD_88 

{ after(grammarAccess.getSpecialCommandNameAccess().getSourcefilelineKeyword_3()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getMarkupKeyword_4()); }

	KEYWORD_56 

{ after(grammarAccess.getSpecialCommandNameAccess().getMarkupKeyword_4()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getMarkuplinesKeyword_5()); }

	KEYWORD_85 

{ after(grammarAccess.getSpecialCommandNameAccess().getMarkuplinesKeyword_5()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getBookKeyword_6()); }

	KEYWORD_33 

{ after(grammarAccess.getSpecialCommandNameAccess().getBookKeyword_6()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getBookpartKeyword_7()); }

	KEYWORD_68 

{ after(grammarAccess.getSpecialCommandNameAccess().getBookpartKeyword_7()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getContextKeyword_8()); }

	KEYWORD_62 

{ after(grammarAccess.getSpecialCommandNameAccess().getContextKeyword_8()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getHeaderKeyword_9()); }

	KEYWORD_53 

{ after(grammarAccess.getSpecialCommandNameAccess().getHeaderKeyword_9()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getScoreKeyword_10()); }

	KEYWORD_46 

{ after(grammarAccess.getSpecialCommandNameAccess().getScoreKeyword_10()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getPaperKeyword_11()); }

	KEYWORD_45 

{ after(grammarAccess.getSpecialCommandNameAccess().getPaperKeyword_11()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getMidiKeyword_12()); }

	KEYWORD_35 

{ after(grammarAccess.getSpecialCommandNameAccess().getMidiKeyword_12()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getLayoutKeyword_13()); }

	KEYWORD_54 

{ after(grammarAccess.getSpecialCommandNameAccess().getLayoutKeyword_13()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getRelativeKeyword_14()); }

	KEYWORD_75 

{ after(grammarAccess.getSpecialCommandNameAccess().getRelativeKeyword_14()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getTransposeKeyword_15()); }

	KEYWORD_80 

{ after(grammarAccess.getSpecialCommandNameAccess().getTransposeKeyword_15()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getChordmodeKeyword_16()); }

	KEYWORD_77 

{ after(grammarAccess.getSpecialCommandNameAccess().getChordmodeKeyword_16()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getDrummodeKeyword_17()); }

	KEYWORD_70 

{ after(grammarAccess.getSpecialCommandNameAccess().getDrummodeKeyword_17()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getFiguremodeKeyword_18()); }

	KEYWORD_81 

{ after(grammarAccess.getSpecialCommandNameAccess().getFiguremodeKeyword_18()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getLyricmodeKeyword_19()); }

	KEYWORD_78 

{ after(grammarAccess.getSpecialCommandNameAccess().getLyricmodeKeyword_19()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getNotemodeKeyword_20()); }

	KEYWORD_72 

{ after(grammarAccess.getSpecialCommandNameAccess().getNotemodeKeyword_20()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getLyricstoKeyword_21()); }

	KEYWORD_71 

{ after(grammarAccess.getSpecialCommandNameAccess().getLyricstoKeyword_21()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getNewKeyword_22()); }

	KEYWORD_31 

{ after(grammarAccess.getSpecialCommandNameAccess().getNewKeyword_22()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getWithKeyword_23()); }

	KEYWORD_42 

{ after(grammarAccess.getSpecialCommandNameAccess().getWithKeyword_23()); }
)

    |(
{ before(grammarAccess.getSpecialCommandNameAccess().getOtherNameParserRuleCall_24()); }
	ruleOtherName
{ after(grammarAccess.getSpecialCommandNameAccess().getOtherNameParserRuleCall_24()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getNumberSignKeyword_0_0()); }

	KEYWORD_2 

{ after(grammarAccess.getSchemeAccess().getNumberSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getSchemeAccess().getDollarSignKeyword_0_1()); }

	KEYWORD_3 

{ after(grammarAccess.getSchemeAccess().getDollarSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__QuotationsAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotationsApostropheKeyword_1_0_0()); }

	KEYWORD_4 

{ after(grammarAccess.getSchemeExpressionAccess().getQuotationsApostropheKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotationsGraveAccentKeyword_1_0_1()); }

	KEYWORD_19 

{ after(grammarAccess.getSchemeExpressionAccess().getQuotationsGraveAccentKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotationsCommaKeyword_1_0_2()); }

	KEYWORD_8 

{ after(grammarAccess.getSchemeExpressionAccess().getQuotationsCommaKeyword_1_0_2()); }
)

    |(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotationsCommercialAtKeyword_1_0_3()); }

	KEYWORD_15 

{ after(grammarAccess.getSchemeExpressionAccess().getQuotationsCommercialAtKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeValueAccess().getSchemeBooleanParserRuleCall_0()); }
	ruleSchemeBoolean
{ after(grammarAccess.getSchemeValueAccess().getSchemeBooleanParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeListParserRuleCall_1()); }
	ruleSchemeList
{ after(grammarAccess.getSchemeValueAccess().getSchemeListParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeBlockParserRuleCall_2()); }
	ruleSchemeBlock
{ after(grammarAccess.getSchemeValueAccess().getSchemeBlockParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeCharacterParserRuleCall_3()); }
	ruleSchemeCharacter
{ after(grammarAccess.getSchemeValueAccess().getSchemeCharacterParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeTextParserRuleCall_4()); }
	ruleSchemeText
{ after(grammarAccess.getSchemeValueAccess().getSchemeTextParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeNumberParserRuleCall_5()); }
	ruleSchemeNumber
{ after(grammarAccess.getSchemeValueAccess().getSchemeNumberParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeMarkupCommandParserRuleCall_6()); }
	ruleSchemeMarkupCommand
{ after(grammarAccess.getSchemeValueAccess().getSchemeMarkupCommandParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeCharacter__ValueAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeCharacterAccess().getValueIDTerminalRuleCall_1_0_0()); }
	RULE_ID
{ after(grammarAccess.getSchemeCharacterAccess().getValueIDTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getSchemeCharacterAccess().getValueSpecialCharacterParserRuleCall_1_0_1()); }
	ruleSpecialCharacter
{ after(grammarAccess.getSchemeCharacterAccess().getValueSpecialCharacterParserRuleCall_1_0_1()); }
)

    |(
{ before(grammarAccess.getSchemeCharacterAccess().getValueANY_OTHERTerminalRuleCall_1_0_2()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getSchemeCharacterAccess().getValueANY_OTHERTerminalRuleCall_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeTextValueSegment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextValueSegmentAccess().getReverseSolidusReverseSolidusKeyword_0()); }

	KEYWORD_29 

{ after(grammarAccess.getSchemeTextValueSegmentAccess().getReverseSolidusReverseSolidusKeyword_0()); }
)

    |(
{ before(grammarAccess.getSchemeTextValueSegmentAccess().getEqualsSignKeyword_1()); }

	KEYWORD_12 

{ after(grammarAccess.getSchemeTextValueSegmentAccess().getEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getSchemeTextValueSegmentAccess().getHyphenMinusKeyword_2()); }

	KEYWORD_9 

{ after(grammarAccess.getSchemeTextValueSegmentAccess().getHyphenMinusKeyword_2()); }
)

    |(
{ before(grammarAccess.getSchemeTextValueSegmentAccess().getSpecialCharacterParserRuleCall_3()); }
	ruleSpecialCharacter
{ after(grammarAccess.getSchemeTextValueSegmentAccess().getSpecialCharacterParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSchemeTextValueSegmentAccess().getSpecialCommandNameParserRuleCall_4()); }
	ruleSpecialCommandName
{ after(grammarAccess.getSchemeTextValueSegmentAccess().getSpecialCommandNameParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSchemeTextValueSegmentAccess().getSchemeIdentifierParserRuleCall_5()); }
	ruleSchemeIdentifier
{ after(grammarAccess.getSchemeTextValueSegmentAccess().getSchemeIdentifierParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getSchemeTextValueSegmentAccess().getSTRINGTerminalRuleCall_6()); }
	RULE_STRING
{ after(grammarAccess.getSchemeTextValueSegmentAccess().getSTRINGTerminalRuleCall_6()); }
)

    |(
{ before(grammarAccess.getSchemeTextValueSegmentAccess().getINTTerminalRuleCall_7()); }
	RULE_INT
{ after(grammarAccess.getSchemeTextValueSegmentAccess().getINTTerminalRuleCall_7()); }
)

    |(
{ before(grammarAccess.getSchemeTextValueSegmentAccess().getANY_OTHERTerminalRuleCall_8()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getSchemeTextValueSegmentAccess().getANY_OTHERTerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeMarkupCommand__CommandAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeMarkupCommandAccess().getCommandIDTerminalRuleCall_1_0_0()); }
	RULE_ID
{ after(grammarAccess.getSchemeMarkupCommandAccess().getCommandIDTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getSchemeMarkupCommandAccess().getCommandSpecialCommandNameParserRuleCall_1_0_1()); }
	ruleSpecialCommandName
{ after(grammarAccess.getSchemeMarkupCommandAccess().getCommandSpecialCommandNameParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameAssignment_0()); }
(rule__Assignment__NameAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }

	KEYWORD_12 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
(rule__Assignment__ValueAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyAssignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssignment__Group__0__Impl
	rule__PropertyAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getIdAssignment_0()); }
(rule__PropertyAssignment__IdAssignment_0)
{ after(grammarAccess.getPropertyAssignmentAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssignment__Group__1__Impl
	rule__PropertyAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getEqualsSignKeyword_1()); }

	KEYWORD_12 

{ after(grammarAccess.getPropertyAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getValueAssignment_2()); }
(rule__PropertyAssignment__ValueAssignment_2)
{ after(grammarAccess.getPropertyAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__0__Impl
	rule__SimpleBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getSimpleBlockAction_0()); }
(

)
{ after(grammarAccess.getSimpleBlockAccess().getSimpleBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__1__Impl
	rule__SimpleBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getLeftCurlyBracketKeyword_1()); }

	KEYWORD_20 

{ after(grammarAccess.getSimpleBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__2__Impl
	rule__SimpleBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getExpressionsAssignment_2()); }
(rule__SimpleBlock__ExpressionsAssignment_2)*
{ after(grammarAccess.getSimpleBlockAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getRightCurlyBracketKeyword_3()); }

	KEYWORD_21 

{ after(grammarAccess.getSimpleBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SimultaneousBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__0__Impl
	rule__SimultaneousBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getSimultaneousBlockAction_0()); }
(

)
{ after(grammarAccess.getSimultaneousBlockAccess().getSimultaneousBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__1__Impl
	rule__SimultaneousBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getLessThanSignLessThanSignKeyword_1()); }

	KEYWORD_27 

{ after(grammarAccess.getSimultaneousBlockAccess().getLessThanSignLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__2__Impl
	rule__SimultaneousBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getExpressionsAssignment_2()); }
(rule__SimultaneousBlock__ExpressionsAssignment_2)*
{ after(grammarAccess.getSimultaneousBlockAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getGreaterThanSignGreaterThanSignKeyword_3()); }

	KEYWORD_28 

{ after(grammarAccess.getSimultaneousBlockAccess().getGreaterThanSignGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnparsedBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnparsedBlock__Group__0__Impl
	rule__UnparsedBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnparsedBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnparsedBlockAccess().getUnparsedBlockAction_0()); }
(

)
{ after(grammarAccess.getUnparsedBlockAccess().getUnparsedBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnparsedBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnparsedBlock__Group__1__Impl
	rule__UnparsedBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnparsedBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnparsedBlockAccess().getLeftCurlyBracketKeyword_1()); }

	KEYWORD_20 

{ after(grammarAccess.getUnparsedBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnparsedBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnparsedBlock__Group__2__Impl
	rule__UnparsedBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnparsedBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnparsedBlockAccess().getExpressionsAssignment_2()); }
(rule__UnparsedBlock__ExpressionsAssignment_2)*
{ after(grammarAccess.getUnparsedBlockAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnparsedBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnparsedBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnparsedBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnparsedBlockAccess().getRightCurlyBracketKeyword_3()); }

	KEYWORD_21 

{ after(grammarAccess.getUnparsedBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnparsedCommand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnparsedCommand__Group__0__Impl
	rule__UnparsedCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnparsedCommand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnparsedCommandAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getUnparsedCommandAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnparsedCommand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnparsedCommand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnparsedCommand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnparsedCommandAccess().getCommandAssignment_1()); }
(rule__UnparsedCommand__CommandAssignment_1)
{ after(grammarAccess.getUnparsedCommandAccess().getCommandAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Reference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getReferenceAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getAssignmentAssignment_1()); }
(rule__Reference__AssignmentAssignment_1)
{ after(grammarAccess.getReferenceAccess().getAssignmentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Include__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getIncludeAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__1__Impl
	rule__Include__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getKeywordAssignment_1()); }
(rule__Include__KeywordAssignment_1)
{ after(grammarAccess.getIncludeAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getImportURIAssignment_2()); }
(rule__Include__ImportURIAssignment_2)
{ after(grammarAccess.getIncludeAccess().getImportURIAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Version__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Version__Group__0__Impl
	rule__Version__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getVersionAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Version__Group__1__Impl
	rule__Version__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getKeywordAssignment_1()); }
(rule__Version__KeywordAssignment_1)
{ after(grammarAccess.getVersionAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Version__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getVersionAssignment_2()); }
(rule__Version__VersionAssignment_2)
{ after(grammarAccess.getVersionAccess().getVersionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SourceFileName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceFileName__Group__0__Impl
	rule__SourceFileName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileNameAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getSourceFileNameAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceFileName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceFileName__Group__1__Impl
	rule__SourceFileName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileNameAccess().getKeywordAssignment_1()); }
(rule__SourceFileName__KeywordAssignment_1)
{ after(grammarAccess.getSourceFileNameAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceFileName__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceFileName__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileName__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileNameAccess().getFilenameAssignment_2()); }
(rule__SourceFileName__FilenameAssignment_2)
{ after(grammarAccess.getSourceFileNameAccess().getFilenameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SourceFileLine__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceFileLine__Group__0__Impl
	rule__SourceFileLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileLine__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileLineAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getSourceFileLineAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceFileLine__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceFileLine__Group__1__Impl
	rule__SourceFileLine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileLine__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileLineAccess().getKeywordAssignment_1()); }
(rule__SourceFileLine__KeywordAssignment_1)
{ after(grammarAccess.getSourceFileLineAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceFileLine__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceFileLine__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileLine__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileLineAccess().getLineAssignment_2()); }
(rule__SourceFileLine__LineAssignment_2)
{ after(grammarAccess.getSourceFileLineAccess().getLineAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Markup__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Markup__Group__0__Impl
	rule__Markup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getMarkupAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Markup__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Markup__Group__1__Impl
	rule__Markup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getKeywordAssignment_1()); }
(rule__Markup__KeywordAssignment_1)
{ after(grammarAccess.getMarkupAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Markup__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Markup__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getBodyAssignment_2()); }
(rule__Markup__BodyAssignment_2)
{ after(grammarAccess.getMarkupAccess().getBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MarkupLines__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupLines__Group__0__Impl
	rule__MarkupLines__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupLines__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupLinesAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getMarkupLinesAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupLines__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupLines__Group__1__Impl
	rule__MarkupLines__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupLines__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupLinesAccess().getKeywordAssignment_1()); }
(rule__MarkupLines__KeywordAssignment_1)
{ after(grammarAccess.getMarkupLinesAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupLines__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupLines__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupLines__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupLinesAccess().getBodyAssignment_2()); }
(rule__MarkupLines__BodyAssignment_2)
{ after(grammarAccess.getMarkupLinesAccess().getBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MarkupBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupBody__Group__0__Impl
	rule__MarkupBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBody__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBodyAccess().getMarkupBodyAction_0()); }
(

)
{ after(grammarAccess.getMarkupBodyAccess().getMarkupBodyAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupBody__Group__1__Impl
	rule__MarkupBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBody__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBodyAccess().getCommandAssignment_1()); }
(rule__MarkupBody__CommandAssignment_1)*
{ after(grammarAccess.getMarkupBodyAccess().getCommandAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupBody__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBody__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBodyAccess().getBlockAssignment_2()); }
(rule__MarkupBody__BlockAssignment_2)?
{ after(grammarAccess.getMarkupBodyAccess().getBlockAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BlockCommand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockCommand__Group__0__Impl
	rule__BlockCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockCommandAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getBlockCommandAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockCommand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockCommand__Group__1__Impl
	rule__BlockCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockCommandAccess().getKeywordAssignment_1()); }
(rule__BlockCommand__KeywordAssignment_1)
{ after(grammarAccess.getBlockCommandAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockCommand__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockCommand__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockCommandAccess().getBlockAssignment_2()); }
(rule__BlockCommand__BlockAssignment_2)
{ after(grammarAccess.getBlockCommandAccess().getBlockAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OutputDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputDefinition__Group__0__Impl
	rule__OutputDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDefinitionAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getOutputDefinitionAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputDefinition__Group__1__Impl
	rule__OutputDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDefinitionAccess().getKeywordAssignment_1()); }
(rule__OutputDefinition__KeywordAssignment_1)
{ after(grammarAccess.getOutputDefinitionAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDefinitionAccess().getBlockAssignment_2()); }
(rule__OutputDefinition__BlockAssignment_2)
{ after(grammarAccess.getOutputDefinitionAccess().getBlockAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelativeMusic__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativeMusic__Group__0__Impl
	rule__RelativeMusic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getRelativeMusicAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeMusic__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativeMusic__Group__1__Impl
	rule__RelativeMusic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getKeywordAssignment_1()); }
(rule__RelativeMusic__KeywordAssignment_1)
{ after(grammarAccess.getRelativeMusicAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeMusic__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativeMusic__Group__2__Impl
	rule__RelativeMusic__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getPitchAssignment_2()); }
(rule__RelativeMusic__PitchAssignment_2)?
{ after(grammarAccess.getRelativeMusicAccess().getPitchAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeMusic__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativeMusic__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getMusicAssignment_3()); }
(rule__RelativeMusic__MusicAssignment_3)
{ after(grammarAccess.getRelativeMusicAccess().getMusicAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Pitch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pitch__Group__0__Impl
	rule__Pitch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getBaseAssignment_0()); }
(rule__Pitch__BaseAssignment_0)
{ after(grammarAccess.getPitchAccess().getBaseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pitch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pitch__Group__1__Impl
	rule__Pitch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getOctaveCheckAssignment_1()); }
(rule__Pitch__OctaveCheckAssignment_1)?
{ after(grammarAccess.getPitchAccess().getOctaveCheckAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pitch__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pitch__Group__2__Impl
	rule__Pitch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getOctaveShiftAssignment_2()); }
(rule__Pitch__OctaveShiftAssignment_2)?
{ after(grammarAccess.getPitchAccess().getOctaveShiftAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pitch__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pitch__Group__3__Impl
	rule__Pitch__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getReminderAccidentalAssignment_3()); }
(rule__Pitch__ReminderAccidentalAssignment_3)?
{ after(grammarAccess.getPitchAccess().getReminderAccidentalAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pitch__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pitch__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getCautionaryAccidentalAssignment_4()); }
(rule__Pitch__CautionaryAccidentalAssignment_4)?
{ after(grammarAccess.getPitchAccess().getCautionaryAccidentalAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TransposedMusic__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransposedMusic__Group__0__Impl
	rule__TransposedMusic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransposedMusic__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransposedMusicAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getTransposedMusicAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransposedMusic__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransposedMusic__Group__1__Impl
	rule__TransposedMusic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TransposedMusic__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransposedMusicAccess().getKeywordAssignment_1()); }
(rule__TransposedMusic__KeywordAssignment_1)
{ after(grammarAccess.getTransposedMusicAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransposedMusic__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransposedMusic__Group__2__Impl
	rule__TransposedMusic__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TransposedMusic__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransposedMusicAccess().getSourceAssignment_2()); }
(rule__TransposedMusic__SourceAssignment_2)
{ after(grammarAccess.getTransposedMusicAccess().getSourceAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransposedMusic__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransposedMusic__Group__3__Impl
	rule__TransposedMusic__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TransposedMusic__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransposedMusicAccess().getTargetAssignment_3()); }
(rule__TransposedMusic__TargetAssignment_3)
{ after(grammarAccess.getTransposedMusicAccess().getTargetAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransposedMusic__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransposedMusic__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransposedMusic__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransposedMusicAccess().getMusicAssignment_4()); }
(rule__TransposedMusic__MusicAssignment_4)
{ after(grammarAccess.getTransposedMusicAccess().getMusicAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ModeChange__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModeChange__Group__0__Impl
	rule__ModeChange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModeChange__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeChangeAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getModeChangeAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModeChange__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModeChange__Group__1__Impl
	rule__ModeChange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModeChange__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeChangeAccess().getKeywordAssignment_1()); }
(rule__ModeChange__KeywordAssignment_1)
{ after(grammarAccess.getModeChangeAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModeChange__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModeChange__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModeChange__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeChangeAccess().getMusicAssignment_2()); }
(rule__ModeChange__MusicAssignment_2)
{ after(grammarAccess.getModeChangeAccess().getMusicAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MusicWithLyrics__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MusicWithLyrics__Group__0__Impl
	rule__MusicWithLyrics__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MusicWithLyrics__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicWithLyricsAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getMusicWithLyricsAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MusicWithLyrics__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MusicWithLyrics__Group__1__Impl
	rule__MusicWithLyrics__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MusicWithLyrics__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicWithLyricsAccess().getKeywordAssignment_1()); }
(rule__MusicWithLyrics__KeywordAssignment_1)
{ after(grammarAccess.getMusicWithLyricsAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MusicWithLyrics__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MusicWithLyrics__Group__2__Impl
	rule__MusicWithLyrics__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MusicWithLyrics__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicWithLyricsAccess().getIdAssignment_2()); }
(rule__MusicWithLyrics__IdAssignment_2)
{ after(grammarAccess.getMusicWithLyricsAccess().getIdAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MusicWithLyrics__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MusicWithLyrics__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MusicWithLyrics__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicWithLyricsAccess().getLyricsAssignment_3()); }
(rule__MusicWithLyrics__LyricsAssignment_3)
{ after(grammarAccess.getMusicWithLyricsAccess().getLyricsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NewContext__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__0__Impl
	rule__NewContext__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getNewContextAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__1__Impl
	rule__NewContext__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getKeywordAssignment_1()); }
(rule__NewContext__KeywordAssignment_1)
{ after(grammarAccess.getNewContextAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__2__Impl
	rule__NewContext__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getContextAssignment_2()); }
(rule__NewContext__ContextAssignment_2)
{ after(grammarAccess.getNewContextAccess().getContextAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__3__Impl
	rule__NewContext__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getGroup_3()); }
(rule__NewContext__Group_3__0)?
{ after(grammarAccess.getNewContextAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__4__Impl
	rule__NewContext__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getModificationAssignment_4()); }
(rule__NewContext__ModificationAssignment_4)?
{ after(grammarAccess.getNewContextAccess().getModificationAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getMusicAssignment_5()); }
(rule__NewContext__MusicAssignment_5)
{ after(grammarAccess.getNewContextAccess().getMusicAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__NewContext__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group_3__0__Impl
	rule__NewContext__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getEqualsSignKeyword_3_0()); }

	KEYWORD_12 

{ after(grammarAccess.getNewContextAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getIdAssignment_3_1()); }
(rule__NewContext__IdAssignment_3_1)
{ after(grammarAccess.getNewContextAccess().getIdAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContextModification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextModification__Group__0__Impl
	rule__ContextModification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModificationAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getContextModificationAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextModification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextModification__Group__1__Impl
	rule__ContextModification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModificationAccess().getWithKeyword_1()); }

	KEYWORD_42 

{ after(grammarAccess.getContextModificationAccess().getWithKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextModification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextModification__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModificationAccess().getBlockAssignment_2()); }
(rule__ContextModification__BlockAssignment_2)
{ after(grammarAccess.getContextModificationAccess().getBlockAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ContextDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDef__Group__0__Impl
	rule__ContextDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getContextDefAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDef__Group__1__Impl
	rule__ContextDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefAccess().getKeywordAssignment_1()); }
(rule__ContextDef__KeywordAssignment_1)
{ after(grammarAccess.getContextDefAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefAccess().getBlockAssignment_2()); }
(rule__ContextDef__BlockAssignment_2)
{ after(grammarAccess.getContextDefAccess().getBlockAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Other__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Other__Group__0__Impl
	rule__Other__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Other__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_17 

{ after(grammarAccess.getOtherAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Other__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Other__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Other__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherAccess().getKeywordAssignment_1()); }
(rule__Other__KeywordAssignment_1)
{ after(grammarAccess.getOtherAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Scheme__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scheme__Group__0__Impl
	rule__Scheme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getAlternatives_0()); }
(rule__Scheme__Alternatives_0)
{ after(grammarAccess.getSchemeAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scheme__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scheme__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getValueAssignment_1()); }
(rule__Scheme__ValueAssignment_1)
{ after(grammarAccess.getSchemeAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeExpression__Group__0__Impl
	rule__SchemeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getReferenceAssignment_0()); }
(rule__SchemeExpression__ReferenceAssignment_0)?
{ after(grammarAccess.getSchemeExpressionAccess().getReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeExpression__Group__1__Impl
	rule__SchemeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotationsAssignment_1()); }
(rule__SchemeExpression__QuotationsAssignment_1)*
{ after(grammarAccess.getSchemeExpressionAccess().getQuotationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getValueAssignment_2()); }
(rule__SchemeExpression__ValueAssignment_2)
{ after(grammarAccess.getSchemeExpressionAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SchemeBooleanValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBooleanValue__Group__0__Impl
	rule__SchemeBooleanValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBooleanValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBooleanValueAccess().getNumberSignKeyword_0()); }

	KEYWORD_2 

{ after(grammarAccess.getSchemeBooleanValueAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeBooleanValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBooleanValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBooleanValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBooleanValueAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getSchemeBooleanValueAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__0__Impl
	rule__SchemeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getSchemeListAction_0()); }
(

)
{ after(grammarAccess.getSchemeListAccess().getSchemeListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__1__Impl
	rule__SchemeList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getVectorAssignment_1()); }
(rule__SchemeList__VectorAssignment_1)?
{ after(grammarAccess.getSchemeListAccess().getVectorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__2__Impl
	rule__SchemeList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getLeftParenthesisKeyword_2()); }

	KEYWORD_5 

{ after(grammarAccess.getSchemeListAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__3__Impl
	rule__SchemeList__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getExpressionsAssignment_3()); }
(rule__SchemeList__ExpressionsAssignment_3)*
{ after(grammarAccess.getSchemeListAccess().getExpressionsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getRightParenthesisKeyword_4()); }

	KEYWORD_6 

{ after(grammarAccess.getSchemeListAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SchemeBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__0__Impl
	rule__SchemeBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getNumberSignLeftCurlyBracketKeyword_0()); }

	KEYWORD_25 

{ after(grammarAccess.getSchemeBlockAccess().getNumberSignLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__1__Impl
	rule__SchemeBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSchemeBlockAccess().getElementsAssignment_1()); }
(rule__SchemeBlock__ElementsAssignment_1)
{ after(grammarAccess.getSchemeBlockAccess().getElementsAssignment_1()); }
)
(
{ before(grammarAccess.getSchemeBlockAccess().getElementsAssignment_1()); }
(rule__SchemeBlock__ElementsAssignment_1)*
{ after(grammarAccess.getSchemeBlockAccess().getElementsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getNumberSignRightCurlyBracketKeyword_2()); }

	KEYWORD_26 

{ after(grammarAccess.getSchemeBlockAccess().getNumberSignRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SchemeCharacter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeCharacter__Group__0__Impl
	rule__SchemeCharacter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeCharacter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeCharacterAccess().getNumberSignReverseSolidusKeyword_0()); }

	KEYWORD_24 

{ after(grammarAccess.getSchemeCharacterAccess().getNumberSignReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeCharacter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeCharacter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeCharacter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeCharacterAccess().getValueAssignment_1()); }
(rule__SchemeCharacter__ValueAssignment_1)
{ after(grammarAccess.getSchemeCharacterAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeTextValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeTextValue__Group__0__Impl
	rule__SchemeTextValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeTextValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextValueAccess().getSchemeTextValueSegmentParserRuleCall_0()); }
	ruleSchemeTextValueSegment
{ after(grammarAccess.getSchemeTextValueAccess().getSchemeTextValueSegmentParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeTextValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeTextValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeTextValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextValueAccess().getGroup_1()); }
(rule__SchemeTextValue__Group_1__0)*
{ after(grammarAccess.getSchemeTextValueAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeTextValue__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeTextValue__Group_1__0__Impl
	rule__SchemeTextValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeTextValue__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextValueAccess().getColonKeyword_1_0()); }

	KEYWORD_10 

{ after(grammarAccess.getSchemeTextValueAccess().getColonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeTextValue__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeTextValue__Group_1__1__Impl
	rule__SchemeTextValue__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeTextValue__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextValueAccess().getColonKeyword_1_1()); }
(
	KEYWORD_10 
)?
{ after(grammarAccess.getSchemeTextValueAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeTextValue__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeTextValue__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeTextValue__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextValueAccess().getSchemeTextValueSegmentParserRuleCall_1_2()); }
	ruleSchemeTextValueSegment
{ after(grammarAccess.getSchemeTextValueAccess().getSchemeTextValueSegmentParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SchemeIdentifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeIdentifier__Group__0__Impl
	rule__SchemeIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeIdentifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeIdentifierAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getSchemeIdentifierAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeIdentifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeIdentifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeIdentifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeIdentifierAccess().getGroup_1()); }
(rule__SchemeIdentifier__Group_1__0)*
{ after(grammarAccess.getSchemeIdentifierAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeIdentifier__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeIdentifier__Group_1__0__Impl
	rule__SchemeIdentifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeIdentifier__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeIdentifierAccess().getHyphenMinusKeyword_1_0()); }

	KEYWORD_9 

{ after(grammarAccess.getSchemeIdentifierAccess().getHyphenMinusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeIdentifier__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeIdentifier__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeIdentifier__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeIdentifierAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getSchemeIdentifierAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeNumber__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumber__Group__0__Impl
	rule__SchemeNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getRadixAssignment_0()); }
(rule__SchemeNumber__RadixAssignment_0)?
{ after(grammarAccess.getSchemeNumberAccess().getRadixAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeNumber__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumber__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getValueAssignment_1()); }
(rule__SchemeNumber__ValueAssignment_1)
{ after(grammarAccess.getSchemeNumberAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeNumberRadix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumberRadix__Group__0__Impl
	rule__SchemeNumberRadix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumberRadix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberRadixAccess().getNumberSignKeyword_0()); }

	KEYWORD_2 

{ after(grammarAccess.getSchemeNumberRadixAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeNumberRadix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumberRadix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumberRadix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberRadixAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getSchemeNumberRadixAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeMarkupCommand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeMarkupCommand__Group__0__Impl
	rule__SchemeMarkupCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeMarkupCommand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeMarkupCommandAccess().getNumberSignColonKeyword_0()); }

	KEYWORD_23 

{ after(grammarAccess.getSchemeMarkupCommandAccess().getNumberSignColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeMarkupCommand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeMarkupCommand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeMarkupCommand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeMarkupCommandAccess().getCommandAssignment_1()); }
(rule__SchemeMarkupCommand__CommandAssignment_1)
{ after(grammarAccess.getSchemeMarkupCommandAccess().getCommandAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__LilyPond__ExpressionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLilyPondAccess().getExpressionsToplevelExpressionParserRuleCall_0()); }
	ruleToplevelExpression{ after(grammarAccess.getLilyPondAccess().getExpressionsToplevelExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameAlternatives_0_0()); }
(rule__Assignment__NameAlternatives_0_0)
{ after(grammarAccess.getAssignmentAccess().getNameAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getIdSchemeIdentifierParserRuleCall_0_0()); }
	ruleSchemeIdentifier{ after(grammarAccess.getPropertyAssignmentAccess().getIdSchemeIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getPropertyAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSimpleBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSimultaneousBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnparsedBlock__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnparsedBlockAccess().getExpressionsUnparsedExpressionParserRuleCall_2_0()); }
	ruleUnparsedExpression{ after(grammarAccess.getUnparsedBlockAccess().getExpressionsUnparsedExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnparsedCommand__CommandAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnparsedCommandAccess().getCommandAlternatives_1_0()); }
(rule__UnparsedCommand__CommandAlternatives_1_0)
{ after(grammarAccess.getUnparsedCommandAccess().getCommandAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__AssignmentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getAssignmentAssignmentCrossReference_1_0()); }
(
{ before(grammarAccess.getReferenceAccess().getAssignmentAssignmentIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getReferenceAccess().getAssignmentAssignmentIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getReferenceAccess().getAssignmentAssignmentCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Text__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextAccess().getValueAlternatives_0()); }
(rule__Text__ValueAlternatives_0)
{ after(grammarAccess.getTextAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Include__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getKeywordIncludeKeyword_1_0()); }
(
{ before(grammarAccess.getIncludeAccess().getKeywordIncludeKeyword_1_0()); }

	KEYWORD_65 

{ after(grammarAccess.getIncludeAccess().getKeywordIncludeKeyword_1_0()); }
)

{ after(grammarAccess.getIncludeAccess().getKeywordIncludeKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Include__ImportURIAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Version__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getKeywordVersionKeyword_1_0()); }
(
{ before(grammarAccess.getVersionAccess().getKeywordVersionKeyword_1_0()); }

	KEYWORD_67 

{ after(grammarAccess.getVersionAccess().getKeywordVersionKeyword_1_0()); }
)

{ after(grammarAccess.getVersionAccess().getKeywordVersionKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Version__VersionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getVersionSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getVersionAccess().getVersionSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileName__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileNameAccess().getKeywordSourcefilenameKeyword_1_0()); }
(
{ before(grammarAccess.getSourceFileNameAccess().getKeywordSourcefilenameKeyword_1_0()); }

	KEYWORD_89 

{ after(grammarAccess.getSourceFileNameAccess().getKeywordSourcefilenameKeyword_1_0()); }
)

{ after(grammarAccess.getSourceFileNameAccess().getKeywordSourcefilenameKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileName__FilenameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileNameAccess().getFilenameSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getSourceFileNameAccess().getFilenameSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileLine__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileLineAccess().getKeywordSourcefilelineKeyword_1_0()); }
(
{ before(grammarAccess.getSourceFileLineAccess().getKeywordSourcefilelineKeyword_1_0()); }

	KEYWORD_88 

{ after(grammarAccess.getSourceFileLineAccess().getKeywordSourcefilelineKeyword_1_0()); }
)

{ after(grammarAccess.getSourceFileLineAccess().getKeywordSourcefilelineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileLine__LineAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileLineAccess().getLineINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getSourceFileLineAccess().getLineINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getKeywordMarkupKeyword_1_0()); }
(
{ before(grammarAccess.getMarkupAccess().getKeywordMarkupKeyword_1_0()); }

	KEYWORD_56 

{ after(grammarAccess.getMarkupAccess().getKeywordMarkupKeyword_1_0()); }
)

{ after(grammarAccess.getMarkupAccess().getKeywordMarkupKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getBodyMarkupBodyParserRuleCall_2_0()); }
	ruleMarkupBody{ after(grammarAccess.getMarkupAccess().getBodyMarkupBodyParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupLines__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupLinesAccess().getKeywordMarkuplinesKeyword_1_0()); }
(
{ before(grammarAccess.getMarkupLinesAccess().getKeywordMarkuplinesKeyword_1_0()); }

	KEYWORD_85 

{ after(grammarAccess.getMarkupLinesAccess().getKeywordMarkuplinesKeyword_1_0()); }
)

{ after(grammarAccess.getMarkupLinesAccess().getKeywordMarkuplinesKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupLines__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupLinesAccess().getBodyMarkupBodyParserRuleCall_2_0()); }
	ruleMarkupBody{ after(grammarAccess.getMarkupLinesAccess().getBodyMarkupBodyParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBody__CommandAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBodyAccess().getCommandAlternatives_1_0()); }
(rule__MarkupBody__CommandAlternatives_1_0)
{ after(grammarAccess.getMarkupBodyAccess().getCommandAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBody__BlockAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBodyAccess().getBlockUnparsedBlockParserRuleCall_2_0()); }
	ruleUnparsedBlock{ after(grammarAccess.getMarkupBodyAccess().getBlockUnparsedBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockCommandAccess().getKeywordAlternatives_1_0()); }
(rule__BlockCommand__KeywordAlternatives_1_0)
{ after(grammarAccess.getBlockCommandAccess().getKeywordAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__BlockAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockCommandAccess().getBlockSimpleBlockParserRuleCall_2_0()); }
	ruleSimpleBlock{ after(grammarAccess.getBlockCommandAccess().getBlockSimpleBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDefinition__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDefinitionAccess().getKeywordAlternatives_1_0()); }
(rule__OutputDefinition__KeywordAlternatives_1_0)
{ after(grammarAccess.getOutputDefinitionAccess().getKeywordAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDefinition__BlockAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDefinitionAccess().getBlockUnparsedBlockParserRuleCall_2_0()); }
	ruleUnparsedBlock{ after(grammarAccess.getOutputDefinitionAccess().getBlockUnparsedBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getKeywordRelativeKeyword_1_0()); }
(
{ before(grammarAccess.getRelativeMusicAccess().getKeywordRelativeKeyword_1_0()); }

	KEYWORD_75 

{ after(grammarAccess.getRelativeMusicAccess().getKeywordRelativeKeyword_1_0()); }
)

{ after(grammarAccess.getRelativeMusicAccess().getKeywordRelativeKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__PitchAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getPitchPitchParserRuleCall_2_0()); }
	rulePitch{ after(grammarAccess.getRelativeMusicAccess().getPitchPitchParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__MusicAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getMusicExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getRelativeMusicAccess().getMusicExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__BaseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getBaseIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getPitchAccess().getBaseIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__OctaveCheckAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getOctaveCheckEqualsSignKeyword_1_0()); }
(
{ before(grammarAccess.getPitchAccess().getOctaveCheckEqualsSignKeyword_1_0()); }

	KEYWORD_12 

{ after(grammarAccess.getPitchAccess().getOctaveCheckEqualsSignKeyword_1_0()); }
)

{ after(grammarAccess.getPitchAccess().getOctaveCheckEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__OctaveShiftAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getOctaveShiftOctaveParserRuleCall_2_0()); }
	ruleOctave{ after(grammarAccess.getPitchAccess().getOctaveShiftOctaveParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__ReminderAccidentalAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getReminderAccidentalExclamationMarkKeyword_3_0()); }
(
{ before(grammarAccess.getPitchAccess().getReminderAccidentalExclamationMarkKeyword_3_0()); }

	KEYWORD_1 

{ after(grammarAccess.getPitchAccess().getReminderAccidentalExclamationMarkKeyword_3_0()); }
)

{ after(grammarAccess.getPitchAccess().getReminderAccidentalExclamationMarkKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__CautionaryAccidentalAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getCautionaryAccidentalQuestionMarkKeyword_4_0()); }
(
{ before(grammarAccess.getPitchAccess().getCautionaryAccidentalQuestionMarkKeyword_4_0()); }

	KEYWORD_14 

{ after(grammarAccess.getPitchAccess().getCautionaryAccidentalQuestionMarkKeyword_4_0()); }
)

{ after(grammarAccess.getPitchAccess().getCautionaryAccidentalQuestionMarkKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__UpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOctaveAccess().getUpApostropheKeyword_0_0()); }
(
{ before(grammarAccess.getOctaveAccess().getUpApostropheKeyword_0_0()); }

	KEYWORD_4 

{ after(grammarAccess.getOctaveAccess().getUpApostropheKeyword_0_0()); }
)

{ after(grammarAccess.getOctaveAccess().getUpApostropheKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__DownAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOctaveAccess().getDownCommaKeyword_1_0()); }
(
{ before(grammarAccess.getOctaveAccess().getDownCommaKeyword_1_0()); }

	KEYWORD_8 

{ after(grammarAccess.getOctaveAccess().getDownCommaKeyword_1_0()); }
)

{ after(grammarAccess.getOctaveAccess().getDownCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransposedMusic__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransposedMusicAccess().getKeywordTransposeKeyword_1_0()); }
(
{ before(grammarAccess.getTransposedMusicAccess().getKeywordTransposeKeyword_1_0()); }

	KEYWORD_80 

{ after(grammarAccess.getTransposedMusicAccess().getKeywordTransposeKeyword_1_0()); }
)

{ after(grammarAccess.getTransposedMusicAccess().getKeywordTransposeKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransposedMusic__SourceAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransposedMusicAccess().getSourcePitchParserRuleCall_2_0()); }
	rulePitch{ after(grammarAccess.getTransposedMusicAccess().getSourcePitchParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransposedMusic__TargetAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransposedMusicAccess().getTargetPitchParserRuleCall_3_0()); }
	rulePitch{ after(grammarAccess.getTransposedMusicAccess().getTargetPitchParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransposedMusic__MusicAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransposedMusicAccess().getMusicExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getTransposedMusicAccess().getMusicExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModeChange__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeChangeAccess().getKeywordAlternatives_1_0()); }
(rule__ModeChange__KeywordAlternatives_1_0)
{ after(grammarAccess.getModeChangeAccess().getKeywordAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModeChange__MusicAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeChangeAccess().getMusicBlockParserRuleCall_2_0()); }
	ruleBlock{ after(grammarAccess.getModeChangeAccess().getMusicBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MusicWithLyrics__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicWithLyricsAccess().getKeywordLyricstoKeyword_1_0()); }
(
{ before(grammarAccess.getMusicWithLyricsAccess().getKeywordLyricstoKeyword_1_0()); }

	KEYWORD_71 

{ after(grammarAccess.getMusicWithLyricsAccess().getKeywordLyricstoKeyword_1_0()); }
)

{ after(grammarAccess.getMusicWithLyricsAccess().getKeywordLyricstoKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MusicWithLyrics__IdAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicWithLyricsAccess().getIdAlternatives_2_0()); }
(rule__MusicWithLyrics__IdAlternatives_2_0)
{ after(grammarAccess.getMusicWithLyricsAccess().getIdAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MusicWithLyrics__LyricsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicWithLyricsAccess().getLyricsExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getMusicWithLyricsAccess().getLyricsExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getKeywordAlternatives_1_0()); }
(rule__NewContext__KeywordAlternatives_1_0)
{ after(grammarAccess.getNewContextAccess().getKeywordAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__ContextAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getContextIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getNewContextAccess().getContextIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__IdAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getIdAlternatives_3_1_0()); }
(rule__NewContext__IdAlternatives_3_1_0)
{ after(grammarAccess.getNewContextAccess().getIdAlternatives_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__ModificationAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getModificationContextModificationParserRuleCall_4_0()); }
	ruleContextModification{ after(grammarAccess.getNewContextAccess().getModificationContextModificationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__MusicAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getMusicExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getNewContextAccess().getMusicExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModification__BlockAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModificationAccess().getBlockUnparsedBlockParserRuleCall_2_0()); }
	ruleUnparsedBlock{ after(grammarAccess.getContextModificationAccess().getBlockUnparsedBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDef__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefAccess().getKeywordContextKeyword_1_0()); }
(
{ before(grammarAccess.getContextDefAccess().getKeywordContextKeyword_1_0()); }

	KEYWORD_62 

{ after(grammarAccess.getContextDefAccess().getKeywordContextKeyword_1_0()); }
)

{ after(grammarAccess.getContextDefAccess().getKeywordContextKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDef__BlockAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefAccess().getBlockUnparsedBlockParserRuleCall_2_0()); }
	ruleUnparsedBlock{ after(grammarAccess.getContextDefAccess().getBlockUnparsedBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Other__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherAccess().getKeywordAlternatives_1_0()); }
(rule__Other__KeywordAlternatives_1_0)
{ after(grammarAccess.getOtherAccess().getKeywordAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getValueSchemeExpressionParserRuleCall_1_0()); }
	ruleSchemeExpression{ after(grammarAccess.getSchemeAccess().getValueSchemeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__ReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getReferenceDollarSignKeyword_0_0()); }
(
{ before(grammarAccess.getSchemeExpressionAccess().getReferenceDollarSignKeyword_0_0()); }

	KEYWORD_3 

{ after(grammarAccess.getSchemeExpressionAccess().getReferenceDollarSignKeyword_0_0()); }
)

{ after(grammarAccess.getSchemeExpressionAccess().getReferenceDollarSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__QuotationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotationsAlternatives_1_0()); }
(rule__SchemeExpression__QuotationsAlternatives_1_0)
{ after(grammarAccess.getSchemeExpressionAccess().getQuotationsAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getValueSchemeValueParserRuleCall_2_0()); }
	ruleSchemeValue{ after(grammarAccess.getSchemeExpressionAccess().getValueSchemeValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBoolean__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBooleanAccess().getValueSchemeBooleanValueParserRuleCall_0()); }
	ruleSchemeBooleanValue{ after(grammarAccess.getSchemeBooleanAccess().getValueSchemeBooleanValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__VectorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getVectorNumberSignKeyword_1_0()); }
(
{ before(grammarAccess.getSchemeListAccess().getVectorNumberSignKeyword_1_0()); }

	KEYWORD_2 

{ after(grammarAccess.getSchemeListAccess().getVectorNumberSignKeyword_1_0()); }
)

{ after(grammarAccess.getSchemeListAccess().getVectorNumberSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__ExpressionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getExpressionsSchemeExpressionParserRuleCall_3_0()); }
	ruleSchemeExpression{ after(grammarAccess.getSchemeListAccess().getExpressionsSchemeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__ElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getElementsExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getSchemeBlockAccess().getElementsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeCharacter__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeCharacterAccess().getValueAlternatives_1_0()); }
(rule__SchemeCharacter__ValueAlternatives_1_0)
{ after(grammarAccess.getSchemeCharacterAccess().getValueAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeText__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextAccess().getValueSchemeTextValueParserRuleCall_0()); }
	ruleSchemeTextValue{ after(grammarAccess.getSchemeTextAccess().getValueSchemeTextValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__RadixAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getRadixSchemeNumberRadixParserRuleCall_0_0()); }
	ruleSchemeNumberRadix{ after(grammarAccess.getSchemeNumberAccess().getRadixSchemeNumberRadixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSchemeNumberAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeMarkupCommand__CommandAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeMarkupCommandAccess().getCommandAlternatives_1_0()); }
(rule__SchemeMarkupCommand__CommandAlternatives_1_0)
{ after(grammarAccess.getSchemeMarkupCommandAccess().getCommandAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


