/*
* generated by Xtext
*/
parser grammar InternalLilyPond;

options {
	tokenVocab=InternalLilyPond;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@header {
package org.elysium.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.elysium.services.LilyPondGrammarAccess;

}

@members {
 
 	private LilyPondGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'!'");
		tokenNameToValue.put("KEYWORD_2", "'#'");
		tokenNameToValue.put("KEYWORD_3", "'\u0024'");
		tokenNameToValue.put("KEYWORD_4", "'\''");
		tokenNameToValue.put("KEYWORD_5", "'('");
		tokenNameToValue.put("KEYWORD_6", "')'");
		tokenNameToValue.put("KEYWORD_7", "'+'");
		tokenNameToValue.put("KEYWORD_8", "','");
		tokenNameToValue.put("KEYWORD_9", "'<'");
		tokenNameToValue.put("KEYWORD_10", "'='");
		tokenNameToValue.put("KEYWORD_11", "'>'");
		tokenNameToValue.put("KEYWORD_12", "'['");
		tokenNameToValue.put("KEYWORD_13", "'\\'");
		tokenNameToValue.put("KEYWORD_14", "']'");
		tokenNameToValue.put("KEYWORD_15", "'`'");
		tokenNameToValue.put("KEYWORD_16", "'{'");
		tokenNameToValue.put("KEYWORD_17", "'}'");
		tokenNameToValue.put("KEYWORD_18", "'~'");
		tokenNameToValue.put("KEYWORD_19", "'#:'");
		tokenNameToValue.put("KEYWORD_20", "'#\\'");
		tokenNameToValue.put("KEYWORD_21", "'#{'");
		tokenNameToValue.put("KEYWORD_22", "'#}'");
		tokenNameToValue.put("KEYWORD_23", "'<<'");
		tokenNameToValue.put("KEYWORD_24", "'>>'");
		tokenNameToValue.put("KEYWORD_25", "'\\\\'");
		tokenNameToValue.put("KEYWORD_26", "'markup'");
		tokenNameToValue.put("KEYWORD_27", "'include'");
		tokenNameToValue.put("KEYWORD_28", "'version'");
		tokenNameToValue.put("KEYWORD_29", "'markuplines'");
 	}
 	
    public void setGrammarAccess(LilyPondGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleLilyPond
entryRuleLilyPond 
:
{ before(grammarAccess.getLilyPondRule()); }
	 ruleLilyPond
{ after(grammarAccess.getLilyPondRule()); } 
	 EOF 
;

// Rule LilyPond
ruleLilyPond 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLilyPondAccess().getExpressionsAssignment()); }
(rule__LilyPond__ExpressionsAssignment)*
{ after(grammarAccess.getLilyPondAccess().getExpressionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleToplevelExpression
entryRuleToplevelExpression 
:
{ before(grammarAccess.getToplevelExpressionRule()); }
	 ruleToplevelExpression
{ after(grammarAccess.getToplevelExpressionRule()); } 
	 EOF 
;

// Rule ToplevelExpression
ruleToplevelExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getToplevelExpressionAccess().getAlternatives()); }
(rule__ToplevelExpression__Alternatives)
{ after(grammarAccess.getToplevelExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommonExpression
entryRuleCommonExpression 
:
{ before(grammarAccess.getCommonExpressionRule()); }
	 ruleCommonExpression
{ after(grammarAccess.getCommonExpressionRule()); } 
	 EOF 
;

// Rule CommonExpression
ruleCommonExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCommonExpressionAccess().getAlternatives()); }
(rule__CommonExpression__Alternatives)
{ after(grammarAccess.getCommonExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyAssignment
entryRulePropertyAssignment 
:
{ before(grammarAccess.getPropertyAssignmentRule()); }
	 rulePropertyAssignment
{ after(grammarAccess.getPropertyAssignmentRule()); } 
	 EOF 
;

// Rule PropertyAssignment
rulePropertyAssignment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPropertyAssignmentAccess().getGroup()); }
(rule__PropertyAssignment__Group__0)
{ after(grammarAccess.getPropertyAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBlockAccess().getAlternatives()); }
(rule__Block__Alternatives)
{ after(grammarAccess.getBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleBlock
entryRuleSimpleBlock 
:
{ before(grammarAccess.getSimpleBlockRule()); }
	 ruleSimpleBlock
{ after(grammarAccess.getSimpleBlockRule()); } 
	 EOF 
;

// Rule SimpleBlock
ruleSimpleBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimpleBlockAccess().getGroup()); }
(rule__SimpleBlock__Group__0)
{ after(grammarAccess.getSimpleBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimultaneousBlock
entryRuleSimultaneousBlock 
:
{ before(grammarAccess.getSimultaneousBlockRule()); }
	 ruleSimultaneousBlock
{ after(grammarAccess.getSimultaneousBlockRule()); } 
	 EOF 
;

// Rule SimultaneousBlock
ruleSimultaneousBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimultaneousBlockAccess().getGroup()); }
(rule__SimultaneousBlock__Group__0)
{ after(grammarAccess.getSimultaneousBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCommandAccess().getAlternatives()); }
(rule__Command__Alternatives)
{ after(grammarAccess.getCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpecialCommand
entryRuleSpecialCommand 
:
{ before(grammarAccess.getSpecialCommandRule()); }
	 ruleSpecialCommand
{ after(grammarAccess.getSpecialCommandRule()); } 
	 EOF 
;

// Rule SpecialCommand
ruleSpecialCommand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSpecialCommandAccess().getAlternatives()); }
(rule__SpecialCommand__Alternatives)
{ after(grammarAccess.getSpecialCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInclude
entryRuleInclude 
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIncludeAccess().getGroup()); }
(rule__Include__Group__0)
{ after(grammarAccess.getIncludeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVersion
entryRuleVersion 
:
{ before(grammarAccess.getVersionRule()); }
	 ruleVersion
{ after(grammarAccess.getVersionRule()); } 
	 EOF 
;

// Rule Version
ruleVersion 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVersionAccess().getGroup()); }
(rule__Version__Group__0)
{ after(grammarAccess.getVersionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMarkup
entryRuleMarkup 
:
{ before(grammarAccess.getMarkupRule()); }
	 ruleMarkup
{ after(grammarAccess.getMarkupRule()); } 
	 EOF 
;

// Rule Markup
ruleMarkup 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMarkupAccess().getGroup()); }
(rule__Markup__Group__0)
{ after(grammarAccess.getMarkupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMarkupBlock
entryRuleMarkupBlock 
:
{ before(grammarAccess.getMarkupBlockRule()); }
	 ruleMarkupBlock
{ after(grammarAccess.getMarkupBlockRule()); } 
	 EOF 
;

// Rule MarkupBlock
ruleMarkupBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMarkupBlockAccess().getGroup()); }
(rule__MarkupBlock__Group__0)
{ after(grammarAccess.getMarkupBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMarkupExpression
entryRuleMarkupExpression 
:
{ before(grammarAccess.getMarkupExpressionRule()); }
	 ruleMarkupExpression
{ after(grammarAccess.getMarkupExpressionRule()); } 
	 EOF 
;

// Rule MarkupExpression
ruleMarkupExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMarkupExpressionAccess().getAlternatives()); }
(rule__MarkupExpression__Alternatives)
{ after(grammarAccess.getMarkupExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMarkupCommand
entryRuleMarkupCommand 
:
{ before(grammarAccess.getMarkupCommandRule()); }
	 ruleMarkupCommand
{ after(grammarAccess.getMarkupCommandRule()); } 
	 EOF 
;

// Rule MarkupCommand
ruleMarkupCommand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMarkupCommandAccess().getGroup()); }
(rule__MarkupCommand__Group__0)
{ after(grammarAccess.getMarkupCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReference
entryRuleReference 
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getReferenceAccess().getGroup()); }
(rule__Reference__Group__0)
{ after(grammarAccess.getReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReferenceName
entryRuleReferenceName 
:
{ before(grammarAccess.getReferenceNameRule()); }
	 ruleReferenceName
{ after(grammarAccess.getReferenceNameRule()); } 
	 EOF 
;

// Rule ReferenceName
ruleReferenceName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getReferenceNameAccess().getAlternatives()); }
(rule__ReferenceName__Alternatives)
{ after(grammarAccess.getReferenceNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpecialCharacter
entryRuleSpecialCharacter 
:
{ before(grammarAccess.getSpecialCharacterRule()); }
	 ruleSpecialCharacter
{ after(grammarAccess.getSpecialCharacterRule()); } 
	 EOF 
;

// Rule SpecialCharacter
ruleSpecialCharacter 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSpecialCharacterAccess().getAlternatives()); }
(rule__SpecialCharacter__Alternatives)
{ after(grammarAccess.getSpecialCharacterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleText
entryRuleText 
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTextAccess().getValueAssignment()); }
(rule__Text__ValueAssignment)
{ after(grammarAccess.getTextAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNumberAccess().getValueAssignment()); }
(rule__Number__ValueAssignment)
{ after(grammarAccess.getNumberAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScheme
entryRuleScheme 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SCHEME_SL_COMMENT", "RULE_SCHEME_ML_COMMENT");
}
:
{ before(grammarAccess.getSchemeRule()); }
	 ruleScheme
{ after(grammarAccess.getSchemeRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Scheme
ruleScheme 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SCHEME_SL_COMMENT", "RULE_SCHEME_ML_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeAccess().getGroup()); }
(rule__Scheme__Group__0)
{ after(grammarAccess.getSchemeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSchemeExpression
entryRuleSchemeExpression 
:
{ before(grammarAccess.getSchemeExpressionRule()); }
	 ruleSchemeExpression
{ after(grammarAccess.getSchemeExpressionRule()); } 
	 EOF 
;

// Rule SchemeExpression
ruleSchemeExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeExpressionAccess().getGroup()); }
(rule__SchemeExpression__Group__0)
{ after(grammarAccess.getSchemeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeValue
entryRuleSchemeValue 
:
{ before(grammarAccess.getSchemeValueRule()); }
	 ruleSchemeValue
{ after(grammarAccess.getSchemeValueRule()); } 
	 EOF 
;

// Rule SchemeValue
ruleSchemeValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeValueAccess().getAlternatives()); }
(rule__SchemeValue__Alternatives)
{ after(grammarAccess.getSchemeValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeBoolean
entryRuleSchemeBoolean 
:
{ before(grammarAccess.getSchemeBooleanRule()); }
	 ruleSchemeBoolean
{ after(grammarAccess.getSchemeBooleanRule()); } 
	 EOF 
;

// Rule SchemeBoolean
ruleSchemeBoolean 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeBooleanAccess().getValueAssignment()); }
(rule__SchemeBoolean__ValueAssignment)
{ after(grammarAccess.getSchemeBooleanAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeList
entryRuleSchemeList 
:
{ before(grammarAccess.getSchemeListRule()); }
	 ruleSchemeList
{ after(grammarAccess.getSchemeListRule()); } 
	 EOF 
;

// Rule SchemeList
ruleSchemeList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeListAccess().getGroup()); }
(rule__SchemeList__Group__0)
{ after(grammarAccess.getSchemeListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeBlock
entryRuleSchemeBlock 
:
{ before(grammarAccess.getSchemeBlockRule()); }
	 ruleSchemeBlock
{ after(grammarAccess.getSchemeBlockRule()); } 
	 EOF 
;

// Rule SchemeBlock
ruleSchemeBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeBlockAccess().getGroup()); }
(rule__SchemeBlock__Group__0)
{ after(grammarAccess.getSchemeBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeCharacter
entryRuleSchemeCharacter 
:
{ before(grammarAccess.getSchemeCharacterRule()); }
	 ruleSchemeCharacter
{ after(grammarAccess.getSchemeCharacterRule()); } 
	 EOF 
;

// Rule SchemeCharacter
ruleSchemeCharacter 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeCharacterAccess().getGroup()); }
(rule__SchemeCharacter__Group__0)
{ after(grammarAccess.getSchemeCharacterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeText
entryRuleSchemeText 
:
{ before(grammarAccess.getSchemeTextRule()); }
	 ruleSchemeText
{ after(grammarAccess.getSchemeTextRule()); } 
	 EOF 
;

// Rule SchemeText
ruleSchemeText 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeTextAccess().getValueAssignment()); }
(rule__SchemeText__ValueAssignment)
{ after(grammarAccess.getSchemeTextAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeTextLiterals
entryRuleSchemeTextLiterals 
:
{ before(grammarAccess.getSchemeTextLiteralsRule()); }
	 ruleSchemeTextLiterals
{ after(grammarAccess.getSchemeTextLiteralsRule()); } 
	 EOF 
;

// Rule SchemeTextLiterals
ruleSchemeTextLiterals 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getAlternatives()); }
(rule__SchemeTextLiterals__Alternatives)
{ after(grammarAccess.getSchemeTextLiteralsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeNumber
entryRuleSchemeNumber 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSchemeNumberRule()); }
	 ruleSchemeNumber
{ after(grammarAccess.getSchemeNumberRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeNumber
ruleSchemeNumber 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeNumberAccess().getGroup()); }
(rule__SchemeNumber__Group__0)
{ after(grammarAccess.getSchemeNumberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSchemeNumberRadix
entryRuleSchemeNumberRadix 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSchemeNumberRadixRule()); }
	 ruleSchemeNumberRadix
{ after(grammarAccess.getSchemeNumberRadixRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeNumberRadix
ruleSchemeNumberRadix 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeNumberRadixAccess().getGroup()); }
(rule__SchemeNumberRadix__Group__0)
{ after(grammarAccess.getSchemeNumberRadixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSchemeMarkupCommand
entryRuleSchemeMarkupCommand 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSchemeMarkupCommandRule()); }
	 ruleSchemeMarkupCommand
{ after(grammarAccess.getSchemeMarkupCommandRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeMarkupCommand
ruleSchemeMarkupCommand 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeMarkupCommandAccess().getGroup()); }
(rule__SchemeMarkupCommand__Group__0)
{ after(grammarAccess.getSchemeMarkupCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleBOOL
entryRuleBOOL 
:
{ before(grammarAccess.getBOOLRule()); }
	 ruleBOOL
{ after(grammarAccess.getBOOLRule()); } 
	 EOF 
;

// Rule BOOL
ruleBOOL 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBOOLAccess().getGroup()); }
(rule__BOOL__Group__0)
{ after(grammarAccess.getBOOLAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ToplevelExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToplevelExpressionAccess().getAssignmentParserRuleCall_0()); }
	ruleAssignment
{ after(grammarAccess.getToplevelExpressionAccess().getAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getCommonExpressionParserRuleCall_1()); }
	ruleCommonExpression
{ after(grammarAccess.getToplevelExpressionAccess().getCommonExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getPropertyAssignmentParserRuleCall_0()); }
	rulePropertyAssignment
{ after(grammarAccess.getExpressionAccess().getPropertyAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getCommonExpressionParserRuleCall_1()); }
	ruleCommonExpression
{ after(grammarAccess.getExpressionAccess().getCommonExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommonExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommonExpressionAccess().getCommandParserRuleCall_0()); }
	ruleCommand
{ after(grammarAccess.getCommonExpressionAccess().getCommandParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommonExpressionAccess().getBlockParserRuleCall_1()); }
	ruleBlock
{ after(grammarAccess.getCommonExpressionAccess().getBlockParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCommonExpressionAccess().getSchemeParserRuleCall_2()); }
	ruleScheme
{ after(grammarAccess.getCommonExpressionAccess().getSchemeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getCommonExpressionAccess().getTextParserRuleCall_3()); }
	ruleText
{ after(grammarAccess.getCommonExpressionAccess().getTextParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getCommonExpressionAccess().getNumberParserRuleCall_4()); }
	ruleNumber
{ after(grammarAccess.getCommonExpressionAccess().getNumberParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__NameAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0_0()); }
	RULE_ID
{ after(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getNameSTRINGTerminalRuleCall_0_0_1()); }
	RULE_STRING
{ after(grammarAccess.getAssignmentAccess().getNameSTRINGTerminalRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__IdAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getIdIDTerminalRuleCall_0_0_0()); }
	RULE_ID
{ after(grammarAccess.getPropertyAssignmentAccess().getIdIDTerminalRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getPropertyAssignmentAccess().getIdSTRINGTerminalRuleCall_0_0_1()); }
	RULE_STRING
{ after(grammarAccess.getPropertyAssignmentAccess().getIdSTRINGTerminalRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getSimpleBlockParserRuleCall_0()); }
	ruleSimpleBlock
{ after(grammarAccess.getBlockAccess().getSimpleBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBlockAccess().getSimultaneousBlockParserRuleCall_1()); }
	ruleSimultaneousBlock
{ after(grammarAccess.getBlockAccess().getSimultaneousBlockParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getSpecialCommandParserRuleCall_0()); }
	ruleSpecialCommand
{ after(grammarAccess.getCommandAccess().getSpecialCommandParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getReferenceParserRuleCall_1()); }
	ruleReference
{ after(grammarAccess.getCommandAccess().getReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCommand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialCommandAccess().getIncludeParserRuleCall_0()); }
	ruleInclude
{ after(grammarAccess.getSpecialCommandAccess().getIncludeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getVersionParserRuleCall_1()); }
	ruleVersion
{ after(grammarAccess.getSpecialCommandAccess().getVersionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSpecialCommandAccess().getMarkupParserRuleCall_2()); }
	ruleMarkup
{ after(grammarAccess.getSpecialCommandAccess().getMarkupParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__KeywordAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getKeywordMarkupKeyword_1_0_0()); }

	KEYWORD_26 

{ after(grammarAccess.getMarkupAccess().getKeywordMarkupKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getMarkupAccess().getKeywordMarkuplinesKeyword_1_0_1()); }

	KEYWORD_29 

{ after(grammarAccess.getMarkupAccess().getKeywordMarkuplinesKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupExpressionAccess().getMarkupCommandParserRuleCall_0()); }
	ruleMarkupCommand
{ after(grammarAccess.getMarkupExpressionAccess().getMarkupCommandParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMarkupExpressionAccess().getMarkupBlockParserRuleCall_1()); }
	ruleMarkupBlock
{ after(grammarAccess.getMarkupExpressionAccess().getMarkupBlockParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMarkupExpressionAccess().getSchemeParserRuleCall_2()); }
	ruleScheme
{ after(grammarAccess.getMarkupExpressionAccess().getSchemeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getMarkupExpressionAccess().getTextParserRuleCall_3()); }
	ruleText
{ after(grammarAccess.getMarkupExpressionAccess().getTextParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getMarkupExpressionAccess().getNumberParserRuleCall_4()); }
	ruleNumber
{ after(grammarAccess.getMarkupExpressionAccess().getNumberParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getReferenceNameAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getReferenceNameAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_5 

{ after(grammarAccess.getReferenceNameAccess().getLeftParenthesisKeyword_1()); }
)

    |(
{ before(grammarAccess.getReferenceNameAccess().getRightParenthesisKeyword_2()); }

	KEYWORD_6 

{ after(grammarAccess.getReferenceNameAccess().getRightParenthesisKeyword_2()); }
)

    |(
{ before(grammarAccess.getReferenceNameAccess().getSpecialCharacterParserRuleCall_3()); }
	ruleSpecialCharacter
{ after(grammarAccess.getReferenceNameAccess().getSpecialCharacterParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCharacter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialCharacterAccess().getExclamationMarkKeyword_0()); }

	KEYWORD_1 

{ after(grammarAccess.getSpecialCharacterAccess().getExclamationMarkKeyword_0()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getPlusSignKeyword_1()); }

	KEYWORD_7 

{ after(grammarAccess.getSpecialCharacterAccess().getPlusSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getLessThanSignKeyword_2()); }

	KEYWORD_9 

{ after(grammarAccess.getSpecialCharacterAccess().getLessThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getGreaterThanSignKeyword_3()); }

	KEYWORD_11 

{ after(grammarAccess.getSpecialCharacterAccess().getGreaterThanSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getLeftSquareBracketKeyword_4()); }

	KEYWORD_12 

{ after(grammarAccess.getSpecialCharacterAccess().getLeftSquareBracketKeyword_4()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getRightSquareBracketKeyword_5()); }

	KEYWORD_14 

{ after(grammarAccess.getSpecialCharacterAccess().getRightSquareBracketKeyword_5()); }
)

    |(
{ before(grammarAccess.getSpecialCharacterAccess().getTildeKeyword_6()); }

	KEYWORD_18 

{ after(grammarAccess.getSpecialCharacterAccess().getTildeKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Text__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextAccess().getValueSchemeTextLiteralsParserRuleCall_0_0()); }
	ruleSchemeTextLiterals
{ after(grammarAccess.getTextAccess().getValueSchemeTextLiteralsParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueLeftParenthesisKeyword_0_1()); }

	KEYWORD_5 

{ after(grammarAccess.getTextAccess().getValueLeftParenthesisKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueRightParenthesisKeyword_0_2()); }

	KEYWORD_6 

{ after(grammarAccess.getTextAccess().getValueRightParenthesisKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueApostropheKeyword_0_3()); }

	KEYWORD_4 

{ after(grammarAccess.getTextAccess().getValueApostropheKeyword_0_3()); }
)

    |(
{ before(grammarAccess.getTextAccess().getValueCommaKeyword_0_4()); }

	KEYWORD_8 

{ after(grammarAccess.getTextAccess().getValueCommaKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotedAssignment_0_0()); }
(rule__SchemeExpression__QuotedAssignment_0_0)?
{ after(grammarAccess.getSchemeExpressionAccess().getQuotedAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getSchemeExpressionAccess().getQuasiquotedAssignment_0_1()); }
(rule__SchemeExpression__QuasiquotedAssignment_0_1)?
{ after(grammarAccess.getSchemeExpressionAccess().getQuasiquotedAssignment_0_1()); }
)

    |(
{ before(grammarAccess.getSchemeExpressionAccess().getUnquotedAssignment_0_2()); }
(rule__SchemeExpression__UnquotedAssignment_0_2)?
{ after(grammarAccess.getSchemeExpressionAccess().getUnquotedAssignment_0_2()); }
)

    |(
{ before(grammarAccess.getSchemeExpressionAccess().getVariableAssignment_0_3()); }
(rule__SchemeExpression__VariableAssignment_0_3)
{ after(grammarAccess.getSchemeExpressionAccess().getVariableAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeValueAccess().getSchemeBooleanParserRuleCall_0()); }
	ruleSchemeBoolean
{ after(grammarAccess.getSchemeValueAccess().getSchemeBooleanParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeListParserRuleCall_1()); }
	ruleSchemeList
{ after(grammarAccess.getSchemeValueAccess().getSchemeListParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeBlockParserRuleCall_2()); }
	ruleSchemeBlock
{ after(grammarAccess.getSchemeValueAccess().getSchemeBlockParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeCharacterParserRuleCall_3()); }
	ruleSchemeCharacter
{ after(grammarAccess.getSchemeValueAccess().getSchemeCharacterParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeTextParserRuleCall_4()); }
	ruleSchemeText
{ after(grammarAccess.getSchemeValueAccess().getSchemeTextParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeNumberParserRuleCall_5()); }
	ruleSchemeNumber
{ after(grammarAccess.getSchemeValueAccess().getSchemeNumberParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeMarkupCommandParserRuleCall_6()); }
	ruleSchemeMarkupCommand
{ after(grammarAccess.getSchemeValueAccess().getSchemeMarkupCommandParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeCharacter__ValueAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeCharacterAccess().getValueIDTerminalRuleCall_1_0_0()); }
	RULE_ID
{ after(grammarAccess.getSchemeCharacterAccess().getValueIDTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getSchemeCharacterAccess().getValueSpecialCharacterParserRuleCall_1_0_1()); }
	ruleSpecialCharacter
{ after(grammarAccess.getSchemeCharacterAccess().getValueSpecialCharacterParserRuleCall_1_0_1()); }
)

    |(
{ before(grammarAccess.getSchemeCharacterAccess().getValueANY_OTHERTerminalRuleCall_1_0_2()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getSchemeCharacterAccess().getValueANY_OTHERTerminalRuleCall_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeTextLiterals__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getReverseSolidusReverseSolidusKeyword_0()); }

	KEYWORD_25 

{ after(grammarAccess.getSchemeTextLiteralsAccess().getReverseSolidusReverseSolidusKeyword_0()); }
)

    |(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getEqualsSignKeyword_1()); }

	KEYWORD_10 

{ after(grammarAccess.getSchemeTextLiteralsAccess().getEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getSpecialCharacterParserRuleCall_2()); }
	ruleSpecialCharacter
{ after(grammarAccess.getSchemeTextLiteralsAccess().getSpecialCharacterParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getIDTerminalRuleCall_3()); }
	RULE_ID
{ after(grammarAccess.getSchemeTextLiteralsAccess().getIDTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getSTRINGTerminalRuleCall_4()); }
	RULE_STRING
{ after(grammarAccess.getSchemeTextLiteralsAccess().getSTRINGTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getANY_OTHERTerminalRuleCall_5()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getSchemeTextLiteralsAccess().getANY_OTHERTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameAssignment_0()); }
(rule__Assignment__NameAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }

	KEYWORD_10 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
(rule__Assignment__ValueAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyAssignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssignment__Group__0__Impl
	rule__PropertyAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getIdAssignment_0()); }
(rule__PropertyAssignment__IdAssignment_0)
{ after(grammarAccess.getPropertyAssignmentAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssignment__Group__1__Impl
	rule__PropertyAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getEqualsSignKeyword_1()); }

	KEYWORD_10 

{ after(grammarAccess.getPropertyAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getValueAssignment_2()); }
(rule__PropertyAssignment__ValueAssignment_2)
{ after(grammarAccess.getPropertyAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__0__Impl
	rule__SimpleBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getSimpleBlockAction_0()); }
(

)
{ after(grammarAccess.getSimpleBlockAccess().getSimpleBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__1__Impl
	rule__SimpleBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getLeftCurlyBracketKeyword_1()); }

	KEYWORD_16 

{ after(grammarAccess.getSimpleBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__2__Impl
	rule__SimpleBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getExpressionsAssignment_2()); }
(rule__SimpleBlock__ExpressionsAssignment_2)*
{ after(grammarAccess.getSimpleBlockAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getRightCurlyBracketKeyword_3()); }

	KEYWORD_17 

{ after(grammarAccess.getSimpleBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SimultaneousBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__0__Impl
	rule__SimultaneousBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getSimultaneousBlockAction_0()); }
(

)
{ after(grammarAccess.getSimultaneousBlockAccess().getSimultaneousBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__1__Impl
	rule__SimultaneousBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getLessThanSignLessThanSignKeyword_1()); }

	KEYWORD_23 

{ after(grammarAccess.getSimultaneousBlockAccess().getLessThanSignLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__2__Impl
	rule__SimultaneousBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getExpressionsAssignment_2()); }
(rule__SimultaneousBlock__ExpressionsAssignment_2)*
{ after(grammarAccess.getSimultaneousBlockAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getGreaterThanSignGreaterThanSignKeyword_3()); }

	KEYWORD_24 

{ after(grammarAccess.getSimultaneousBlockAccess().getGreaterThanSignGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Include__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_13 

{ after(grammarAccess.getIncludeAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__1__Impl
	rule__Include__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getKeywordAssignment_1()); }
(rule__Include__KeywordAssignment_1)
{ after(grammarAccess.getIncludeAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getImportURIAssignment_2()); }
(rule__Include__ImportURIAssignment_2)
{ after(grammarAccess.getIncludeAccess().getImportURIAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Version__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Version__Group__0__Impl
	rule__Version__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_13 

{ after(grammarAccess.getVersionAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Version__Group__1__Impl
	rule__Version__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getKeywordAssignment_1()); }
(rule__Version__KeywordAssignment_1)
{ after(grammarAccess.getVersionAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Version__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getVersionAssignment_2()); }
(rule__Version__VersionAssignment_2)
{ after(grammarAccess.getVersionAccess().getVersionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Markup__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Markup__Group__0__Impl
	rule__Markup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_13 

{ after(grammarAccess.getMarkupAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Markup__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Markup__Group__1__Impl
	rule__Markup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getKeywordAssignment_1()); }
(rule__Markup__KeywordAssignment_1)
{ after(grammarAccess.getMarkupAccess().getKeywordAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Markup__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Markup__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getBlockAssignment_2()); }
(rule__Markup__BlockAssignment_2)
{ after(grammarAccess.getMarkupAccess().getBlockAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MarkupBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupBlock__Group__0__Impl
	rule__MarkupBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBlockAccess().getMarkupBlockAction_0()); }
(

)
{ after(grammarAccess.getMarkupBlockAccess().getMarkupBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupBlock__Group__1__Impl
	rule__MarkupBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBlockAccess().getLeftCurlyBracketKeyword_1()); }

	KEYWORD_16 

{ after(grammarAccess.getMarkupBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupBlock__Group__2__Impl
	rule__MarkupBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBlockAccess().getExpressionsAssignment_2()); }
(rule__MarkupBlock__ExpressionsAssignment_2)*
{ after(grammarAccess.getMarkupBlockAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBlockAccess().getRightCurlyBracketKeyword_3()); }

	KEYWORD_17 

{ after(grammarAccess.getMarkupBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MarkupCommand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupCommand__Group__0__Impl
	rule__MarkupCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupCommand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupCommandAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_13 

{ after(grammarAccess.getMarkupCommandAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupCommand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupCommand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupCommand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupCommandAccess().getCommandAssignment_1()); }
(rule__MarkupCommand__CommandAssignment_1)
{ after(grammarAccess.getMarkupCommandAccess().getCommandAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Reference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_13 

{ after(grammarAccess.getReferenceAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getAssignmentAssignment_1()); }
(rule__Reference__AssignmentAssignment_1)
{ after(grammarAccess.getReferenceAccess().getAssignmentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Scheme__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scheme__Group__0__Impl
	rule__Scheme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getNumberSignKeyword_0()); }

	KEYWORD_2 

{ after(grammarAccess.getSchemeAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scheme__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scheme__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getValueAssignment_1()); }
(rule__Scheme__ValueAssignment_1)
{ after(grammarAccess.getSchemeAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeExpression__Group__0__Impl
	rule__SchemeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getAlternatives_0()); }
(rule__SchemeExpression__Alternatives_0)
{ after(grammarAccess.getSchemeExpressionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getValueAssignment_1()); }
(rule__SchemeExpression__ValueAssignment_1)
{ after(grammarAccess.getSchemeExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__0__Impl
	rule__SchemeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getSchemeListAction_0()); }
(

)
{ after(grammarAccess.getSchemeListAccess().getSchemeListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__1__Impl
	rule__SchemeList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getVectorAssignment_1()); }
(rule__SchemeList__VectorAssignment_1)?
{ after(grammarAccess.getSchemeListAccess().getVectorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__2__Impl
	rule__SchemeList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getLeftParenthesisKeyword_2()); }

	KEYWORD_5 

{ after(grammarAccess.getSchemeListAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__3__Impl
	rule__SchemeList__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getExpressionsAssignment_3()); }
(rule__SchemeList__ExpressionsAssignment_3)*
{ after(grammarAccess.getSchemeListAccess().getExpressionsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getRightParenthesisKeyword_4()); }

	KEYWORD_6 

{ after(grammarAccess.getSchemeListAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SchemeBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__0__Impl
	rule__SchemeBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getNumberSignLeftCurlyBracketKeyword_0()); }

	KEYWORD_21 

{ after(grammarAccess.getSchemeBlockAccess().getNumberSignLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__1__Impl
	rule__SchemeBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSchemeBlockAccess().getExpressionsAssignment_1()); }
(rule__SchemeBlock__ExpressionsAssignment_1)
{ after(grammarAccess.getSchemeBlockAccess().getExpressionsAssignment_1()); }
)
(
{ before(grammarAccess.getSchemeBlockAccess().getExpressionsAssignment_1()); }
(rule__SchemeBlock__ExpressionsAssignment_1)*
{ after(grammarAccess.getSchemeBlockAccess().getExpressionsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getNumberSignRightCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getSchemeBlockAccess().getNumberSignRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SchemeCharacter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeCharacter__Group__0__Impl
	rule__SchemeCharacter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeCharacter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeCharacterAccess().getNumberSignReverseSolidusKeyword_0()); }

	KEYWORD_20 

{ after(grammarAccess.getSchemeCharacterAccess().getNumberSignReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeCharacter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeCharacter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeCharacter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeCharacterAccess().getValueAssignment_1()); }
(rule__SchemeCharacter__ValueAssignment_1)
{ after(grammarAccess.getSchemeCharacterAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeNumber__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumber__Group__0__Impl
	rule__SchemeNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getRadixAssignment_0()); }
(rule__SchemeNumber__RadixAssignment_0)?
{ after(grammarAccess.getSchemeNumberAccess().getRadixAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeNumber__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumber__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getValueAssignment_1()); }
(rule__SchemeNumber__ValueAssignment_1)
{ after(grammarAccess.getSchemeNumberAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeNumberRadix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumberRadix__Group__0__Impl
	rule__SchemeNumberRadix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumberRadix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberRadixAccess().getNumberSignKeyword_0()); }

	KEYWORD_2 

{ after(grammarAccess.getSchemeNumberRadixAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeNumberRadix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumberRadix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumberRadix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberRadixAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getSchemeNumberRadixAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeMarkupCommand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeMarkupCommand__Group__0__Impl
	rule__SchemeMarkupCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeMarkupCommand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeMarkupCommandAccess().getNumberSignColonKeyword_0()); }

	KEYWORD_19 

{ after(grammarAccess.getSchemeMarkupCommandAccess().getNumberSignColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeMarkupCommand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeMarkupCommand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeMarkupCommand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeMarkupCommandAccess().getCommandAssignment_1()); }
(rule__SchemeMarkupCommand__CommandAssignment_1)
{ after(grammarAccess.getSchemeMarkupCommandAccess().getCommandAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BOOL__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BOOL__Group__0__Impl
	rule__BOOL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLAccess().getNumberSignKeyword_0()); }

	KEYWORD_2 

{ after(grammarAccess.getBOOLAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BOOL__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BOOL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getBOOLAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__LilyPond__ExpressionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLilyPondAccess().getExpressionsToplevelExpressionParserRuleCall_0()); }
	ruleToplevelExpression{ after(grammarAccess.getLilyPondAccess().getExpressionsToplevelExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameAlternatives_0_0()); }
(rule__Assignment__NameAlternatives_0_0)
{ after(grammarAccess.getAssignmentAccess().getNameAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getIdAlternatives_0_0()); }
(rule__PropertyAssignment__IdAlternatives_0_0)
{ after(grammarAccess.getPropertyAssignmentAccess().getIdAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getPropertyAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBlock__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSimpleBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousBlock__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSimultaneousBlockAccess().getExpressionsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Include__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getKeywordIncludeKeyword_1_0()); }
(
{ before(grammarAccess.getIncludeAccess().getKeywordIncludeKeyword_1_0()); }

	KEYWORD_27 

{ after(grammarAccess.getIncludeAccess().getKeywordIncludeKeyword_1_0()); }
)

{ after(grammarAccess.getIncludeAccess().getKeywordIncludeKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Include__ImportURIAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Version__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getKeywordVersionKeyword_1_0()); }
(
{ before(grammarAccess.getVersionAccess().getKeywordVersionKeyword_1_0()); }

	KEYWORD_28 

{ after(grammarAccess.getVersionAccess().getKeywordVersionKeyword_1_0()); }
)

{ after(grammarAccess.getVersionAccess().getKeywordVersionKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Version__VersionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getVersionSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getVersionAccess().getVersionSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__KeywordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getKeywordAlternatives_1_0()); }
(rule__Markup__KeywordAlternatives_1_0)
{ after(grammarAccess.getMarkupAccess().getKeywordAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__BlockAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getBlockMarkupBlockParserRuleCall_2_0()); }
	ruleMarkupBlock{ after(grammarAccess.getMarkupAccess().getBlockMarkupBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupBlock__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupBlockAccess().getExpressionsMarkupExpressionParserRuleCall_2_0()); }
	ruleMarkupExpression{ after(grammarAccess.getMarkupBlockAccess().getExpressionsMarkupExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupCommand__CommandAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupCommandAccess().getCommandIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMarkupCommandAccess().getCommandIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__AssignmentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getAssignmentAssignmentCrossReference_1_0()); }
(
{ before(grammarAccess.getReferenceAccess().getAssignmentAssignmentReferenceNameParserRuleCall_1_0_1()); }
	ruleReferenceName{ after(grammarAccess.getReferenceAccess().getAssignmentAssignmentReferenceNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getReferenceAccess().getAssignmentAssignmentCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Text__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextAccess().getValueAlternatives_0()); }
(rule__Text__ValueAlternatives_0)
{ after(grammarAccess.getTextAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getValueSchemeExpressionParserRuleCall_1_0()); }
	ruleSchemeExpression{ after(grammarAccess.getSchemeAccess().getValueSchemeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__QuotedAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0_0()); }
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0_0()); }

	KEYWORD_4 

{ after(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0_0()); }
)

{ after(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__QuasiquotedAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuasiquotedGraveAccentKeyword_0_1_0()); }
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuasiquotedGraveAccentKeyword_0_1_0()); }

	KEYWORD_15 

{ after(grammarAccess.getSchemeExpressionAccess().getQuasiquotedGraveAccentKeyword_0_1_0()); }
)

{ after(grammarAccess.getSchemeExpressionAccess().getQuasiquotedGraveAccentKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__UnquotedAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getUnquotedCommaKeyword_0_2_0()); }
(
{ before(grammarAccess.getSchemeExpressionAccess().getUnquotedCommaKeyword_0_2_0()); }

	KEYWORD_8 

{ after(grammarAccess.getSchemeExpressionAccess().getUnquotedCommaKeyword_0_2_0()); }
)

{ after(grammarAccess.getSchemeExpressionAccess().getUnquotedCommaKeyword_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__VariableAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getVariableDollarSignKeyword_0_3_0()); }
(
{ before(grammarAccess.getSchemeExpressionAccess().getVariableDollarSignKeyword_0_3_0()); }

	KEYWORD_3 

{ after(grammarAccess.getSchemeExpressionAccess().getVariableDollarSignKeyword_0_3_0()); }
)

{ after(grammarAccess.getSchemeExpressionAccess().getVariableDollarSignKeyword_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getValueSchemeValueParserRuleCall_1_0()); }
	ruleSchemeValue{ after(grammarAccess.getSchemeExpressionAccess().getValueSchemeValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBoolean__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBooleanAccess().getValueBOOLParserRuleCall_0()); }
	ruleBOOL{ after(grammarAccess.getSchemeBooleanAccess().getValueBOOLParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__VectorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getVectorNumberSignKeyword_1_0()); }
(
{ before(grammarAccess.getSchemeListAccess().getVectorNumberSignKeyword_1_0()); }

	KEYWORD_2 

{ after(grammarAccess.getSchemeListAccess().getVectorNumberSignKeyword_1_0()); }
)

{ after(grammarAccess.getSchemeListAccess().getVectorNumberSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__ExpressionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getExpressionsSchemeExpressionParserRuleCall_3_0()); }
	ruleSchemeExpression{ after(grammarAccess.getSchemeListAccess().getExpressionsSchemeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__ExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getExpressionsExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getSchemeBlockAccess().getExpressionsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeCharacter__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeCharacterAccess().getValueAlternatives_1_0()); }
(rule__SchemeCharacter__ValueAlternatives_1_0)
{ after(grammarAccess.getSchemeCharacterAccess().getValueAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeText__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextAccess().getValueSchemeTextLiteralsParserRuleCall_0()); }
	ruleSchemeTextLiterals{ after(grammarAccess.getSchemeTextAccess().getValueSchemeTextLiteralsParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__RadixAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getRadixSchemeNumberRadixParserRuleCall_0_0()); }
	ruleSchemeNumberRadix{ after(grammarAccess.getSchemeNumberAccess().getRadixSchemeNumberRadixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSchemeNumberAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeMarkupCommand__CommandAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeMarkupCommandAccess().getCommandIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSchemeMarkupCommandAccess().getCommandIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


