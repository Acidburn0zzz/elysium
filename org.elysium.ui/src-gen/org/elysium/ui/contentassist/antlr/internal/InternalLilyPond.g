/*
* generated by Xtext
*/
parser grammar InternalLilyPond;

options {
	tokenVocab=InternalLilyPond;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@header {
package org.elysium.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.elysium.services.LilyPondGrammarAccess;

}

@members {
 
 	private LilyPondGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'!'");
		tokenNameToValue.put("KEYWORD_2", "'#'");
		tokenNameToValue.put("KEYWORD_3", "'\''");
		tokenNameToValue.put("KEYWORD_4", "'('");
		tokenNameToValue.put("KEYWORD_5", "')'");
		tokenNameToValue.put("KEYWORD_6", "'*'");
		tokenNameToValue.put("KEYWORD_7", "'+'");
		tokenNameToValue.put("KEYWORD_8", "','");
		tokenNameToValue.put("KEYWORD_9", "'-'");
		tokenNameToValue.put("KEYWORD_10", "'.'");
		tokenNameToValue.put("KEYWORD_11", "'/'");
		tokenNameToValue.put("KEYWORD_12", "':'");
		tokenNameToValue.put("KEYWORD_13", "'<'");
		tokenNameToValue.put("KEYWORD_14", "'='");
		tokenNameToValue.put("KEYWORD_15", "'>'");
		tokenNameToValue.put("KEYWORD_16", "'?'");
		tokenNameToValue.put("KEYWORD_17", "'['");
		tokenNameToValue.put("KEYWORD_18", "'\\'");
		tokenNameToValue.put("KEYWORD_19", "']'");
		tokenNameToValue.put("KEYWORD_20", "'^'");
		tokenNameToValue.put("KEYWORD_21", "'_'");
		tokenNameToValue.put("KEYWORD_22", "'{'");
		tokenNameToValue.put("KEYWORD_23", "'|'");
		tokenNameToValue.put("KEYWORD_24", "'}'");
		tokenNameToValue.put("KEYWORD_25", "'~'");
		tokenNameToValue.put("KEYWORD_26", "'#x'");
		tokenNameToValue.put("KEYWORD_27", "'#{'");
		tokenNameToValue.put("KEYWORD_28", "'#}'");
		tokenNameToValue.put("KEYWORD_29", "'<<'");
		tokenNameToValue.put("KEYWORD_30", "'>>'");
		tokenNameToValue.put("KEYWORD_31", "'\\!'");
		tokenNameToValue.put("KEYWORD_32", "'\\('");
		tokenNameToValue.put("KEYWORD_33", "'\\)'");
		tokenNameToValue.put("KEYWORD_34", "'\\<'");
		tokenNameToValue.put("KEYWORD_35", "'\\>'");
		tokenNameToValue.put("KEYWORD_36", "'\\['");
		tokenNameToValue.put("KEYWORD_37", "'\\\\'");
		tokenNameToValue.put("KEYWORD_38", "'\\]'");
		tokenNameToValue.put("KEYWORD_39", "'\\~'");
		tokenNameToValue.put("KEYWORD_40", "'\\key'");
		tokenNameToValue.put("KEYWORD_41", "'\\new'");
		tokenNameToValue.put("KEYWORD_42", "'\\set'");
		tokenNameToValue.put("KEYWORD_43", "'\\book'");
		tokenNameToValue.put("KEYWORD_44", "'\\mark'");
		tokenNameToValue.put("KEYWORD_45", "'\\midi'");
		tokenNameToValue.put("KEYWORD_46", "'\\name'");
		tokenNameToValue.put("KEYWORD_47", "'\\once'");
		tokenNameToValue.put("KEYWORD_48", "'\\rest'");
		tokenNameToValue.put("KEYWORD_49", "'\\skip'");
		tokenNameToValue.put("KEYWORD_50", "'\\time'");
		tokenNameToValue.put("KEYWORD_51", "'\\type'");
		tokenNameToValue.put("KEYWORD_52", "'\\with'");
		tokenNameToValue.put("KEYWORD_53", "'\\alias'");
		tokenNameToValue.put("KEYWORD_54", "'\\paper'");
		tokenNameToValue.put("KEYWORD_55", "'\\score'");
		tokenNameToValue.put("KEYWORD_56", "'\\tempo'");
		tokenNameToValue.put("KEYWORD_57", "'\\unset'");
		tokenNameToValue.put("KEYWORD_58", "'\\change'");
		tokenNameToValue.put("KEYWORD_59", "'\\denies'");
		tokenNameToValue.put("KEYWORD_60", "'\\header'");
		tokenNameToValue.put("KEYWORD_61", "'\\layout'");
		tokenNameToValue.put("KEYWORD_62", "'\\markup'");
		tokenNameToValue.put("KEYWORD_63", "'\\remove'");
		tokenNameToValue.put("KEYWORD_64", "'\\repeat'");
		tokenNameToValue.put("KEYWORD_65", "'\\revert'");
		tokenNameToValue.put("KEYWORD_66", "'\\accepts'");
		tokenNameToValue.put("KEYWORD_67", "'\\context'");
		tokenNameToValue.put("KEYWORD_68", "'\\default'");
		tokenNameToValue.put("KEYWORD_69", "'\\include'");
		tokenNameToValue.put("KEYWORD_70", "'\\partial'");
		tokenNameToValue.put("KEYWORD_71", "'\\version'");
		tokenNameToValue.put("KEYWORD_72", "'\\bookpart'");
		tokenNameToValue.put("KEYWORD_73", "'\\consists'");
		tokenNameToValue.put("KEYWORD_74", "'\\override'");
		tokenNameToValue.put("KEYWORD_75", "'\\relative'");
		tokenNameToValue.put("KEYWORD_76", "'\\sequential'");
		tokenNameToValue.put("KEYWORD_77", "'\\alternative'");
		tokenNameToValue.put("KEYWORD_78", "'\\description'");
		tokenNameToValue.put("KEYWORD_79", "'\\markuplines'");
		tokenNameToValue.put("KEYWORD_80", "'\\defaultchild'");
		tokenNameToValue.put("KEYWORD_81", "'\\simultaneous'");
		tokenNameToValue.put("KEYWORD_82", "'\\sourcefileline'");
		tokenNameToValue.put("KEYWORD_83", "'\\sourcefilename'");
		tokenNameToValue.put("KEYWORD_84", "'\\grobdescriptions'");
 	}
 	
    public void setGrammarAccess(LilyPondGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleLilyPond
entryRuleLilyPond 
:
{ before(grammarAccess.getLilyPondRule()); }
	 ruleLilyPond
{ after(grammarAccess.getLilyPondRule()); } 
	 EOF 
;

// Rule LilyPond
ruleLilyPond 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLilyPondAccess().getExpressionsAssignment()); }
(rule__LilyPond__ExpressionsAssignment)*
{ after(grammarAccess.getLilyPondAccess().getExpressionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleToplevelExpression
entryRuleToplevelExpression 
:
{ before(grammarAccess.getToplevelExpressionRule()); }
	 ruleToplevelExpression
{ after(grammarAccess.getToplevelExpressionRule()); } 
	 EOF 
;

// Rule ToplevelExpression
ruleToplevelExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getToplevelExpressionAccess().getAlternatives()); }
(rule__ToplevelExpression__Alternatives)
{ after(grammarAccess.getToplevelExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScheme
entryRuleScheme 
:
{ before(grammarAccess.getSchemeRule()); }
	 ruleScheme
{ after(grammarAccess.getSchemeRule()); } 
	 EOF 
;

// Rule Scheme
ruleScheme 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeAccess().getGroup()); }
(rule__Scheme__Group__0)
{ after(grammarAccess.getSchemeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeExpression
entryRuleSchemeExpression 
:
{ before(grammarAccess.getSchemeExpressionRule()); }
	 ruleSchemeExpression
{ after(grammarAccess.getSchemeExpressionRule()); } 
	 EOF 
;

// Rule SchemeExpression
ruleSchemeExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeExpressionAccess().getGroup()); }
(rule__SchemeExpression__Group__0)
{ after(grammarAccess.getSchemeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeValue
entryRuleSchemeValue 
:
{ before(grammarAccess.getSchemeValueRule()); }
	 ruleSchemeValue
{ after(grammarAccess.getSchemeValueRule()); } 
	 EOF 
;

// Rule SchemeValue
ruleSchemeValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeValueAccess().getAlternatives()); }
(rule__SchemeValue__Alternatives)
{ after(grammarAccess.getSchemeValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeBoolean
entryRuleSchemeBoolean 
:
{ before(grammarAccess.getSchemeBooleanRule()); }
	 ruleSchemeBoolean
{ after(grammarAccess.getSchemeBooleanRule()); } 
	 EOF 
;

// Rule SchemeBoolean
ruleSchemeBoolean 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeBooleanAccess().getValueAssignment()); }
(rule__SchemeBoolean__ValueAssignment)
{ after(grammarAccess.getSchemeBooleanAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeList
entryRuleSchemeList 
:
{ before(grammarAccess.getSchemeListRule()); }
	 ruleSchemeList
{ after(grammarAccess.getSchemeListRule()); } 
	 EOF 
;

// Rule SchemeList
ruleSchemeList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeListAccess().getGroup()); }
(rule__SchemeList__Group__0)
{ after(grammarAccess.getSchemeListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeBlock
entryRuleSchemeBlock 
:
{ before(grammarAccess.getSchemeBlockRule()); }
	 ruleSchemeBlock
{ after(grammarAccess.getSchemeBlockRule()); } 
	 EOF 
;

// Rule SchemeBlock
ruleSchemeBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeBlockAccess().getGroup()); }
(rule__SchemeBlock__Group__0)
{ after(grammarAccess.getSchemeBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeText
entryRuleSchemeText 
:
{ before(grammarAccess.getSchemeTextRule()); }
	 ruleSchemeText
{ after(grammarAccess.getSchemeTextRule()); } 
	 EOF 
;

// Rule SchemeText
ruleSchemeText 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeTextAccess().getValueAssignment()); }
(rule__SchemeText__ValueAssignment)
{ after(grammarAccess.getSchemeTextAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeTextLiterals
entryRuleSchemeTextLiterals 
:
{ before(grammarAccess.getSchemeTextLiteralsRule()); }
	 ruleSchemeTextLiterals
{ after(grammarAccess.getSchemeTextLiteralsRule()); } 
	 EOF 
;

// Rule SchemeTextLiterals
ruleSchemeTextLiterals 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getAlternatives()); }
(rule__SchemeTextLiterals__Alternatives)
{ after(grammarAccess.getSchemeTextLiteralsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemeNumber
entryRuleSchemeNumber 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSchemeNumberRule()); }
	 ruleSchemeNumber
{ after(grammarAccess.getSchemeNumberRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeNumber
ruleSchemeNumber 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSchemeNumberAccess().getGroup()); }
(rule__SchemeNumber__Group__0)
{ after(grammarAccess.getSchemeNumberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleContextDefinition
entryRuleContextDefinition 
:
{ before(grammarAccess.getContextDefinitionRule()); }
	 ruleContextDefinition
{ after(grammarAccess.getContextDefinitionRule()); } 
	 EOF 
;

// Rule ContextDefinition
ruleContextDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContextDefinitionAccess().getGroup()); }
(rule__ContextDefinition__Group__0)
{ after(grammarAccess.getContextDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContextDefinitionElement
entryRuleContextDefinitionElement 
:
{ before(grammarAccess.getContextDefinitionElementRule()); }
	 ruleContextDefinitionElement
{ after(grammarAccess.getContextDefinitionElementRule()); } 
	 EOF 
;

// Rule ContextDefinitionElement
ruleContextDefinitionElement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContextDefinitionElementAccess().getAlternatives()); }
(rule__ContextDefinitionElement__Alternatives)
{ after(grammarAccess.getContextDefinitionElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGrobDescriptions
entryRuleGrobDescriptions 
:
{ before(grammarAccess.getGrobDescriptionsRule()); }
	 ruleGrobDescriptions
{ after(grammarAccess.getGrobDescriptionsRule()); } 
	 EOF 
;

// Rule GrobDescriptions
ruleGrobDescriptions 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGrobDescriptionsAccess().getGroup()); }
(rule__GrobDescriptions__Group__0)
{ after(grammarAccess.getGrobDescriptionsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHeader
entryRuleHeader 
:
{ before(grammarAccess.getHeaderRule()); }
	 ruleHeader
{ after(grammarAccess.getHeaderRule()); } 
	 EOF 
;

// Rule Header
ruleHeader 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getHeaderAccess().getGroup()); }
(rule__Header__Group__0)
{ after(grammarAccess.getHeaderAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyAssignment
entryRulePropertyAssignment 
:
{ before(grammarAccess.getPropertyAssignmentRule()); }
	 rulePropertyAssignment
{ after(grammarAccess.getPropertyAssignmentRule()); } 
	 EOF 
;

// Rule PropertyAssignment
rulePropertyAssignment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPropertyAssignmentAccess().getGroup()); }
(rule__PropertyAssignment__Group__0)
{ after(grammarAccess.getPropertyAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutputDefinition
entryRuleOutputDefinition 
:
{ before(grammarAccess.getOutputDefinitionRule()); }
	 ruleOutputDefinition
{ after(grammarAccess.getOutputDefinitionRule()); } 
	 EOF 
;

// Rule OutputDefinition
ruleOutputDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOutputDefinitionAccess().getAlternatives()); }
(rule__OutputDefinition__Alternatives)
{ after(grammarAccess.getOutputDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutputDefinitionElement
entryRuleOutputDefinitionElement 
:
{ before(grammarAccess.getOutputDefinitionElementRule()); }
	 ruleOutputDefinitionElement
{ after(grammarAccess.getOutputDefinitionElementRule()); } 
	 EOF 
;

// Rule OutputDefinitionElement
ruleOutputDefinitionElement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOutputDefinitionElementAccess().getAlternatives()); }
(rule__OutputDefinitionElement__Alternatives)
{ after(grammarAccess.getOutputDefinitionElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePaper
entryRulePaper 
:
{ before(grammarAccess.getPaperRule()); }
	 rulePaper
{ after(grammarAccess.getPaperRule()); } 
	 EOF 
;

// Rule Paper
rulePaper 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPaperAccess().getGroup()); }
(rule__Paper__Group__0)
{ after(grammarAccess.getPaperAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMidi
entryRuleMidi 
:
{ before(grammarAccess.getMidiRule()); }
	 ruleMidi
{ after(grammarAccess.getMidiRule()); } 
	 EOF 
;

// Rule Midi
ruleMidi 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMidiAccess().getGroup()); }
(rule__Midi__Group__0)
{ after(grammarAccess.getMidiAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLayout
entryRuleLayout 
:
{ before(grammarAccess.getLayoutRule()); }
	 ruleLayout
{ after(grammarAccess.getLayoutRule()); } 
	 EOF 
;

// Rule Layout
ruleLayout 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLayoutAccess().getGroup()); }
(rule__Layout__Group__0)
{ after(grammarAccess.getLayoutAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScore
entryRuleScore 
:
{ before(grammarAccess.getScoreRule()); }
	 ruleScore
{ after(grammarAccess.getScoreRule()); } 
	 EOF 
;

// Rule Score
ruleScore 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getScoreAccess().getGroup()); }
(rule__Score__Group__0)
{ after(grammarAccess.getScoreAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScoreElement
entryRuleScoreElement 
:
{ before(grammarAccess.getScoreElementRule()); }
	 ruleScoreElement
{ after(grammarAccess.getScoreElementRule()); } 
	 EOF 
;

// Rule ScoreElement
ruleScoreElement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getScoreElementAccess().getAlternatives()); }
(rule__ScoreElement__Alternatives)
{ after(grammarAccess.getScoreElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBook
entryRuleBook 
:
{ before(grammarAccess.getBookRule()); }
	 ruleBook
{ after(grammarAccess.getBookRule()); } 
	 EOF 
;

// Rule Book
ruleBook 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBookAccess().getGroup()); }
(rule__Book__Group__0)
{ after(grammarAccess.getBookAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBookElement
entryRuleBookElement 
:
{ before(grammarAccess.getBookElementRule()); }
	 ruleBookElement
{ after(grammarAccess.getBookElementRule()); } 
	 EOF 
;

// Rule BookElement
ruleBookElement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBookElementAccess().getAlternatives()); }
(rule__BookElement__Alternatives)
{ after(grammarAccess.getBookElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBookPart
entryRuleBookPart 
:
{ before(grammarAccess.getBookPartRule()); }
	 ruleBookPart
{ after(grammarAccess.getBookPartRule()); } 
	 EOF 
;

// Rule BookPart
ruleBookPart 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBookPartAccess().getGroup()); }
(rule__BookPart__Group__0)
{ after(grammarAccess.getBookPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBookPartElement
entryRuleBookPartElement 
:
{ before(grammarAccess.getBookPartElementRule()); }
	 ruleBookPartElement
{ after(grammarAccess.getBookPartElementRule()); } 
	 EOF 
;

// Rule BookPartElement
ruleBookPartElement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBookPartElementAccess().getAlternatives()); }
(rule__BookPartElement__Alternatives)
{ after(grammarAccess.getBookPartElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMarkup
entryRuleMarkup 
:
{ before(grammarAccess.getMarkupRule()); }
	 ruleMarkup
{ after(grammarAccess.getMarkupRule()); } 
	 EOF 
;

// Rule Markup
ruleMarkup 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMarkupAccess().getGroup()); }
(rule__Markup__Group__0)
{ after(grammarAccess.getMarkupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMarkupLines
entryRuleMarkupLines 
:
{ before(grammarAccess.getMarkupLinesRule()); }
	 ruleMarkupLines
{ after(grammarAccess.getMarkupLinesRule()); } 
	 EOF 
;

// Rule MarkupLines
ruleMarkupLines 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMarkupLinesAccess().getGroup()); }
(rule__MarkupLines__Group__0)
{ after(grammarAccess.getMarkupLinesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVersion
entryRuleVersion 
:
{ before(grammarAccess.getVersionRule()); }
	 ruleVersion
{ after(grammarAccess.getVersionRule()); } 
	 EOF 
;

// Rule Version
ruleVersion 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVersionAccess().getGroup()); }
(rule__Version__Group__0)
{ after(grammarAccess.getVersionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInclude
entryRuleInclude 
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIncludeAccess().getGroup()); }
(rule__Include__Group__0)
{ after(grammarAccess.getIncludeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSourceFileName
entryRuleSourceFileName 
:
{ before(grammarAccess.getSourceFileNameRule()); }
	 ruleSourceFileName
{ after(grammarAccess.getSourceFileNameRule()); } 
	 EOF 
;

// Rule SourceFileName
ruleSourceFileName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSourceFileNameAccess().getGroup()); }
(rule__SourceFileName__Group__0)
{ after(grammarAccess.getSourceFileNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSourceFileLine
entryRuleSourceFileLine 
:
{ before(grammarAccess.getSourceFileLineRule()); }
	 ruleSourceFileLine
{ after(grammarAccess.getSourceFileLineRule()); } 
	 EOF 
;

// Rule SourceFileLine
ruleSourceFileLine 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSourceFileLineAccess().getGroup()); }
(rule__SourceFileLine__Group__0)
{ after(grammarAccess.getSourceFileLineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMusic
entryRuleMusic 
:
{ before(grammarAccess.getMusicRule()); }
	 ruleMusic
{ after(grammarAccess.getMusicRule()); } 
	 EOF 
;

// Rule Music
ruleMusic 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMusicAccess().getAlternatives()); }
(rule__Music__Alternatives)
{ after(grammarAccess.getMusicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleMusic
entryRuleSimpleMusic 
:
{ before(grammarAccess.getSimpleMusicRule()); }
	 ruleSimpleMusic
{ after(grammarAccess.getSimpleMusicRule()); } 
	 EOF 
;

// Rule SimpleMusic
ruleSimpleMusic 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimpleMusicAccess().getAlternatives()); }
(rule__SimpleMusic__Alternatives)
{ after(grammarAccess.getSimpleMusicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEventAccess().getAlternatives()); }
(rule__Event__Alternatives)
{ after(grammarAccess.getEventAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNote
entryRuleNote 
:
{ before(grammarAccess.getNoteRule()); }
	 ruleNote
{ after(grammarAccess.getNoteRule()); } 
	 EOF 
;

// Rule Note
ruleNote 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNoteAccess().getGroup()); }
(rule__Note__Group__0)
{ after(grammarAccess.getNoteAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePitch
entryRulePitch 
:
{ before(grammarAccess.getPitchRule()); }
	 rulePitch
{ after(grammarAccess.getPitchRule()); } 
	 EOF 
;

// Rule Pitch
rulePitch 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPitchAccess().getGroup()); }
(rule__Pitch__Group__0)
{ after(grammarAccess.getPitchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOctave
entryRuleOctave 
:
{ before(grammarAccess.getOctaveRule()); }
	 ruleOctave
{ after(grammarAccess.getOctaveRule()); } 
	 EOF 
;

// Rule Octave
ruleOctave 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOctaveAccess().getAlternatives()); }
(rule__Octave__Alternatives)
{ after(grammarAccess.getOctaveAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRest
entryRuleRest 
:
{ before(grammarAccess.getRestRule()); }
	 ruleRest
{ after(grammarAccess.getRestRule()); } 
	 EOF 
;

// Rule Rest
ruleRest 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRestAccess().getGroup()); }
(rule__Rest__Group__0)
{ after(grammarAccess.getRestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChord
entryRuleChord 
:
{ before(grammarAccess.getChordRule()); }
	 ruleChord
{ after(grammarAccess.getChordRule()); } 
	 EOF 
;

// Rule Chord
ruleChord 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getChordAccess().getGroup()); }
(rule__Chord__Group__0)
{ after(grammarAccess.getChordAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostEvent
entryRulePostEvent 
:
{ before(grammarAccess.getPostEventRule()); }
	 rulePostEvent
{ after(grammarAccess.getPostEventRule()); } 
	 EOF 
;

// Rule PostEvent
rulePostEvent 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPostEventAccess().getAlternatives()); }
(rule__PostEvent__Alternatives)
{ after(grammarAccess.getPostEventAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventWithRequiredDirection
entryRuleEventWithRequiredDirection 
:
{ before(grammarAccess.getEventWithRequiredDirectionRule()); }
	 ruleEventWithRequiredDirection
{ after(grammarAccess.getEventWithRequiredDirectionRule()); } 
	 EOF 
;

// Rule EventWithRequiredDirection
ruleEventWithRequiredDirection 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEventWithRequiredDirectionAccess().getAlternatives()); }
(rule__EventWithRequiredDirection__Alternatives)
{ after(grammarAccess.getEventWithRequiredDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGenTextDef
entryRuleGenTextDef 
:
{ before(grammarAccess.getGenTextDefRule()); }
	 ruleGenTextDef
{ after(grammarAccess.getGenTextDefRule()); } 
	 EOF 
;

// Rule GenTextDef
ruleGenTextDef 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGenTextDefAccess().getAlternatives()); }
(rule__GenTextDef__Alternatives)
{ after(grammarAccess.getGenTextDefAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventWithOptionalDirection
entryRuleEventWithOptionalDirection 
:
{ before(grammarAccess.getEventWithOptionalDirectionRule()); }
	 ruleEventWithOptionalDirection
{ after(grammarAccess.getEventWithOptionalDirectionRule()); } 
	 EOF 
;

// Rule EventWithOptionalDirection
ruleEventWithOptionalDirection 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEventWithOptionalDirectionAccess().getAlternatives()); }
(rule__EventWithOptionalDirection__Alternatives)
{ after(grammarAccess.getEventWithOptionalDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTremolo
entryRuleTremolo 
:
{ before(grammarAccess.getTremoloRule()); }
	 ruleTremolo
{ after(grammarAccess.getTremoloRule()); } 
	 EOF 
;

// Rule Tremolo
ruleTremolo 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTremoloAccess().getGroup()); }
(rule__Tremolo__Group__0)
{ after(grammarAccess.getTremoloAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeySignature
entryRuleKeySignature 
:
{ before(grammarAccess.getKeySignatureRule()); }
	 ruleKeySignature
{ after(grammarAccess.getKeySignatureRule()); } 
	 EOF 
;

// Rule KeySignature
ruleKeySignature 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getKeySignatureAccess().getGroup()); }
(rule__KeySignature__Group__0)
{ after(grammarAccess.getKeySignatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeSignature
entryRuleTimeSignature 
:
{ before(grammarAccess.getTimeSignatureRule()); }
	 ruleTimeSignature
{ after(grammarAccess.getTimeSignatureRule()); } 
	 EOF 
;

// Rule TimeSignature
ruleTimeSignature 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTimeSignatureAccess().getGroup()); }
(rule__TimeSignature__Group__0)
{ after(grammarAccess.getTimeSignatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTempo
entryRuleTempo 
:
{ before(grammarAccess.getTempoRule()); }
	 ruleTempo
{ after(grammarAccess.getTempoRule()); } 
	 EOF 
;

// Rule Tempo
ruleTempo 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTempoAccess().getGroup()); }
(rule__Tempo__Group__0)
{ after(grammarAccess.getTempoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTempoLabel
entryRuleTempoLabel 
:
{ before(grammarAccess.getTempoLabelRule()); }
	 ruleTempoLabel
{ after(grammarAccess.getTempoLabelRule()); } 
	 EOF 
;

// Rule TempoLabel
ruleTempoLabel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTempoLabelAccess().getAlternatives()); }
(rule__TempoLabel__Alternatives)
{ after(grammarAccess.getTempoLabelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTempoValue
entryRuleTempoValue 
:
{ before(grammarAccess.getTempoValueRule()); }
	 ruleTempoValue
{ after(grammarAccess.getTempoValueRule()); } 
	 EOF 
;

// Rule TempoValue
ruleTempoValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTempoValueAccess().getGroup()); }
(rule__TempoValue__Group__0)
{ after(grammarAccess.getTempoValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePartial
entryRulePartial 
:
{ before(grammarAccess.getPartialRule()); }
	 rulePartial
{ after(grammarAccess.getPartialRule()); } 
	 EOF 
;

// Rule Partial
rulePartial 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPartialAccess().getGroup()); }
(rule__Partial__Group__0)
{ after(grammarAccess.getPartialAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMark
entryRuleMark 
:
{ before(grammarAccess.getMarkRule()); }
	 ruleMark
{ after(grammarAccess.getMarkRule()); } 
	 EOF 
;

// Rule Mark
ruleMark 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMarkAccess().getGroup()); }
(rule__Mark__Group__0)
{ after(grammarAccess.getMarkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSkip
entryRuleSkip 
:
{ before(grammarAccess.getSkipRule()); }
	 ruleSkip
{ after(grammarAccess.getSkipRule()); } 
	 EOF 
;

// Rule Skip
ruleSkip 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSkipAccess().getGroup()); }
(rule__Skip__Group__0)
{ after(grammarAccess.getSkipAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTie
entryRuleTie 
:
{ before(grammarAccess.getTieRule()); }
	 ruleTie
{ after(grammarAccess.getTieRule()); } 
	 EOF 
;

// Rule Tie
ruleTie 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTieAccess().getGroup()); }
(rule__Tie__Group__0)
{ after(grammarAccess.getTieAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBeamStart
entryRuleBeamStart 
:
{ before(grammarAccess.getBeamStartRule()); }
	 ruleBeamStart
{ after(grammarAccess.getBeamStartRule()); } 
	 EOF 
;

// Rule BeamStart
ruleBeamStart 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBeamStartAccess().getGroup()); }
(rule__BeamStart__Group__0)
{ after(grammarAccess.getBeamStartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBeamEnd
entryRuleBeamEnd 
:
{ before(grammarAccess.getBeamEndRule()); }
	 ruleBeamEnd
{ after(grammarAccess.getBeamEndRule()); } 
	 EOF 
;

// Rule BeamEnd
ruleBeamEnd 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBeamEndAccess().getGroup()); }
(rule__BeamEnd__Group__0)
{ after(grammarAccess.getBeamEndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBarCheck
entryRuleBarCheck 
:
{ before(grammarAccess.getBarCheckRule()); }
	 ruleBarCheck
{ after(grammarAccess.getBarCheckRule()); } 
	 EOF 
;

// Rule BarCheck
ruleBarCheck 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBarCheckAccess().getGroup()); }
(rule__BarCheck__Group__0)
{ after(grammarAccess.getBarCheckAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReference
entryRuleReference 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Reference
ruleReference 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getReferenceAccess().getGroup()); }
(rule__Reference__Group__0)
{ after(grammarAccess.getReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleCompositeMusic
entryRuleCompositeMusic 
:
{ before(grammarAccess.getCompositeMusicRule()); }
	 ruleCompositeMusic
{ after(grammarAccess.getCompositeMusicRule()); } 
	 EOF 
;

// Rule CompositeMusic
ruleCompositeMusic 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCompositeMusicAccess().getAlternatives()); }
(rule__CompositeMusic__Alternatives)
{ after(grammarAccess.getCompositeMusicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequentialMusic
entryRuleSequentialMusic 
:
{ before(grammarAccess.getSequentialMusicRule()); }
	 ruleSequentialMusic
{ after(grammarAccess.getSequentialMusicRule()); } 
	 EOF 
;

// Rule SequentialMusic
ruleSequentialMusic 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSequentialMusicAccess().getGroup()); }
(rule__SequentialMusic__Group__0)
{ after(grammarAccess.getSequentialMusicAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimultaneousMusic
entryRuleSimultaneousMusic 
:
{ before(grammarAccess.getSimultaneousMusicRule()); }
	 ruleSimultaneousMusic
{ after(grammarAccess.getSimultaneousMusicRule()); } 
	 EOF 
;

// Rule SimultaneousMusic
ruleSimultaneousMusic 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimultaneousMusicAccess().getGroup()); }
(rule__SimultaneousMusic__Group__0)
{ after(grammarAccess.getSimultaneousMusicAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNewContext
entryRuleNewContext 
:
{ before(grammarAccess.getNewContextRule()); }
	 ruleNewContext
{ after(grammarAccess.getNewContextRule()); } 
	 EOF 
;

// Rule NewContext
ruleNewContext 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNewContextAccess().getGroup()); }
(rule__NewContext__Group__0)
{ after(grammarAccess.getNewContextAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContextModification
entryRuleContextModification 
:
{ before(grammarAccess.getContextModificationRule()); }
	 ruleContextModification
{ after(grammarAccess.getContextModificationRule()); } 
	 EOF 
;

// Rule ContextModification
ruleContextModification 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContextModificationAccess().getGroup()); }
(rule__ContextModification__Group__0)
{ after(grammarAccess.getContextModificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContextModifier
entryRuleContextModifier 
:
{ before(grammarAccess.getContextModifierRule()); }
	 ruleContextModifier
{ after(grammarAccess.getContextModifierRule()); } 
	 EOF 
;

// Rule ContextModifier
ruleContextModifier 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContextModifierAccess().getAlternatives()); }
(rule__ContextModifier__Alternatives)
{ after(grammarAccess.getContextModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyOperation
entryRulePropertyOperation 
:
{ before(grammarAccess.getPropertyOperationRule()); }
	 rulePropertyOperation
{ after(grammarAccess.getPropertyOperationRule()); } 
	 EOF 
;

// Rule PropertyOperation
rulePropertyOperation 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPropertyOperationAccess().getAlternatives()); }
(rule__PropertyOperation__Alternatives)
{ after(grammarAccess.getPropertyOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetProperty
entryRuleSetProperty 
:
{ before(grammarAccess.getSetPropertyRule()); }
	 ruleSetProperty
{ after(grammarAccess.getSetPropertyRule()); } 
	 EOF 
;

// Rule SetProperty
ruleSetProperty 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetPropertyAccess().getGroup()); }
(rule__SetProperty__Group__0)
{ after(grammarAccess.getSetPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScalar
entryRuleScalar 
:
{ before(grammarAccess.getScalarRule()); }
	 ruleScalar
{ after(grammarAccess.getScalarRule()); } 
	 EOF 
;

// Rule Scalar
ruleScalar 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getScalarAccess().getAlternatives()); }
(rule__Scalar__Alternatives)
{ after(grammarAccess.getScalarAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnsetProperty
entryRuleUnsetProperty 
:
{ before(grammarAccess.getUnsetPropertyRule()); }
	 ruleUnsetProperty
{ after(grammarAccess.getUnsetPropertyRule()); } 
	 EOF 
;

// Rule UnsetProperty
ruleUnsetProperty 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnsetPropertyAccess().getGroup()); }
(rule__UnsetProperty__Group__0)
{ after(grammarAccess.getUnsetPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOverrideProperty
entryRuleOverrideProperty 
:
{ before(grammarAccess.getOverridePropertyRule()); }
	 ruleOverrideProperty
{ after(grammarAccess.getOverridePropertyRule()); } 
	 EOF 
;

// Rule OverrideProperty
ruleOverrideProperty 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOverridePropertyAccess().getGroup()); }
(rule__OverrideProperty__Group__0)
{ after(grammarAccess.getOverridePropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRevertProperty
entryRuleRevertProperty 
:
{ before(grammarAccess.getRevertPropertyRule()); }
	 ruleRevertProperty
{ after(grammarAccess.getRevertPropertyRule()); } 
	 EOF 
;

// Rule RevertProperty
ruleRevertProperty 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRevertPropertyAccess().getGroup()); }
(rule__RevertProperty__Group__0)
{ after(grammarAccess.getRevertPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContextDefaultModifier
entryRuleContextDefaultModifier 
:
{ before(grammarAccess.getContextDefaultModifierRule()); }
	 ruleContextDefaultModifier
{ after(grammarAccess.getContextDefaultModifierRule()); } 
	 EOF 
;

// Rule ContextDefaultModifier
ruleContextDefaultModifier 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContextDefaultModifierAccess().getGroup()); }
(rule__ContextDefaultModifier__Group__0)
{ after(grammarAccess.getContextDefaultModifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContextDefaultModifierType
entryRuleContextDefaultModifierType 
:
{ before(grammarAccess.getContextDefaultModifierTypeRule()); }
	 ruleContextDefaultModifierType
{ after(grammarAccess.getContextDefaultModifierTypeRule()); } 
	 EOF 
;

// Rule ContextDefaultModifierType
ruleContextDefaultModifierType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getGroup()); }
(rule__ContextDefaultModifierType__Group__0)
{ after(grammarAccess.getContextDefaultModifierTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelativeMusic
entryRuleRelativeMusic 
:
{ before(grammarAccess.getRelativeMusicRule()); }
	 ruleRelativeMusic
{ after(grammarAccess.getRelativeMusicRule()); } 
	 EOF 
;

// Rule RelativeMusic
ruleRelativeMusic 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRelativeMusicAccess().getGroup()); }
(rule__RelativeMusic__Group__0)
{ after(grammarAccess.getRelativeMusicAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRepeatedMusic
entryRuleRepeatedMusic 
:
{ before(grammarAccess.getRepeatedMusicRule()); }
	 ruleRepeatedMusic
{ after(grammarAccess.getRepeatedMusicRule()); } 
	 EOF 
;

// Rule RepeatedMusic
ruleRepeatedMusic 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRepeatedMusicAccess().getGroup()); }
(rule__RepeatedMusic__Group__0)
{ after(grammarAccess.getRepeatedMusicAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlternativeMusic
entryRuleAlternativeMusic 
:
{ before(grammarAccess.getAlternativeMusicRule()); }
	 ruleAlternativeMusic
{ after(grammarAccess.getAlternativeMusicRule()); } 
	 EOF 
;

// Rule AlternativeMusic
ruleAlternativeMusic 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAlternativeMusicAccess().getGroup()); }
(rule__AlternativeMusic__Group__0)
{ after(grammarAccess.getAlternativeMusicAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMusicOrScheme
entryRuleMusicOrScheme 
:
{ before(grammarAccess.getMusicOrSchemeRule()); }
	 ruleMusicOrScheme
{ after(grammarAccess.getMusicOrSchemeRule()); } 
	 EOF 
;

// Rule MusicOrScheme
ruleMusicOrScheme 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMusicOrSchemeAccess().getAlternatives()); }
(rule__MusicOrScheme__Alternatives)
{ after(grammarAccess.getMusicOrSchemeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDuration
entryRuleDuration 
:
{ before(grammarAccess.getDurationRule()); }
	 ruleDuration
{ after(grammarAccess.getDurationRule()); } 
	 EOF 
;

// Rule Duration
ruleDuration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDurationAccess().getGroup()); }
(rule__Duration__Group__0)
{ after(grammarAccess.getDurationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDurationMultiplier
entryRuleDurationMultiplier 
:
{ before(grammarAccess.getDurationMultiplierRule()); }
	 ruleDurationMultiplier
{ after(grammarAccess.getDurationMultiplierRule()); } 
	 EOF 
;

// Rule DurationMultiplier
ruleDurationMultiplier 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDurationMultiplierAccess().getGroup()); }
(rule__DurationMultiplier__Group__0)
{ after(grammarAccess.getDurationMultiplierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFraction
entryRuleFraction 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getFractionRule()); }
	 ruleFraction
{ after(grammarAccess.getFractionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Fraction
ruleFraction 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFractionAccess().getGroup()); }
(rule__Fraction__Group__0)
{ after(grammarAccess.getFractionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleFractionOrNumber
entryRuleFractionOrNumber 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getFractionOrNumberRule()); }
	 ruleFractionOrNumber
{ after(grammarAccess.getFractionOrNumberRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FractionOrNumber
ruleFractionOrNumber 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFractionOrNumberAccess().getGroup()); }
(rule__FractionOrNumber__Group__0)
{ after(grammarAccess.getFractionOrNumberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleContextChange
entryRuleContextChange 
:
{ before(grammarAccess.getContextChangeRule()); }
	 ruleContextChange
{ after(grammarAccess.getContextChangeRule()); } 
	 EOF 
;

// Rule ContextChange
ruleContextChange 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContextChangeAccess().getGroup()); }
(rule__ContextChange__Group__0)
{ after(grammarAccess.getContextChangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMusicPropertyDefinition
entryRuleMusicPropertyDefinition 
:
{ before(grammarAccess.getMusicPropertyDefinitionRule()); }
	 ruleMusicPropertyDefinition
{ after(grammarAccess.getMusicPropertyDefinitionRule()); } 
	 EOF 
;

// Rule MusicPropertyDefinition
ruleMusicPropertyDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMusicPropertyDefinitionAccess().getGroup()); }
(rule__MusicPropertyDefinition__Group__0)
{ after(grammarAccess.getMusicPropertyDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMusicPropertyOperation
entryRuleMusicPropertyOperation 
:
{ before(grammarAccess.getMusicPropertyOperationRule()); }
	 ruleMusicPropertyOperation
{ after(grammarAccess.getMusicPropertyOperationRule()); } 
	 EOF 
;

// Rule MusicPropertyOperation
ruleMusicPropertyOperation 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMusicPropertyOperationAccess().getAlternatives()); }
(rule__MusicPropertyOperation__Alternatives)
{ after(grammarAccess.getMusicPropertyOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOverrideMusicProperty
entryRuleOverrideMusicProperty 
:
{ before(grammarAccess.getOverrideMusicPropertyRule()); }
	 ruleOverrideMusicProperty
{ after(grammarAccess.getOverrideMusicPropertyRule()); } 
	 EOF 
;

// Rule OverrideMusicProperty
ruleOverrideMusicProperty 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOverrideMusicPropertyAccess().getGroup()); }
(rule__OverrideMusicProperty__Group__0)
{ after(grammarAccess.getOverrideMusicPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRevertMusicProperty
entryRuleRevertMusicProperty 
:
{ before(grammarAccess.getRevertMusicPropertyRule()); }
	 ruleRevertMusicProperty
{ after(grammarAccess.getRevertMusicPropertyRule()); } 
	 EOF 
;

// Rule RevertMusicProperty
ruleRevertMusicProperty 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRevertMusicPropertyAccess().getGroup()); }
(rule__RevertMusicProperty__Group__0)
{ after(grammarAccess.getRevertMusicPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetMusicProperty
entryRuleSetMusicProperty 
:
{ before(grammarAccess.getSetMusicPropertyRule()); }
	 ruleSetMusicProperty
{ after(grammarAccess.getSetMusicPropertyRule()); } 
	 EOF 
;

// Rule SetMusicProperty
ruleSetMusicProperty 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetMusicPropertyAccess().getGroup()); }
(rule__SetMusicProperty__Group__0)
{ after(grammarAccess.getSetMusicPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnsetMusicProperty
entryRuleUnsetMusicProperty 
:
{ before(grammarAccess.getUnsetMusicPropertyRule()); }
	 ruleUnsetMusicProperty
{ after(grammarAccess.getUnsetMusicPropertyRule()); } 
	 EOF 
;

// Rule UnsetMusicProperty
ruleUnsetMusicProperty 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnsetMusicPropertyAccess().getGroup()); }
(rule__UnsetMusicProperty__Group__0)
{ after(grammarAccess.getUnsetMusicPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContextPropertySpecification
entryRuleContextPropertySpecification 
:
{ before(grammarAccess.getContextPropertySpecificationRule()); }
	 ruleContextPropertySpecification
{ after(grammarAccess.getContextPropertySpecificationRule()); } 
	 EOF 
;

// Rule ContextPropertySpecification
ruleContextPropertySpecification 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContextPropertySpecificationAccess().getGroup()); }
(rule__ContextPropertySpecification__Group__0)
{ after(grammarAccess.getContextPropertySpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdOrString
entryRuleIdOrString 
:
{ before(grammarAccess.getIdOrStringRule()); }
	 ruleIdOrString
{ after(grammarAccess.getIdOrStringRule()); } 
	 EOF 
;

// Rule IdOrString
ruleIdOrString 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIdOrStringAccess().getAlternatives()); }
(rule__IdOrString__Alternatives)
{ after(grammarAccess.getIdOrStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Direction
ruleDirection
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectionAccess().getAlternatives()); }
(rule__Direction__Alternatives)
{ after(grammarAccess.getDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ScriptWithRequiredDirection
ruleScriptWithRequiredDirection
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptWithRequiredDirectionAccess().getAlternatives()); }
(rule__ScriptWithRequiredDirection__Alternatives)
{ after(grammarAccess.getScriptWithRequiredDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ScriptWithOptionalDirection
ruleScriptWithOptionalDirection
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getAlternatives()); }
(rule__ScriptWithOptionalDirection__Alternatives)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ToplevelExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToplevelExpressionAccess().getAssignmentParserRuleCall_0()); }
	ruleAssignment
{ after(grammarAccess.getToplevelExpressionAccess().getAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getSchemeParserRuleCall_1()); }
	ruleScheme
{ after(grammarAccess.getToplevelExpressionAccess().getSchemeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getHeaderParserRuleCall_2()); }
	ruleHeader
{ after(grammarAccess.getToplevelExpressionAccess().getHeaderParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getBookParserRuleCall_3()); }
	ruleBook
{ after(grammarAccess.getToplevelExpressionAccess().getBookParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getBookPartParserRuleCall_4()); }
	ruleBookPart
{ after(grammarAccess.getToplevelExpressionAccess().getBookPartParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getScoreParserRuleCall_5()); }
	ruleScore
{ after(grammarAccess.getToplevelExpressionAccess().getScoreParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getCompositeMusicParserRuleCall_6()); }
	ruleCompositeMusic
{ after(grammarAccess.getToplevelExpressionAccess().getCompositeMusicParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getMarkupParserRuleCall_7()); }
	ruleMarkup
{ after(grammarAccess.getToplevelExpressionAccess().getMarkupParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getMarkupLinesParserRuleCall_8()); }
	ruleMarkupLines
{ after(grammarAccess.getToplevelExpressionAccess().getMarkupLinesParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getOutputDefinitionParserRuleCall_9()); }
	ruleOutputDefinition
{ after(grammarAccess.getToplevelExpressionAccess().getOutputDefinitionParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getVersionParserRuleCall_10()); }
	ruleVersion
{ after(grammarAccess.getToplevelExpressionAccess().getVersionParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getIncludeParserRuleCall_11()); }
	ruleInclude
{ after(grammarAccess.getToplevelExpressionAccess().getIncludeParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getSourceFileNameParserRuleCall_12()); }
	ruleSourceFileName
{ after(grammarAccess.getToplevelExpressionAccess().getSourceFileNameParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getToplevelExpressionAccess().getSourceFileLineParserRuleCall_13()); }
	ruleSourceFileLine
{ after(grammarAccess.getToplevelExpressionAccess().getSourceFileLineParserRuleCall_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getScoreParserRuleCall_0()); }
	ruleScore
{ after(grammarAccess.getValueAccess().getScoreParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBookParserRuleCall_1()); }
	ruleBook
{ after(grammarAccess.getValueAccess().getBookParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBookPartParserRuleCall_2()); }
	ruleBookPart
{ after(grammarAccess.getValueAccess().getBookPartParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getOutputDefinitionParserRuleCall_3()); }
	ruleOutputDefinition
{ after(grammarAccess.getValueAccess().getOutputDefinitionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getValueAccess().getContextDefinitionParserRuleCall_4()); }
	ruleContextDefinition
{ after(grammarAccess.getValueAccess().getContextDefinitionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getValueAccess().getMusicParserRuleCall_5()); }
	ruleMusic
{ after(grammarAccess.getValueAccess().getMusicParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getValueAccess().getPostEventParserRuleCall_6()); }
	rulePostEvent
{ after(grammarAccess.getValueAccess().getPostEventParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_7()); }
	RULE_STRING
{ after(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_7()); }
)

    |(
{ before(grammarAccess.getValueAccess().getSchemeParserRuleCall_8()); }
	ruleScheme
{ after(grammarAccess.getValueAccess().getSchemeParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getValueAccess().getMarkupParserRuleCall_9()); }
	ruleMarkup
{ after(grammarAccess.getValueAccess().getMarkupParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getValueAccess().getINTTerminalRuleCall_10()); }
	RULE_INT
{ after(grammarAccess.getValueAccess().getINTTerminalRuleCall_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeValueAccess().getSchemeBooleanParserRuleCall_0()); }
	ruleSchemeBoolean
{ after(grammarAccess.getSchemeValueAccess().getSchemeBooleanParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeListParserRuleCall_1()); }
	ruleSchemeList
{ after(grammarAccess.getSchemeValueAccess().getSchemeListParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeBlockParserRuleCall_2()); }
	ruleSchemeBlock
{ after(grammarAccess.getSchemeValueAccess().getSchemeBlockParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeTextParserRuleCall_3()); }
	ruleSchemeText
{ after(grammarAccess.getSchemeValueAccess().getSchemeTextParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSchemeValueAccess().getSchemeNumberParserRuleCall_4()); }
	ruleSchemeNumber
{ after(grammarAccess.getSchemeValueAccess().getSchemeNumberParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeTextLiterals__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getReverseSolidusReverseSolidusKeyword_0()); }

	KEYWORD_37 

{ after(grammarAccess.getSchemeTextLiteralsAccess().getReverseSolidusReverseSolidusKeyword_0()); }
)

    |(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getIdOrStringParserRuleCall_1()); }
	ruleIdOrString
{ after(grammarAccess.getSchemeTextLiteralsAccess().getIdOrStringParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSchemeTextLiteralsAccess().getANY_OTHERTerminalRuleCall_2()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getSchemeTextLiteralsAccess().getANY_OTHERTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefinitionElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefinitionElementAccess().getGrobDescriptionsParserRuleCall_0()); }
	ruleGrobDescriptions
{ after(grammarAccess.getContextDefinitionElementAccess().getGrobDescriptionsParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getContextDefinitionElementAccess().getContextModifierParserRuleCall_1()); }
	ruleContextModifier
{ after(grammarAccess.getContextDefinitionElementAccess().getContextModifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDefinitionAccess().getPaperParserRuleCall_0()); }
	rulePaper
{ after(grammarAccess.getOutputDefinitionAccess().getPaperParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOutputDefinitionAccess().getMidiParserRuleCall_1()); }
	ruleMidi
{ after(grammarAccess.getOutputDefinitionAccess().getMidiParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getOutputDefinitionAccess().getLayoutParserRuleCall_2()); }
	ruleLayout
{ after(grammarAccess.getOutputDefinitionAccess().getLayoutParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDefinitionElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDefinitionElementAccess().getPropertyAssignmentParserRuleCall_0()); }
	rulePropertyAssignment
{ after(grammarAccess.getOutputDefinitionElementAccess().getPropertyAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOutputDefinitionElementAccess().getContextDefinitionParserRuleCall_1()); }
	ruleContextDefinition
{ after(grammarAccess.getOutputDefinitionElementAccess().getContextDefinitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreElementAccess().getMusicParserRuleCall_0()); }
	ruleMusic
{ after(grammarAccess.getScoreElementAccess().getMusicParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getScoreElementAccess().getHeaderParserRuleCall_1()); }
	ruleHeader
{ after(grammarAccess.getScoreElementAccess().getHeaderParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getScoreElementAccess().getOutputDefinitionParserRuleCall_2()); }
	ruleOutputDefinition
{ after(grammarAccess.getScoreElementAccess().getOutputDefinitionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BookElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookElementAccess().getBookPartParserRuleCall_0()); }
	ruleBookPart
{ after(grammarAccess.getBookElementAccess().getBookPartParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBookElementAccess().getBookPartElementParserRuleCall_1()); }
	ruleBookPartElement
{ after(grammarAccess.getBookElementAccess().getBookPartElementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BookPartElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookPartElementAccess().getPaperParserRuleCall_0()); }
	rulePaper
{ after(grammarAccess.getBookPartElementAccess().getPaperParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBookPartElementAccess().getScoreParserRuleCall_1()); }
	ruleScore
{ after(grammarAccess.getBookPartElementAccess().getScoreParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBookPartElementAccess().getCompositeMusicParserRuleCall_2()); }
	ruleCompositeMusic
{ after(grammarAccess.getBookPartElementAccess().getCompositeMusicParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBookPartElementAccess().getMarkupParserRuleCall_3()); }
	ruleMarkup
{ after(grammarAccess.getBookPartElementAccess().getMarkupParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getBookPartElementAccess().getMarkupLinesParserRuleCall_4()); }
	ruleMarkupLines
{ after(grammarAccess.getBookPartElementAccess().getMarkupLinesParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getBookPartElementAccess().getHeaderParserRuleCall_5()); }
	ruleHeader
{ after(grammarAccess.getBookPartElementAccess().getHeaderParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Music__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicAccess().getSimpleMusicParserRuleCall_0()); }
	ruleSimpleMusic
{ after(grammarAccess.getMusicAccess().getSimpleMusicParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMusicAccess().getCompositeMusicParserRuleCall_1()); }
	ruleCompositeMusic
{ after(grammarAccess.getMusicAccess().getCompositeMusicParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleMusic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleMusicAccess().getEventParserRuleCall_0()); }
	ruleEvent
{ after(grammarAccess.getSimpleMusicAccess().getEventParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSimpleMusicAccess().getContextChangeParserRuleCall_1()); }
	ruleContextChange
{ after(grammarAccess.getSimpleMusicAccess().getContextChangeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSimpleMusicAccess().getMusicPropertyDefinitionParserRuleCall_2()); }
	ruleMusicPropertyDefinition
{ after(grammarAccess.getSimpleMusicAccess().getMusicPropertyDefinitionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNoteParserRuleCall_0()); }
	ruleNote
{ after(grammarAccess.getEventAccess().getNoteParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEventAccess().getRestParserRuleCall_1()); }
	ruleRest
{ after(grammarAccess.getEventAccess().getRestParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEventAccess().getChordParserRuleCall_2()); }
	ruleChord
{ after(grammarAccess.getEventAccess().getChordParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getEventAccess().getKeySignatureParserRuleCall_3()); }
	ruleKeySignature
{ after(grammarAccess.getEventAccess().getKeySignatureParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getEventAccess().getTimeSignatureParserRuleCall_4()); }
	ruleTimeSignature
{ after(grammarAccess.getEventAccess().getTimeSignatureParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getEventAccess().getTempoParserRuleCall_5()); }
	ruleTempo
{ after(grammarAccess.getEventAccess().getTempoParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getEventAccess().getPartialParserRuleCall_6()); }
	rulePartial
{ after(grammarAccess.getEventAccess().getPartialParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getEventAccess().getMarkParserRuleCall_7()); }
	ruleMark
{ after(grammarAccess.getEventAccess().getMarkParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getEventAccess().getSkipParserRuleCall_8()); }
	ruleSkip
{ after(grammarAccess.getEventAccess().getSkipParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getEventAccess().getTieParserRuleCall_9()); }
	ruleTie
{ after(grammarAccess.getEventAccess().getTieParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getEventAccess().getBeamStartParserRuleCall_10()); }
	ruleBeamStart
{ after(grammarAccess.getEventAccess().getBeamStartParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getEventAccess().getBeamEndParserRuleCall_11()); }
	ruleBeamEnd
{ after(grammarAccess.getEventAccess().getBeamEndParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getEventAccess().getBarCheckParserRuleCall_12()); }
	ruleBarCheck
{ after(grammarAccess.getEventAccess().getBarCheckParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getEventAccess().getReferenceParserRuleCall_13()); }
	ruleReference
{ after(grammarAccess.getEventAccess().getReferenceParserRuleCall_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOctaveAccess().getUpAssignment_0()); }
(rule__Octave__UpAssignment_0)
{ after(grammarAccess.getOctaveAccess().getUpAssignment_0()); }
)
(
{ before(grammarAccess.getOctaveAccess().getUpAssignment_0()); }
(rule__Octave__UpAssignment_0)*
{ after(grammarAccess.getOctaveAccess().getUpAssignment_0()); }
)
)

    |(
(
{ before(grammarAccess.getOctaveAccess().getDownAssignment_1()); }
(rule__Octave__DownAssignment_1)
{ after(grammarAccess.getOctaveAccess().getDownAssignment_1()); }
)
(
{ before(grammarAccess.getOctaveAccess().getDownAssignment_1()); }
(rule__Octave__DownAssignment_1)*
{ after(grammarAccess.getOctaveAccess().getDownAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getGroup_0()); }
(rule__PostEvent__Group_0__0)
{ after(grammarAccess.getPostEventAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPostEventAccess().getGroup_1()); }
(rule__PostEvent__Group_1__0)
{ after(grammarAccess.getPostEventAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPostEventAccess().getGroup_2()); }
(rule__PostEvent__Group_2__0)
{ after(grammarAccess.getPostEventAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventWithRequiredDirection__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventWithRequiredDirectionAccess().getScriptAssignment_0()); }
(rule__EventWithRequiredDirection__ScriptAssignment_0)
{ after(grammarAccess.getEventWithRequiredDirectionAccess().getScriptAssignment_0()); }
)

    |(
{ before(grammarAccess.getEventWithRequiredDirectionAccess().getGenTextDefParserRuleCall_1()); }
	ruleGenTextDef
{ after(grammarAccess.getEventWithRequiredDirectionAccess().getGenTextDefParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenTextDef__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenTextDefAccess().getMarkupParserRuleCall_0()); }
	ruleMarkup
{ after(grammarAccess.getGenTextDefAccess().getMarkupParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGenTextDefAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getGenTextDefAccess().getSTRINGTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getGenTextDefAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getGenTextDefAccess().getINTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventWithOptionalDirection__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventWithOptionalDirectionAccess().getScriptAssignment_0()); }
(rule__EventWithOptionalDirection__ScriptAssignment_0)
{ after(grammarAccess.getEventWithOptionalDirectionAccess().getScriptAssignment_0()); }
)

    |(
{ before(grammarAccess.getEventWithOptionalDirectionAccess().getTremoloParserRuleCall_1()); }
	ruleTremolo
{ after(grammarAccess.getEventWithOptionalDirectionAccess().getTremoloParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeySignatureAccess().getGroup_1_0()); }
(rule__KeySignature__Group_1_0__0)
{ after(grammarAccess.getKeySignatureAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getKeySignatureAccess().getDefaultAssignment_1_1()); }
(rule__KeySignature__DefaultAssignment_1_1)
{ after(grammarAccess.getKeySignatureAccess().getDefaultAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoAccess().getGroup_1_0()); }
(rule__Tempo__Group_1_0__0)
{ after(grammarAccess.getTempoAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getTempoAccess().getLabelAssignment_1_1()); }
(rule__Tempo__LabelAssignment_1_1)
{ after(grammarAccess.getTempoAccess().getLabelAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TempoLabel__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoLabelAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getTempoLabelAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTempoLabelAccess().getMarkupParserRuleCall_1()); }
	ruleMarkup
{ after(grammarAccess.getTempoLabelAccess().getMarkupParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeMusic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeMusicAccess().getSequentialMusicParserRuleCall_0()); }
	ruleSequentialMusic
{ after(grammarAccess.getCompositeMusicAccess().getSequentialMusicParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCompositeMusicAccess().getSimultaneousMusicParserRuleCall_1()); }
	ruleSimultaneousMusic
{ after(grammarAccess.getCompositeMusicAccess().getSimultaneousMusicParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCompositeMusicAccess().getNewContextParserRuleCall_2()); }
	ruleNewContext
{ after(grammarAccess.getCompositeMusicAccess().getNewContextParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getCompositeMusicAccess().getRelativeMusicParserRuleCall_3()); }
	ruleRelativeMusic
{ after(grammarAccess.getCompositeMusicAccess().getRelativeMusicParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getCompositeMusicAccess().getRepeatedMusicParserRuleCall_4()); }
	ruleRepeatedMusic
{ after(grammarAccess.getCompositeMusicAccess().getRepeatedMusicParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getGroup_1_0()); }
(rule__SequentialMusic__Group_1_0__0)
{ after(grammarAccess.getSequentialMusicAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getSequentialMusicAccess().getGroup_1_1()); }
(rule__SequentialMusic__Group_1_1__0)
{ after(grammarAccess.getSequentialMusicAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getGroup_1_0()); }
(rule__SimultaneousMusic__Group_1_0__0)
{ after(grammarAccess.getSimultaneousMusicAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getSimultaneousMusicAccess().getGroup_1_1()); }
(rule__SimultaneousMusic__Group_1_1__0)
{ after(grammarAccess.getSimultaneousMusicAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModifierAccess().getPropertyOperationParserRuleCall_0()); }
	rulePropertyOperation
{ after(grammarAccess.getContextModifierAccess().getPropertyOperationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getContextModifierAccess().getContextDefaultModifierParserRuleCall_1()); }
	ruleContextDefaultModifier
{ after(grammarAccess.getContextModifierAccess().getContextDefaultModifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyOperationAccess().getSetPropertyParserRuleCall_0()); }
	ruleSetProperty
{ after(grammarAccess.getPropertyOperationAccess().getSetPropertyParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPropertyOperationAccess().getUnsetPropertyParserRuleCall_1()); }
	ruleUnsetProperty
{ after(grammarAccess.getPropertyOperationAccess().getUnsetPropertyParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPropertyOperationAccess().getOverridePropertyParserRuleCall_2()); }
	ruleOverrideProperty
{ after(grammarAccess.getPropertyOperationAccess().getOverridePropertyParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPropertyOperationAccess().getRevertPropertyParserRuleCall_3()); }
	ruleRevertProperty
{ after(grammarAccess.getPropertyOperationAccess().getRevertPropertyParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scalar__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarAccess().getIdOrStringParserRuleCall_0()); }
	ruleIdOrString
{ after(grammarAccess.getScalarAccess().getIdOrStringParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getScalarAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getScalarAccess().getINTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getScalarAccess().getSchemeParserRuleCall_2()); }
	ruleScheme
{ after(grammarAccess.getScalarAccess().getSchemeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getScalarAccess().getMarkupParserRuleCall_3()); }
	ruleMarkup
{ after(grammarAccess.getScalarAccess().getMarkupParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefaultModifierType__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getConsistsKeyword_1_0()); }

	KEYWORD_73 

{ after(grammarAccess.getContextDefaultModifierTypeAccess().getConsistsKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getRemoveKeyword_1_1()); }

	KEYWORD_63 

{ after(grammarAccess.getContextDefaultModifierTypeAccess().getRemoveKeyword_1_1()); }
)

    |(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getAcceptsKeyword_1_2()); }

	KEYWORD_66 

{ after(grammarAccess.getContextDefaultModifierTypeAccess().getAcceptsKeyword_1_2()); }
)

    |(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getDefaultchildKeyword_1_3()); }

	KEYWORD_80 

{ after(grammarAccess.getContextDefaultModifierTypeAccess().getDefaultchildKeyword_1_3()); }
)

    |(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getDeniesKeyword_1_4()); }

	KEYWORD_59 

{ after(grammarAccess.getContextDefaultModifierTypeAccess().getDeniesKeyword_1_4()); }
)

    |(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getAliasKeyword_1_5()); }

	KEYWORD_53 

{ after(grammarAccess.getContextDefaultModifierTypeAccess().getAliasKeyword_1_5()); }
)

    |(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getTypeKeyword_1_6()); }

	KEYWORD_51 

{ after(grammarAccess.getContextDefaultModifierTypeAccess().getTypeKeyword_1_6()); }
)

    |(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getDescriptionKeyword_1_7()); }

	KEYWORD_78 

{ after(grammarAccess.getContextDefaultModifierTypeAccess().getDescriptionKeyword_1_7()); }
)

    |(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getNameKeyword_1_8()); }

	KEYWORD_46 

{ after(grammarAccess.getContextDefaultModifierTypeAccess().getNameKeyword_1_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MusicOrScheme__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicOrSchemeAccess().getMusicParserRuleCall_0()); }
	ruleMusic
{ after(grammarAccess.getMusicOrSchemeAccess().getMusicParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMusicOrSchemeAccess().getSchemeParserRuleCall_1()); }
	ruleScheme
{ after(grammarAccess.getMusicOrSchemeAccess().getSchemeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MusicPropertyOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicPropertyOperationAccess().getOverrideMusicPropertyParserRuleCall_0()); }
	ruleOverrideMusicProperty
{ after(grammarAccess.getMusicPropertyOperationAccess().getOverrideMusicPropertyParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMusicPropertyOperationAccess().getRevertMusicPropertyParserRuleCall_1()); }
	ruleRevertMusicProperty
{ after(grammarAccess.getMusicPropertyOperationAccess().getRevertMusicPropertyParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMusicPropertyOperationAccess().getSetMusicPropertyParserRuleCall_2()); }
	ruleSetMusicProperty
{ after(grammarAccess.getMusicPropertyOperationAccess().getSetMusicPropertyParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getMusicPropertyOperationAccess().getUnsetMusicPropertyParserRuleCall_3()); }
	ruleUnsetMusicProperty
{ after(grammarAccess.getMusicPropertyOperationAccess().getUnsetMusicPropertyParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdOrString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdOrStringAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getIdOrStringAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIdOrStringAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getIdOrStringAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Direction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectionAccess().getDefaultEnumLiteralDeclaration_0()); }
(	KEYWORD_9
)
{ after(grammarAccess.getDirectionAccess().getDefaultEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDirectionAccess().getAboveEnumLiteralDeclaration_1()); }
(	KEYWORD_20
)
{ after(grammarAccess.getDirectionAccess().getAboveEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getDirectionAccess().getBelowEnumLiteralDeclaration_2()); }
(	KEYWORD_21
)
{ after(grammarAccess.getDirectionAccess().getBelowEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptWithRequiredDirection__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptWithRequiredDirectionAccess().getMarcatoEnumLiteralDeclaration_0()); }
(	KEYWORD_20
)
{ after(grammarAccess.getScriptWithRequiredDirectionAccess().getMarcatoEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getScriptWithRequiredDirectionAccess().getStoppedEnumLiteralDeclaration_1()); }
(	KEYWORD_7
)
{ after(grammarAccess.getScriptWithRequiredDirectionAccess().getStoppedEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getScriptWithRequiredDirectionAccess().getTenutoEnumLiteralDeclaration_2()); }
(	KEYWORD_9
)
{ after(grammarAccess.getScriptWithRequiredDirectionAccess().getTenutoEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getScriptWithRequiredDirectionAccess().getStaccatissimoEnumLiteralDeclaration_3()); }
(	KEYWORD_23
)
{ after(grammarAccess.getScriptWithRequiredDirectionAccess().getStaccatissimoEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getScriptWithRequiredDirectionAccess().getAccentEnumLiteralDeclaration_4()); }
(	KEYWORD_15
)
{ after(grammarAccess.getScriptWithRequiredDirectionAccess().getAccentEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getScriptWithRequiredDirectionAccess().getStaccatoEnumLiteralDeclaration_5()); }
(	KEYWORD_10
)
{ after(grammarAccess.getScriptWithRequiredDirectionAccess().getStaccatoEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getScriptWithRequiredDirectionAccess().getPortatoEnumLiteralDeclaration_6()); }
(	KEYWORD_21
)
{ after(grammarAccess.getScriptWithRequiredDirectionAccess().getPortatoEnumLiteralDeclaration_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptWithOptionalDirection__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getBeamStartEnumLiteralDeclaration_0()); }
(	KEYWORD_17
)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getBeamStartEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getBeamEndEnumLiteralDeclaration_1()); }
(	KEYWORD_19
)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getBeamEndEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getTieEnumLiteralDeclaration_2()); }
(	KEYWORD_25
)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getTieEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getSlurStartEnumLiteralDeclaration_3()); }
(	KEYWORD_4
)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getSlurStartEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getSlurEndEnumLiteralDeclaration_4()); }
(	KEYWORD_5
)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getSlurEndEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getPhrasingSlurStartEnumLiteralDeclaration_5()); }
(	KEYWORD_32
)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getPhrasingSlurStartEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getPhrasingSlurEndEnumLiteralDeclaration_6()); }
(	KEYWORD_33
)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getPhrasingSlurEndEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getDiminuendoEnumLiteralDeclaration_7()); }
(	KEYWORD_35
)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getDiminuendoEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getCrescendoEnumLiteralDeclaration_8()); }
(	KEYWORD_34
)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getCrescendoEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getScriptWithOptionalDirectionAccess().getDynamicChangeEndEnumLiteralDeclaration_9()); }
(	KEYWORD_31
)
{ after(grammarAccess.getScriptWithOptionalDirectionAccess().getDynamicChangeEndEnumLiteralDeclaration_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameAssignment_0()); }
(rule__Assignment__NameAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }

	KEYWORD_14 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
(rule__Assignment__ValueAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Scheme__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scheme__Group__0__Impl
	rule__Scheme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getNumberSignKeyword_0()); }

	KEYWORD_2 

{ after(grammarAccess.getSchemeAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scheme__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scheme__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getValueAssignment_1()); }
(rule__Scheme__ValueAssignment_1)
{ after(grammarAccess.getSchemeAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeExpression__Group__0__Impl
	rule__SchemeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotedAssignment_0()); }
(rule__SchemeExpression__QuotedAssignment_0)?
{ after(grammarAccess.getSchemeExpressionAccess().getQuotedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getValueAssignment_1()); }
(rule__SchemeExpression__ValueAssignment_1)
{ after(grammarAccess.getSchemeExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__0__Impl
	rule__SchemeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getSchemeListAction_0()); }
(

)
{ after(grammarAccess.getSchemeListAccess().getSchemeListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__1__Impl
	rule__SchemeList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_4 

{ after(grammarAccess.getSchemeListAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__2__Impl
	rule__SchemeList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getExpressionsAssignment_2()); }
(rule__SchemeList__ExpressionsAssignment_2)*
{ after(grammarAccess.getSchemeListAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getRightParenthesisKeyword_3()); }

	KEYWORD_5 

{ after(grammarAccess.getSchemeListAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SchemeBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__0__Impl
	rule__SchemeBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getNumberSignLeftCurlyBracketKeyword_0()); }

	KEYWORD_27 

{ after(grammarAccess.getSchemeBlockAccess().getNumberSignLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeBlock__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBlockAccess().getNumberSignRightCurlyBracketKeyword_1()); }

	KEYWORD_28 

{ after(grammarAccess.getSchemeBlockAccess().getNumberSignRightCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemeNumber__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumber__Group__0__Impl
	rule__SchemeNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getHexadecimalAssignment_0()); }
(rule__SchemeNumber__HexadecimalAssignment_0)?
{ after(grammarAccess.getSchemeNumberAccess().getHexadecimalAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemeNumber__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemeNumber__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getValueAssignment_1()); }
(rule__SchemeNumber__ValueAssignment_1)
{ after(grammarAccess.getSchemeNumberAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContextDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDefinition__Group__0__Impl
	rule__ContextDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefinitionAccess().getContextDefinitionAction_0()); }
(

)
{ after(grammarAccess.getContextDefinitionAccess().getContextDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDefinition__Group__1__Impl
	rule__ContextDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefinitionAccess().getContextKeyword_1()); }

	KEYWORD_67 

{ after(grammarAccess.getContextDefinitionAccess().getContextKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDefinition__Group__2__Impl
	rule__ContextDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefinitionAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getContextDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDefinition__Group__3__Impl
	rule__ContextDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefinitionAccess().getElementsAssignment_3()); }
(rule__ContextDefinition__ElementsAssignment_3)*
{ after(grammarAccess.getContextDefinitionAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefinitionAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_24 

{ after(grammarAccess.getContextDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__GrobDescriptions__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GrobDescriptions__Group__0__Impl
	rule__GrobDescriptions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GrobDescriptions__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrobDescriptionsAccess().getGrobdescriptionsKeyword_0()); }

	KEYWORD_84 

{ after(grammarAccess.getGrobDescriptionsAccess().getGrobdescriptionsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GrobDescriptions__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GrobDescriptions__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GrobDescriptions__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrobDescriptionsAccess().getValueAssignment_1()); }
(rule__GrobDescriptions__ValueAssignment_1)
{ after(grammarAccess.getGrobDescriptionsAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Header__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__0__Impl
	rule__Header__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getHeaderAction_0()); }
(

)
{ after(grammarAccess.getHeaderAccess().getHeaderAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__1__Impl
	rule__Header__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getHeaderKeyword_1()); }

	KEYWORD_60 

{ after(grammarAccess.getHeaderAccess().getHeaderKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__2__Impl
	rule__Header__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getHeaderAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__3__Impl
	rule__Header__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getAssignmentsAssignment_3()); }
(rule__Header__AssignmentsAssignment_3)*
{ after(grammarAccess.getHeaderAccess().getAssignmentsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_24 

{ after(grammarAccess.getHeaderAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PropertyAssignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssignment__Group__0__Impl
	rule__PropertyAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getPropertyAssignment_0()); }
(rule__PropertyAssignment__PropertyAssignment_0)
{ after(grammarAccess.getPropertyAssignmentAccess().getPropertyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssignment__Group__1__Impl
	rule__PropertyAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getEqualsSignKeyword_1()); }

	KEYWORD_14 

{ after(grammarAccess.getPropertyAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getValueAssignment_2()); }
(rule__PropertyAssignment__ValueAssignment_2)
{ after(grammarAccess.getPropertyAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Paper__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Paper__Group__0__Impl
	rule__Paper__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Paper__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPaperAccess().getPaperAction_0()); }
(

)
{ after(grammarAccess.getPaperAccess().getPaperAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Paper__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Paper__Group__1__Impl
	rule__Paper__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Paper__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPaperAccess().getPaperKeyword_1()); }

	KEYWORD_54 

{ after(grammarAccess.getPaperAccess().getPaperKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Paper__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Paper__Group__2__Impl
	rule__Paper__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Paper__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPaperAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getPaperAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Paper__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Paper__Group__3__Impl
	rule__Paper__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Paper__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPaperAccess().getElementsAssignment_3()); }
(rule__Paper__ElementsAssignment_3)*
{ after(grammarAccess.getPaperAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Paper__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Paper__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Paper__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPaperAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_24 

{ after(grammarAccess.getPaperAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Midi__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Midi__Group__0__Impl
	rule__Midi__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Midi__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMidiAccess().getMidiAction_0()); }
(

)
{ after(grammarAccess.getMidiAccess().getMidiAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Midi__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Midi__Group__1__Impl
	rule__Midi__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Midi__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMidiAccess().getMidiKeyword_1()); }

	KEYWORD_45 

{ after(grammarAccess.getMidiAccess().getMidiKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Midi__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Midi__Group__2__Impl
	rule__Midi__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Midi__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMidiAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getMidiAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Midi__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Midi__Group__3__Impl
	rule__Midi__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Midi__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMidiAccess().getElementsAssignment_3()); }
(rule__Midi__ElementsAssignment_3)*
{ after(grammarAccess.getMidiAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Midi__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Midi__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Midi__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMidiAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_24 

{ after(grammarAccess.getMidiAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Layout__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Layout__Group__0__Impl
	rule__Layout__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Layout__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLayoutAccess().getLayoutAction_0()); }
(

)
{ after(grammarAccess.getLayoutAccess().getLayoutAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Layout__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Layout__Group__1__Impl
	rule__Layout__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Layout__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLayoutAccess().getLayoutKeyword_1()); }

	KEYWORD_61 

{ after(grammarAccess.getLayoutAccess().getLayoutKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Layout__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Layout__Group__2__Impl
	rule__Layout__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Layout__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLayoutAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getLayoutAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Layout__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Layout__Group__3__Impl
	rule__Layout__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Layout__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLayoutAccess().getElementsAssignment_3()); }
(rule__Layout__ElementsAssignment_3)*
{ after(grammarAccess.getLayoutAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Layout__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Layout__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Layout__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLayoutAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_24 

{ after(grammarAccess.getLayoutAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Score__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Score__Group__0__Impl
	rule__Score__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Score__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreAccess().getScoreKeyword_0()); }

	KEYWORD_55 

{ after(grammarAccess.getScoreAccess().getScoreKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Score__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Score__Group__1__Impl
	rule__Score__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Score__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreAccess().getLeftCurlyBracketKeyword_1()); }

	KEYWORD_22 

{ after(grammarAccess.getScoreAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Score__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Score__Group__2__Impl
	rule__Score__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Score__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreAccess().getMusicAssignment_2()); }
(rule__Score__MusicAssignment_2)
{ after(grammarAccess.getScoreAccess().getMusicAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Score__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Score__Group__3__Impl
	rule__Score__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Score__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreAccess().getOtherAssignment_3()); }
(rule__Score__OtherAssignment_3)*
{ after(grammarAccess.getScoreAccess().getOtherAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Score__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Score__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Score__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_24 

{ after(grammarAccess.getScoreAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Book__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Book__Group__0__Impl
	rule__Book__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Book__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookAccess().getBookAction_0()); }
(

)
{ after(grammarAccess.getBookAccess().getBookAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Book__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Book__Group__1__Impl
	rule__Book__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Book__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookAccess().getBookKeyword_1()); }

	KEYWORD_43 

{ after(grammarAccess.getBookAccess().getBookKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Book__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Book__Group__2__Impl
	rule__Book__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Book__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getBookAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Book__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Book__Group__3__Impl
	rule__Book__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Book__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookAccess().getElementsAssignment_3()); }
(rule__Book__ElementsAssignment_3)*
{ after(grammarAccess.getBookAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Book__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Book__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Book__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_24 

{ after(grammarAccess.getBookAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BookPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BookPart__Group__0__Impl
	rule__BookPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BookPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookPartAccess().getBookPartAction_0()); }
(

)
{ after(grammarAccess.getBookPartAccess().getBookPartAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BookPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BookPart__Group__1__Impl
	rule__BookPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BookPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookPartAccess().getBookpartKeyword_1()); }

	KEYWORD_72 

{ after(grammarAccess.getBookPartAccess().getBookpartKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BookPart__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BookPart__Group__2__Impl
	rule__BookPart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BookPart__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookPartAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getBookPartAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BookPart__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BookPart__Group__3__Impl
	rule__BookPart__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BookPart__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookPartAccess().getElementsAssignment_3()); }
(rule__BookPart__ElementsAssignment_3)*
{ after(grammarAccess.getBookPartAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BookPart__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BookPart__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BookPart__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookPartAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_24 

{ after(grammarAccess.getBookPartAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Markup__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Markup__Group__0__Impl
	rule__Markup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getMarkupAction_0()); }
(

)
{ after(grammarAccess.getMarkupAccess().getMarkupAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Markup__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Markup__Group__1__Impl
	rule__Markup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getMarkupKeyword_1()); }

	KEYWORD_62 

{ after(grammarAccess.getMarkupAccess().getMarkupKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Markup__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Markup__Group__2__Impl
	rule__Markup__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getMarkupAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Markup__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Markup__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Markup__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getRightCurlyBracketKeyword_3()); }

	KEYWORD_24 

{ after(grammarAccess.getMarkupAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MarkupLines__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupLines__Group__0__Impl
	rule__MarkupLines__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupLines__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupLinesAccess().getMarkupLinesAction_0()); }
(

)
{ after(grammarAccess.getMarkupLinesAccess().getMarkupLinesAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupLines__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupLines__Group__1__Impl
	rule__MarkupLines__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupLines__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupLinesAccess().getMarkuplinesKeyword_1()); }

	KEYWORD_79 

{ after(grammarAccess.getMarkupLinesAccess().getMarkuplinesKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupLines__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupLines__Group__2__Impl
	rule__MarkupLines__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupLines__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupLinesAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getMarkupLinesAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkupLines__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkupLines__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkupLines__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupLinesAccess().getRightCurlyBracketKeyword_3()); }

	KEYWORD_24 

{ after(grammarAccess.getMarkupLinesAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Version__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Version__Group__0__Impl
	rule__Version__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getVersionKeyword_0()); }

	KEYWORD_71 

{ after(grammarAccess.getVersionAccess().getVersionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Version__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getVersionAssignment_1()); }
(rule__Version__VersionAssignment_1)
{ after(grammarAccess.getVersionAccess().getVersionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Include__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }

	KEYWORD_69 

{ after(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getImportURIAssignment_1()); }
(rule__Include__ImportURIAssignment_1)
{ after(grammarAccess.getIncludeAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SourceFileName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceFileName__Group__0__Impl
	rule__SourceFileName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileNameAccess().getSourcefilenameKeyword_0()); }

	KEYWORD_83 

{ after(grammarAccess.getSourceFileNameAccess().getSourcefilenameKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceFileName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceFileName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileNameAccess().getFilenameAssignment_1()); }
(rule__SourceFileName__FilenameAssignment_1)
{ after(grammarAccess.getSourceFileNameAccess().getFilenameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SourceFileLine__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceFileLine__Group__0__Impl
	rule__SourceFileLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileLine__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileLineAccess().getSourcefilelineKeyword_0()); }

	KEYWORD_82 

{ after(grammarAccess.getSourceFileLineAccess().getSourcefilelineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceFileLine__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceFileLine__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileLine__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileLineAccess().getLineAssignment_1()); }
(rule__SourceFileLine__LineAssignment_1)
{ after(grammarAccess.getSourceFileLineAccess().getLineAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Note__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Note__Group__0__Impl
	rule__Note__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getPitchAssignment_0()); }
(rule__Note__PitchAssignment_0)
{ after(grammarAccess.getNoteAccess().getPitchAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Note__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Note__Group__1__Impl
	rule__Note__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getDurationAssignment_1()); }
(rule__Note__DurationAssignment_1)?
{ after(grammarAccess.getNoteAccess().getDurationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Note__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Note__Group__2__Impl
	rule__Note__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getRestAssignment_2()); }
(rule__Note__RestAssignment_2)?
{ after(grammarAccess.getNoteAccess().getRestAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Note__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Note__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getPostEventsAssignment_3()); }
(rule__Note__PostEventsAssignment_3)*
{ after(grammarAccess.getNoteAccess().getPostEventsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Pitch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pitch__Group__0__Impl
	rule__Pitch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getBaseAssignment_0()); }
(rule__Pitch__BaseAssignment_0)
{ after(grammarAccess.getPitchAccess().getBaseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pitch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pitch__Group__1__Impl
	rule__Pitch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getOctaveCheckAssignment_1()); }
(rule__Pitch__OctaveCheckAssignment_1)?
{ after(grammarAccess.getPitchAccess().getOctaveCheckAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pitch__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pitch__Group__2__Impl
	rule__Pitch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getOctaveShiftAssignment_2()); }
(rule__Pitch__OctaveShiftAssignment_2)?
{ after(grammarAccess.getPitchAccess().getOctaveShiftAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pitch__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pitch__Group__3__Impl
	rule__Pitch__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getReminderAccidentalAssignment_3()); }
(rule__Pitch__ReminderAccidentalAssignment_3)?
{ after(grammarAccess.getPitchAccess().getReminderAccidentalAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pitch__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pitch__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getCautionaryAccidentalAssignment_4()); }
(rule__Pitch__CautionaryAccidentalAssignment_4)?
{ after(grammarAccess.getPitchAccess().getCautionaryAccidentalAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Rest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rest__Group__0__Impl
	rule__Rest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestAccess().getTypeAssignment_0()); }
(rule__Rest__TypeAssignment_0)
{ after(grammarAccess.getRestAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rest__Group__1__Impl
	rule__Rest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestAccess().getDurationAssignment_1()); }
(rule__Rest__DurationAssignment_1)?
{ after(grammarAccess.getRestAccess().getDurationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rest__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestAccess().getPostEventsAssignment_2()); }
(rule__Rest__PostEventsAssignment_2)*
{ after(grammarAccess.getRestAccess().getPostEventsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Chord__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Chord__Group__0__Impl
	rule__Chord__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChordAccess().getChordAction_0()); }
(

)
{ after(grammarAccess.getChordAccess().getChordAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Chord__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Chord__Group__1__Impl
	rule__Chord__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChordAccess().getLessThanSignKeyword_1()); }

	KEYWORD_13 

{ after(grammarAccess.getChordAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Chord__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Chord__Group__2__Impl
	rule__Chord__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChordAccess().getNotesAssignment_2()); }
(rule__Chord__NotesAssignment_2)*
{ after(grammarAccess.getChordAccess().getNotesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Chord__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Chord__Group__3__Impl
	rule__Chord__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChordAccess().getGreaterThanSignKeyword_3()); }

	KEYWORD_15 

{ after(grammarAccess.getChordAccess().getGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Chord__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Chord__Group__4__Impl
	rule__Chord__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChordAccess().getDurationAssignment_4()); }
(rule__Chord__DurationAssignment_4)?
{ after(grammarAccess.getChordAccess().getDurationAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Chord__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Chord__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChordAccess().getPostEventsAssignment_5()); }
(rule__Chord__PostEventsAssignment_5)*
{ after(grammarAccess.getChordAccess().getPostEventsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__PostEvent__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostEvent__Group_0__0__Impl
	rule__PostEvent__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getHyphenMinusKeyword_0_0()); }

	KEYWORD_9 

{ after(grammarAccess.getPostEventAccess().getHyphenMinusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostEvent__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostEvent__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getMusicFunctionAssignment_0_1()); }
(rule__PostEvent__MusicFunctionAssignment_0_1)
{ after(grammarAccess.getPostEventAccess().getMusicFunctionAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PostEvent__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostEvent__Group_1__0__Impl
	rule__PostEvent__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getDirectionAssignment_1_0()); }
(rule__PostEvent__DirectionAssignment_1_0)
{ after(grammarAccess.getPostEventAccess().getDirectionAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostEvent__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostEvent__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getEventAssignment_1_1()); }
(rule__PostEvent__EventAssignment_1_1)
{ after(grammarAccess.getPostEventAccess().getEventAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PostEvent__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostEvent__Group_2__0__Impl
	rule__PostEvent__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getDirectionAssignment_2_0()); }
(rule__PostEvent__DirectionAssignment_2_0)?
{ after(grammarAccess.getPostEventAccess().getDirectionAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostEvent__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostEvent__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getEventAssignment_2_1()); }
(rule__PostEvent__EventAssignment_2_1)
{ after(grammarAccess.getPostEventAccess().getEventAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tremolo__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tremolo__Group__0__Impl
	rule__Tremolo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tremolo__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTremoloAccess().getTremoloAction_0()); }
(

)
{ after(grammarAccess.getTremoloAccess().getTremoloAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tremolo__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tremolo__Group__1__Impl
	rule__Tremolo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tremolo__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTremoloAccess().getColonKeyword_1()); }

	KEYWORD_12 

{ after(grammarAccess.getTremoloAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tremolo__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tremolo__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tremolo__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTremoloAccess().getDivisionAssignment_2()); }
(rule__Tremolo__DivisionAssignment_2)?
{ after(grammarAccess.getTremoloAccess().getDivisionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__KeySignature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeySignature__Group__0__Impl
	rule__KeySignature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeySignatureAccess().getKeyKeyword_0()); }

	KEYWORD_40 

{ after(grammarAccess.getKeySignatureAccess().getKeyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeySignature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeySignature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeySignatureAccess().getAlternatives_1()); }
(rule__KeySignature__Alternatives_1)
{ after(grammarAccess.getKeySignatureAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__KeySignature__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeySignature__Group_1_0__0__Impl
	rule__KeySignature__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeySignatureAccess().getTonicAssignment_1_0_0()); }
(rule__KeySignature__TonicAssignment_1_0_0)
{ after(grammarAccess.getKeySignatureAccess().getTonicAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeySignature__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeySignature__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeySignatureAccess().getModeAssignment_1_0_1()); }
(rule__KeySignature__ModeAssignment_1_0_1)
{ after(grammarAccess.getKeySignatureAccess().getModeAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimeSignature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeSignature__Group__0__Impl
	rule__TimeSignature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeSignature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeSignatureAccess().getTimeKeyword_0()); }

	KEYWORD_50 

{ after(grammarAccess.getTimeSignatureAccess().getTimeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeSignature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeSignature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeSignature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeSignatureAccess().getFractionAssignment_1()); }
(rule__TimeSignature__FractionAssignment_1)
{ after(grammarAccess.getTimeSignatureAccess().getFractionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tempo__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tempo__Group__0__Impl
	rule__Tempo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoAccess().getTempoKeyword_0()); }

	KEYWORD_56 

{ after(grammarAccess.getTempoAccess().getTempoKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tempo__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tempo__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoAccess().getAlternatives_1()); }
(rule__Tempo__Alternatives_1)
{ after(grammarAccess.getTempoAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tempo__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tempo__Group_1_0__0__Impl
	rule__Tempo__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoAccess().getLabelAssignment_1_0_0()); }
(rule__Tempo__LabelAssignment_1_0_0)?
{ after(grammarAccess.getTempoAccess().getLabelAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tempo__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tempo__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoAccess().getValueAssignment_1_0_1()); }
(rule__Tempo__ValueAssignment_1_0_1)
{ after(grammarAccess.getTempoAccess().getValueAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TempoValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TempoValue__Group__0__Impl
	rule__TempoValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TempoValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoValueAccess().getDurationAssignment_0()); }
(rule__TempoValue__DurationAssignment_0)
{ after(grammarAccess.getTempoValueAccess().getDurationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TempoValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TempoValue__Group__1__Impl
	rule__TempoValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TempoValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoValueAccess().getEqualsSignKeyword_1()); }

	KEYWORD_14 

{ after(grammarAccess.getTempoValueAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TempoValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TempoValue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TempoValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoValueAccess().getBpmAssignment_2()); }
(rule__TempoValue__BpmAssignment_2)
{ after(grammarAccess.getTempoValueAccess().getBpmAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Partial__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Partial__Group__0__Impl
	rule__Partial__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Partial__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPartialAccess().getPartialAction_0()); }
(

)
{ after(grammarAccess.getPartialAccess().getPartialAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Partial__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Partial__Group__1__Impl
	rule__Partial__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Partial__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPartialAccess().getPartialKeyword_1()); }

	KEYWORD_70 

{ after(grammarAccess.getPartialAccess().getPartialKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Partial__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Partial__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Partial__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPartialAccess().getDurationAssignment_2()); }
(rule__Partial__DurationAssignment_2)
{ after(grammarAccess.getPartialAccess().getDurationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Mark__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mark__Group__0__Impl
	rule__Mark__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkAccess().getMarkAction_0()); }
(

)
{ after(grammarAccess.getMarkAccess().getMarkAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mark__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mark__Group__1__Impl
	rule__Mark__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkAccess().getMarkKeyword_1()); }

	KEYWORD_44 

{ after(grammarAccess.getMarkAccess().getMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mark__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mark__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkAccess().getMarkAssignment_2()); }
(rule__Mark__MarkAssignment_2)
{ after(grammarAccess.getMarkAccess().getMarkAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Skip__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Skip__Group__0__Impl
	rule__Skip__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipAccess().getSkipKeyword_0()); }

	KEYWORD_49 

{ after(grammarAccess.getSkipAccess().getSkipKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Skip__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Skip__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipAccess().getDurationAssignment_1()); }
(rule__Skip__DurationAssignment_1)
{ after(grammarAccess.getSkipAccess().getDurationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tie__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tie__Group__0__Impl
	rule__Tie__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tie__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTieAccess().getTieAction_0()); }
(

)
{ after(grammarAccess.getTieAccess().getTieAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tie__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tie__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tie__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTieAccess().getReverseSolidusTildeKeyword_1()); }

	KEYWORD_39 

{ after(grammarAccess.getTieAccess().getReverseSolidusTildeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BeamStart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeamStart__Group__0__Impl
	rule__BeamStart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BeamStart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeamStartAccess().getBeamStartAction_0()); }
(

)
{ after(grammarAccess.getBeamStartAccess().getBeamStartAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BeamStart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeamStart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BeamStart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeamStartAccess().getReverseSolidusLeftSquareBracketKeyword_1()); }

	KEYWORD_36 

{ after(grammarAccess.getBeamStartAccess().getReverseSolidusLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BeamEnd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeamEnd__Group__0__Impl
	rule__BeamEnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BeamEnd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeamEndAccess().getBeamEndAction_0()); }
(

)
{ after(grammarAccess.getBeamEndAccess().getBeamEndAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BeamEnd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeamEnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BeamEnd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeamEndAccess().getReverseSolidusRightSquareBracketKeyword_1()); }

	KEYWORD_38 

{ after(grammarAccess.getBeamEndAccess().getReverseSolidusRightSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BarCheck__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BarCheck__Group__0__Impl
	rule__BarCheck__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BarCheck__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarCheckAccess().getBarCheckAction_0()); }
(

)
{ after(grammarAccess.getBarCheckAccess().getBarCheckAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BarCheck__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BarCheck__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BarCheck__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarCheckAccess().getVerticalLineKeyword_1()); }

	KEYWORD_23 

{ after(grammarAccess.getBarCheckAccess().getVerticalLineKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Reference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getReverseSolidusKeyword_0()); }

	KEYWORD_18 

{ after(grammarAccess.getReferenceAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getAssignmentAssignment_1()); }
(rule__Reference__AssignmentAssignment_1)
{ after(grammarAccess.getReferenceAccess().getAssignmentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequentialMusic__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialMusic__Group__0__Impl
	rule__SequentialMusic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getSequentialMusicAction_0()); }
(

)
{ after(grammarAccess.getSequentialMusicAccess().getSequentialMusicAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialMusic__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialMusic__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getAlternatives_1()); }
(rule__SequentialMusic__Alternatives_1)
{ after(grammarAccess.getSequentialMusicAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequentialMusic__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialMusic__Group_1_0__0__Impl
	rule__SequentialMusic__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getSequentialKeyword_1_0_0()); }

	KEYWORD_76 

{ after(grammarAccess.getSequentialMusicAccess().getSequentialKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialMusic__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialMusic__Group_1_0__1__Impl
	rule__SequentialMusic__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getLeftCurlyBracketKeyword_1_0_1()); }

	KEYWORD_22 

{ after(grammarAccess.getSequentialMusicAccess().getLeftCurlyBracketKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialMusic__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialMusic__Group_1_0__2__Impl
	rule__SequentialMusic__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getMusicAssignment_1_0_2()); }
(rule__SequentialMusic__MusicAssignment_1_0_2)*
{ after(grammarAccess.getSequentialMusicAccess().getMusicAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialMusic__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialMusic__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getRightCurlyBracketKeyword_1_0_3()); }

	KEYWORD_24 

{ after(grammarAccess.getSequentialMusicAccess().getRightCurlyBracketKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SequentialMusic__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialMusic__Group_1_1__0__Impl
	rule__SequentialMusic__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getLeftCurlyBracketKeyword_1_1_0()); }

	KEYWORD_22 

{ after(grammarAccess.getSequentialMusicAccess().getLeftCurlyBracketKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialMusic__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialMusic__Group_1_1__1__Impl
	rule__SequentialMusic__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getMusicAssignment_1_1_1()); }
(rule__SequentialMusic__MusicAssignment_1_1_1)*
{ after(grammarAccess.getSequentialMusicAccess().getMusicAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialMusic__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialMusic__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getRightCurlyBracketKeyword_1_1_2()); }

	KEYWORD_24 

{ after(grammarAccess.getSequentialMusicAccess().getRightCurlyBracketKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimultaneousMusic__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousMusic__Group__0__Impl
	rule__SimultaneousMusic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getSimultaneousMusicAction_0()); }
(

)
{ after(grammarAccess.getSimultaneousMusicAccess().getSimultaneousMusicAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousMusic__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousMusic__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getAlternatives_1()); }
(rule__SimultaneousMusic__Alternatives_1)
{ after(grammarAccess.getSimultaneousMusicAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimultaneousMusic__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousMusic__Group_1_0__0__Impl
	rule__SimultaneousMusic__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getSimultaneousKeyword_1_0_0()); }

	KEYWORD_81 

{ after(grammarAccess.getSimultaneousMusicAccess().getSimultaneousKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousMusic__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousMusic__Group_1_0__1__Impl
	rule__SimultaneousMusic__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getLeftCurlyBracketKeyword_1_0_1()); }

	KEYWORD_22 

{ after(grammarAccess.getSimultaneousMusicAccess().getLeftCurlyBracketKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousMusic__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousMusic__Group_1_0__2__Impl
	rule__SimultaneousMusic__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getMusicAssignment_1_0_2()); }
(rule__SimultaneousMusic__MusicAssignment_1_0_2)*
{ after(grammarAccess.getSimultaneousMusicAccess().getMusicAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousMusic__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousMusic__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getRightCurlyBracketKeyword_1_0_3()); }

	KEYWORD_24 

{ after(grammarAccess.getSimultaneousMusicAccess().getRightCurlyBracketKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SimultaneousMusic__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousMusic__Group_1_1__0__Impl
	rule__SimultaneousMusic__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getLessThanSignLessThanSignKeyword_1_1_0()); }

	KEYWORD_29 

{ after(grammarAccess.getSimultaneousMusicAccess().getLessThanSignLessThanSignKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousMusic__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousMusic__Group_1_1__1__Impl
	rule__SimultaneousMusic__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getMusicAssignment_1_1_1()); }
(rule__SimultaneousMusic__MusicAssignment_1_1_1)*
{ after(grammarAccess.getSimultaneousMusicAccess().getMusicAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousMusic__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousMusic__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getGreaterThanSignGreaterThanSignKeyword_1_1_2()); }

	KEYWORD_30 

{ after(grammarAccess.getSimultaneousMusicAccess().getGreaterThanSignGreaterThanSignKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NewContext__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__0__Impl
	rule__NewContext__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getNewKeyword_0()); }

	KEYWORD_41 

{ after(grammarAccess.getNewContextAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__1__Impl
	rule__NewContext__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getContextAssignment_1()); }
(rule__NewContext__ContextAssignment_1)
{ after(grammarAccess.getNewContextAccess().getContextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__2__Impl
	rule__NewContext__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getGroup_2()); }
(rule__NewContext__Group_2__0)?
{ after(grammarAccess.getNewContextAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__3__Impl
	rule__NewContext__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getModificationAssignment_3()); }
(rule__NewContext__ModificationAssignment_3)?
{ after(grammarAccess.getNewContextAccess().getModificationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getMusicAssignment_4()); }
(rule__NewContext__MusicAssignment_4)
{ after(grammarAccess.getNewContextAccess().getMusicAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NewContext__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group_2__0__Impl
	rule__NewContext__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getEqualsSignKeyword_2_0()); }

	KEYWORD_14 

{ after(grammarAccess.getNewContextAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewContext__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewContext__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getIdAssignment_2_1()); }
(rule__NewContext__IdAssignment_2_1)
{ after(grammarAccess.getNewContextAccess().getIdAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContextModification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextModification__Group__0__Impl
	rule__ContextModification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModificationAccess().getContextModificationAction_0()); }
(

)
{ after(grammarAccess.getContextModificationAccess().getContextModificationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextModification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextModification__Group__1__Impl
	rule__ContextModification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModificationAccess().getWithKeyword_1()); }

	KEYWORD_52 

{ after(grammarAccess.getContextModificationAccess().getWithKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextModification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextModification__Group__2__Impl
	rule__ContextModification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModificationAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getContextModificationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextModification__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextModification__Group__3__Impl
	rule__ContextModification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModification__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModificationAccess().getModifiersAssignment_3()); }
(rule__ContextModification__ModifiersAssignment_3)*
{ after(grammarAccess.getContextModificationAccess().getModifiersAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextModification__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextModification__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModification__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModificationAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_24 

{ after(grammarAccess.getContextModificationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SetProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetProperty__Group__0__Impl
	rule__SetProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPropertyAccess().getPropertyAssignment_0()); }
(rule__SetProperty__PropertyAssignment_0)
{ after(grammarAccess.getSetPropertyAccess().getPropertyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetProperty__Group__1__Impl
	rule__SetProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPropertyAccess().getEqualsSignKeyword_1()); }

	KEYWORD_14 

{ after(grammarAccess.getSetPropertyAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetProperty__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPropertyAccess().getValueAssignment_2()); }
(rule__SetProperty__ValueAssignment_2)
{ after(grammarAccess.getSetPropertyAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnsetProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnsetProperty__Group__0__Impl
	rule__UnsetProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsetProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsetPropertyAccess().getUnsetKeyword_0()); }

	KEYWORD_57 

{ after(grammarAccess.getUnsetPropertyAccess().getUnsetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnsetProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnsetProperty__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsetProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsetPropertyAccess().getPropertyAssignment_1()); }
(rule__UnsetProperty__PropertyAssignment_1)
{ after(grammarAccess.getUnsetPropertyAccess().getPropertyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OverrideProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverrideProperty__Group__0__Impl
	rule__OverrideProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridePropertyAccess().getOverrideKeyword_0()); }

	KEYWORD_74 

{ after(grammarAccess.getOverridePropertyAccess().getOverrideKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverrideProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverrideProperty__Group__1__Impl
	rule__OverrideProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridePropertyAccess().getPropertyAssignment_1()); }
(rule__OverrideProperty__PropertyAssignment_1)
{ after(grammarAccess.getOverridePropertyAccess().getPropertyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverrideProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverrideProperty__Group__2__Impl
	rule__OverrideProperty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridePropertyAccess().getPathAssignment_2()); }
(rule__OverrideProperty__PathAssignment_2)
{ after(grammarAccess.getOverridePropertyAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverrideProperty__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverrideProperty__Group__3__Impl
	rule__OverrideProperty__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideProperty__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridePropertyAccess().getEqualsSignKeyword_3()); }

	KEYWORD_14 

{ after(grammarAccess.getOverridePropertyAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverrideProperty__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverrideProperty__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideProperty__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridePropertyAccess().getValueAssignment_4()); }
(rule__OverrideProperty__ValueAssignment_4)
{ after(grammarAccess.getOverridePropertyAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RevertProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RevertProperty__Group__0__Impl
	rule__RevertProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RevertProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRevertPropertyAccess().getRevertKeyword_0()); }

	KEYWORD_65 

{ after(grammarAccess.getRevertPropertyAccess().getRevertKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RevertProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RevertProperty__Group__1__Impl
	rule__RevertProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RevertProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRevertPropertyAccess().getPropertyAssignment_1()); }
(rule__RevertProperty__PropertyAssignment_1)
{ after(grammarAccess.getRevertPropertyAccess().getPropertyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RevertProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RevertProperty__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RevertProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRevertPropertyAccess().getPathAssignment_2()); }
(rule__RevertProperty__PathAssignment_2)
{ after(grammarAccess.getRevertPropertyAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ContextDefaultModifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDefaultModifier__Group__0__Impl
	rule__ContextDefaultModifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefaultModifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefaultModifierAccess().getContextDefaultModifierAction_0()); }
(

)
{ after(grammarAccess.getContextDefaultModifierAccess().getContextDefaultModifierAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextDefaultModifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDefaultModifier__Group__1__Impl
	rule__ContextDefaultModifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefaultModifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefaultModifierAccess().getTypeAssignment_1()); }
(rule__ContextDefaultModifier__TypeAssignment_1)
{ after(grammarAccess.getContextDefaultModifierAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextDefaultModifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDefaultModifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefaultModifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefaultModifierAccess().getValueAssignment_2()); }
(rule__ContextDefaultModifier__ValueAssignment_2)
{ after(grammarAccess.getContextDefaultModifierAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ContextDefaultModifierType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDefaultModifierType__Group__0__Impl
	rule__ContextDefaultModifierType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefaultModifierType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getContextDefaultModifierTypeAction_0()); }
(

)
{ after(grammarAccess.getContextDefaultModifierTypeAccess().getContextDefaultModifierTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextDefaultModifierType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextDefaultModifierType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefaultModifierType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefaultModifierTypeAccess().getAlternatives_1()); }
(rule__ContextDefaultModifierType__Alternatives_1)
{ after(grammarAccess.getContextDefaultModifierTypeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelativeMusic__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativeMusic__Group__0__Impl
	rule__RelativeMusic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getRelativeKeyword_0()); }

	KEYWORD_75 

{ after(grammarAccess.getRelativeMusicAccess().getRelativeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeMusic__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativeMusic__Group__1__Impl
	rule__RelativeMusic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getPitchAssignment_1()); }
(rule__RelativeMusic__PitchAssignment_1)?
{ after(grammarAccess.getRelativeMusicAccess().getPitchAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeMusic__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativeMusic__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getMusicAssignment_2()); }
(rule__RelativeMusic__MusicAssignment_2)
{ after(grammarAccess.getRelativeMusicAccess().getMusicAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RepeatedMusic__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RepeatedMusic__Group__0__Impl
	rule__RepeatedMusic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatedMusic__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatedMusicAccess().getRepeatKeyword_0()); }

	KEYWORD_64 

{ after(grammarAccess.getRepeatedMusicAccess().getRepeatKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RepeatedMusic__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RepeatedMusic__Group__1__Impl
	rule__RepeatedMusic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatedMusic__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatedMusicAccess().getTypeAssignment_1()); }
(rule__RepeatedMusic__TypeAssignment_1)
{ after(grammarAccess.getRepeatedMusicAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RepeatedMusic__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RepeatedMusic__Group__2__Impl
	rule__RepeatedMusic__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatedMusic__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatedMusicAccess().getNumberAssignment_2()); }
(rule__RepeatedMusic__NumberAssignment_2)
{ after(grammarAccess.getRepeatedMusicAccess().getNumberAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RepeatedMusic__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RepeatedMusic__Group__3__Impl
	rule__RepeatedMusic__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatedMusic__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatedMusicAccess().getMusicAssignment_3()); }
(rule__RepeatedMusic__MusicAssignment_3)
{ after(grammarAccess.getRepeatedMusicAccess().getMusicAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RepeatedMusic__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RepeatedMusic__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatedMusic__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatedMusicAccess().getAlternativeAssignment_4()); }
(rule__RepeatedMusic__AlternativeAssignment_4)?
{ after(grammarAccess.getRepeatedMusicAccess().getAlternativeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AlternativeMusic__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeMusic__Group__0__Impl
	rule__AlternativeMusic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeMusic__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeMusicAccess().getAlternativeMusicAction_0()); }
(

)
{ after(grammarAccess.getAlternativeMusicAccess().getAlternativeMusicAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeMusic__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeMusic__Group__1__Impl
	rule__AlternativeMusic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeMusic__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeMusicAccess().getAlternativeKeyword_1()); }

	KEYWORD_77 

{ after(grammarAccess.getAlternativeMusicAccess().getAlternativeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeMusic__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeMusic__Group__2__Impl
	rule__AlternativeMusic__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeMusic__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeMusicAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_22 

{ after(grammarAccess.getAlternativeMusicAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeMusic__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeMusic__Group__3__Impl
	rule__AlternativeMusic__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeMusic__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeMusicAccess().getMusicAssignment_3()); }
(rule__AlternativeMusic__MusicAssignment_3)*
{ after(grammarAccess.getAlternativeMusicAccess().getMusicAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeMusic__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeMusic__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeMusic__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeMusicAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_24 

{ after(grammarAccess.getAlternativeMusicAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Duration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Duration__Group__0__Impl
	rule__Duration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDurationAccess().getBaseAssignment_0()); }
(rule__Duration__BaseAssignment_0)
{ after(grammarAccess.getDurationAccess().getBaseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Duration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Duration__Group__1__Impl
	rule__Duration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDurationAccess().getDotsAssignment_1()); }
(rule__Duration__DotsAssignment_1)*
{ after(grammarAccess.getDurationAccess().getDotsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Duration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Duration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDurationAccess().getMultipliersAssignment_2()); }
(rule__Duration__MultipliersAssignment_2)*
{ after(grammarAccess.getDurationAccess().getMultipliersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DurationMultiplier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DurationMultiplier__Group__0__Impl
	rule__DurationMultiplier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DurationMultiplier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDurationMultiplierAccess().getAsteriskKeyword_0()); }

	KEYWORD_6 

{ after(grammarAccess.getDurationMultiplierAccess().getAsteriskKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DurationMultiplier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DurationMultiplier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DurationMultiplier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDurationMultiplierAccess().getFractionOrNumberParserRuleCall_1()); }
	ruleFractionOrNumber
{ after(grammarAccess.getDurationMultiplierAccess().getFractionOrNumberParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fraction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fraction__Group__0__Impl
	rule__Fraction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fraction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionAccess().getNumeratorAssignment_0()); }
(rule__Fraction__NumeratorAssignment_0)
{ after(grammarAccess.getFractionAccess().getNumeratorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fraction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fraction__Group__1__Impl
	rule__Fraction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fraction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionAccess().getSolidusKeyword_1()); }

	KEYWORD_11 

{ after(grammarAccess.getFractionAccess().getSolidusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fraction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fraction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fraction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionAccess().getDenominatorAssignment_2()); }
(rule__Fraction__DenominatorAssignment_2)
{ after(grammarAccess.getFractionAccess().getDenominatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FractionOrNumber__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FractionOrNumber__Group__0__Impl
	rule__FractionOrNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FractionOrNumber__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionOrNumberAccess().getNumeratorAssignment_0()); }
(rule__FractionOrNumber__NumeratorAssignment_0)
{ after(grammarAccess.getFractionOrNumberAccess().getNumeratorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FractionOrNumber__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FractionOrNumber__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FractionOrNumber__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionOrNumberAccess().getGroup_1()); }
(rule__FractionOrNumber__Group_1__0)?
{ after(grammarAccess.getFractionOrNumberAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FractionOrNumber__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FractionOrNumber__Group_1__0__Impl
	rule__FractionOrNumber__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FractionOrNumber__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionOrNumberAccess().getSolidusKeyword_1_0()); }

	KEYWORD_11 

{ after(grammarAccess.getFractionOrNumberAccess().getSolidusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FractionOrNumber__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FractionOrNumber__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FractionOrNumber__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionOrNumberAccess().getDenominatorAssignment_1_1()); }
(rule__FractionOrNumber__DenominatorAssignment_1_1)
{ after(grammarAccess.getFractionOrNumberAccess().getDenominatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContextChange__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextChange__Group__0__Impl
	rule__ContextChange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextChange__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextChangeAccess().getChangeKeyword_0()); }

	KEYWORD_58 

{ after(grammarAccess.getContextChangeAccess().getChangeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextChange__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextChange__Group__1__Impl
	rule__ContextChange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextChange__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextChangeAccess().getContextAssignment_1()); }
(rule__ContextChange__ContextAssignment_1)
{ after(grammarAccess.getContextChangeAccess().getContextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextChange__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextChange__Group__2__Impl
	rule__ContextChange__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextChange__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextChangeAccess().getEqualsSignKeyword_2()); }

	KEYWORD_14 

{ after(grammarAccess.getContextChangeAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextChange__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextChange__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextChange__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextChangeAccess().getIdAssignment_3()); }
(rule__ContextChange__IdAssignment_3)
{ after(grammarAccess.getContextChangeAccess().getIdAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MusicPropertyDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MusicPropertyDefinition__Group__0__Impl
	rule__MusicPropertyDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MusicPropertyDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicPropertyDefinitionAccess().getOnceAssignment_0()); }
(rule__MusicPropertyDefinition__OnceAssignment_0)?
{ after(grammarAccess.getMusicPropertyDefinitionAccess().getOnceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MusicPropertyDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MusicPropertyDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MusicPropertyDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicPropertyDefinitionAccess().getOperationAssignment_1()); }
(rule__MusicPropertyDefinition__OperationAssignment_1)
{ after(grammarAccess.getMusicPropertyDefinitionAccess().getOperationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OverrideMusicProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverrideMusicProperty__Group__0__Impl
	rule__OverrideMusicProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideMusicProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverrideMusicPropertyAccess().getOverrideKeyword_0()); }

	KEYWORD_74 

{ after(grammarAccess.getOverrideMusicPropertyAccess().getOverrideKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverrideMusicProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverrideMusicProperty__Group__1__Impl
	rule__OverrideMusicProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideMusicProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverrideMusicPropertyAccess().getObjectAssignment_1()); }
(rule__OverrideMusicProperty__ObjectAssignment_1)
{ after(grammarAccess.getOverrideMusicPropertyAccess().getObjectAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverrideMusicProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverrideMusicProperty__Group__2__Impl
	rule__OverrideMusicProperty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideMusicProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverrideMusicPropertyAccess().getPathAssignment_2()); }
(rule__OverrideMusicProperty__PathAssignment_2)
{ after(grammarAccess.getOverrideMusicPropertyAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverrideMusicProperty__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverrideMusicProperty__Group__3__Impl
	rule__OverrideMusicProperty__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideMusicProperty__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverrideMusicPropertyAccess().getEqualsSignKeyword_3()); }

	KEYWORD_14 

{ after(grammarAccess.getOverrideMusicPropertyAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverrideMusicProperty__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverrideMusicProperty__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideMusicProperty__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverrideMusicPropertyAccess().getValueAssignment_4()); }
(rule__OverrideMusicProperty__ValueAssignment_4)
{ after(grammarAccess.getOverrideMusicPropertyAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RevertMusicProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RevertMusicProperty__Group__0__Impl
	rule__RevertMusicProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RevertMusicProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRevertMusicPropertyAccess().getRevertKeyword_0()); }

	KEYWORD_65 

{ after(grammarAccess.getRevertMusicPropertyAccess().getRevertKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RevertMusicProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RevertMusicProperty__Group__1__Impl
	rule__RevertMusicProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RevertMusicProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRevertMusicPropertyAccess().getObjectAssignment_1()); }
(rule__RevertMusicProperty__ObjectAssignment_1)
{ after(grammarAccess.getRevertMusicPropertyAccess().getObjectAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RevertMusicProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RevertMusicProperty__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RevertMusicProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRevertMusicPropertyAccess().getPathAssignment_2()); }
(rule__RevertMusicProperty__PathAssignment_2)
{ after(grammarAccess.getRevertMusicPropertyAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetMusicProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMusicProperty__Group__0__Impl
	rule__SetMusicProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMusicProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMusicPropertyAccess().getSetKeyword_0()); }

	KEYWORD_42 

{ after(grammarAccess.getSetMusicPropertyAccess().getSetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetMusicProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMusicProperty__Group__1__Impl
	rule__SetMusicProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMusicProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMusicPropertyAccess().getObjectAssignment_1()); }
(rule__SetMusicProperty__ObjectAssignment_1)
{ after(grammarAccess.getSetMusicPropertyAccess().getObjectAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetMusicProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMusicProperty__Group__2__Impl
	rule__SetMusicProperty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMusicProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMusicPropertyAccess().getEqualsSignKeyword_2()); }

	KEYWORD_14 

{ after(grammarAccess.getSetMusicPropertyAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetMusicProperty__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMusicProperty__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMusicProperty__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMusicPropertyAccess().getValueAssignment_3()); }
(rule__SetMusicProperty__ValueAssignment_3)
{ after(grammarAccess.getSetMusicPropertyAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnsetMusicProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnsetMusicProperty__Group__0__Impl
	rule__UnsetMusicProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsetMusicProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsetMusicPropertyAccess().getUnsetKeyword_0()); }

	KEYWORD_57 

{ after(grammarAccess.getUnsetMusicPropertyAccess().getUnsetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnsetMusicProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnsetMusicProperty__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsetMusicProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsetMusicPropertyAccess().getObjectAssignment_1()); }
(rule__UnsetMusicProperty__ObjectAssignment_1)
{ after(grammarAccess.getUnsetMusicPropertyAccess().getObjectAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContextPropertySpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextPropertySpecification__Group__0__Impl
	rule__ContextPropertySpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextPropertySpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextPropertySpecificationAccess().getIdOrStringParserRuleCall_0()); }
	ruleIdOrString
{ after(grammarAccess.getContextPropertySpecificationAccess().getIdOrStringParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextPropertySpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextPropertySpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextPropertySpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextPropertySpecificationAccess().getGroup_1()); }
(rule__ContextPropertySpecification__Group_1__0)
{ after(grammarAccess.getContextPropertySpecificationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContextPropertySpecification__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextPropertySpecification__Group_1__0__Impl
	rule__ContextPropertySpecification__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextPropertySpecification__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextPropertySpecificationAccess().getFullStopKeyword_1_0()); }

	KEYWORD_10 

{ after(grammarAccess.getContextPropertySpecificationAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextPropertySpecification__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextPropertySpecification__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextPropertySpecification__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextPropertySpecificationAccess().getIdOrStringParserRuleCall_1_1()); }
	ruleIdOrString
{ after(grammarAccess.getContextPropertySpecificationAccess().getIdOrStringParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__LilyPond__ExpressionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLilyPondAccess().getExpressionsToplevelExpressionParserRuleCall_0()); }
	ruleToplevelExpression{ after(grammarAccess.getLilyPondAccess().getExpressionsToplevelExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameIdOrStringParserRuleCall_0_0()); }
	ruleIdOrString{ after(grammarAccess.getAssignmentAccess().getNameIdOrStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scheme__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeAccess().getValueSchemeExpressionParserRuleCall_1_0()); }
	ruleSchemeExpression{ after(grammarAccess.getSchemeAccess().getValueSchemeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__QuotedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0()); }
(
{ before(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0()); }

	KEYWORD_3 

{ after(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0()); }
)

{ after(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeExpressionAccess().getValueSchemeValueParserRuleCall_1_0()); }
	ruleSchemeValue{ after(grammarAccess.getSchemeExpressionAccess().getValueSchemeValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeBoolean__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeBooleanAccess().getValueBOOLTerminalRuleCall_0()); }
	RULE_BOOL{ after(grammarAccess.getSchemeBooleanAccess().getValueBOOLTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeList__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeListAccess().getExpressionsSchemeExpressionParserRuleCall_2_0()); }
	ruleSchemeExpression{ after(grammarAccess.getSchemeListAccess().getExpressionsSchemeExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeText__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeTextAccess().getValueSchemeTextLiteralsParserRuleCall_0()); }
	ruleSchemeTextLiterals{ after(grammarAccess.getSchemeTextAccess().getValueSchemeTextLiteralsParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__HexadecimalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getHexadecimalXKeyword_0_0()); }
(
{ before(grammarAccess.getSchemeNumberAccess().getHexadecimalXKeyword_0_0()); }

	KEYWORD_26 

{ after(grammarAccess.getSchemeNumberAccess().getHexadecimalXKeyword_0_0()); }
)

{ after(grammarAccess.getSchemeNumberAccess().getHexadecimalXKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemeNumber__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemeNumberAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSchemeNumberAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefinition__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefinitionAccess().getElementsContextDefinitionElementParserRuleCall_3_0()); }
	ruleContextDefinitionElement{ after(grammarAccess.getContextDefinitionAccess().getElementsContextDefinitionElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GrobDescriptions__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrobDescriptionsAccess().getValueSchemeParserRuleCall_1_0()); }
	ruleScheme{ after(grammarAccess.getGrobDescriptionsAccess().getValueSchemeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Header__AssignmentsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getAssignmentsPropertyAssignmentParserRuleCall_3_0()); }
	rulePropertyAssignment{ after(grammarAccess.getHeaderAccess().getAssignmentsPropertyAssignmentParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__PropertyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getPropertyIdOrStringParserRuleCall_0_0()); }
	ruleIdOrString{ after(grammarAccess.getPropertyAssignmentAccess().getPropertyIdOrStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssignmentAccess().getValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getPropertyAssignmentAccess().getValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Paper__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPaperAccess().getElementsOutputDefinitionElementParserRuleCall_3_0()); }
	ruleOutputDefinitionElement{ after(grammarAccess.getPaperAccess().getElementsOutputDefinitionElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Midi__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMidiAccess().getElementsOutputDefinitionElementParserRuleCall_3_0()); }
	ruleOutputDefinitionElement{ after(grammarAccess.getMidiAccess().getElementsOutputDefinitionElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Layout__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLayoutAccess().getElementsOutputDefinitionElementParserRuleCall_3_0()); }
	ruleOutputDefinitionElement{ after(grammarAccess.getLayoutAccess().getElementsOutputDefinitionElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Score__MusicAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreAccess().getMusicMusicParserRuleCall_2_0()); }
	ruleMusic{ after(grammarAccess.getScoreAccess().getMusicMusicParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Score__OtherAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreAccess().getOtherScoreElementParserRuleCall_3_0()); }
	ruleScoreElement{ after(grammarAccess.getScoreAccess().getOtherScoreElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Book__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookAccess().getElementsBookElementParserRuleCall_3_0()); }
	ruleBookElement{ after(grammarAccess.getBookAccess().getElementsBookElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BookPart__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBookPartAccess().getElementsBookPartElementParserRuleCall_3_0()); }
	ruleBookPartElement{ after(grammarAccess.getBookPartAccess().getElementsBookPartElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Version__VersionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionAccess().getVersionSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getVersionAccess().getVersionSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Include__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileName__FilenameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileNameAccess().getFilenameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getSourceFileNameAccess().getFilenameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFileLine__LineAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceFileLineAccess().getLineINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSourceFileLineAccess().getLineINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Note__PitchAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getPitchPitchParserRuleCall_0_0()); }
	rulePitch{ after(grammarAccess.getNoteAccess().getPitchPitchParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Note__DurationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getDurationDurationParserRuleCall_1_0()); }
	ruleDuration{ after(grammarAccess.getNoteAccess().getDurationDurationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Note__RestAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getRestRestKeyword_2_0()); }
(
{ before(grammarAccess.getNoteAccess().getRestRestKeyword_2_0()); }

	KEYWORD_48 

{ after(grammarAccess.getNoteAccess().getRestRestKeyword_2_0()); }
)

{ after(grammarAccess.getNoteAccess().getRestRestKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Note__PostEventsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getPostEventsPostEventParserRuleCall_3_0()); }
	rulePostEvent{ after(grammarAccess.getNoteAccess().getPostEventsPostEventParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__BaseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getBaseIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getPitchAccess().getBaseIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__OctaveCheckAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getOctaveCheckEqualsSignKeyword_1_0()); }
(
{ before(grammarAccess.getPitchAccess().getOctaveCheckEqualsSignKeyword_1_0()); }

	KEYWORD_14 

{ after(grammarAccess.getPitchAccess().getOctaveCheckEqualsSignKeyword_1_0()); }
)

{ after(grammarAccess.getPitchAccess().getOctaveCheckEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__OctaveShiftAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getOctaveShiftOctaveParserRuleCall_2_0()); }
	ruleOctave{ after(grammarAccess.getPitchAccess().getOctaveShiftOctaveParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__ReminderAccidentalAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getReminderAccidentalExclamationMarkKeyword_3_0()); }
(
{ before(grammarAccess.getPitchAccess().getReminderAccidentalExclamationMarkKeyword_3_0()); }

	KEYWORD_1 

{ after(grammarAccess.getPitchAccess().getReminderAccidentalExclamationMarkKeyword_3_0()); }
)

{ after(grammarAccess.getPitchAccess().getReminderAccidentalExclamationMarkKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pitch__CautionaryAccidentalAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPitchAccess().getCautionaryAccidentalQuestionMarkKeyword_4_0()); }
(
{ before(grammarAccess.getPitchAccess().getCautionaryAccidentalQuestionMarkKeyword_4_0()); }

	KEYWORD_16 

{ after(grammarAccess.getPitchAccess().getCautionaryAccidentalQuestionMarkKeyword_4_0()); }
)

{ after(grammarAccess.getPitchAccess().getCautionaryAccidentalQuestionMarkKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__UpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOctaveAccess().getUpApostropheKeyword_0_0()); }
(
{ before(grammarAccess.getOctaveAccess().getUpApostropheKeyword_0_0()); }

	KEYWORD_3 

{ after(grammarAccess.getOctaveAccess().getUpApostropheKeyword_0_0()); }
)

{ after(grammarAccess.getOctaveAccess().getUpApostropheKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__DownAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOctaveAccess().getDownCommaKeyword_1_0()); }
(
{ before(grammarAccess.getOctaveAccess().getDownCommaKeyword_1_0()); }

	KEYWORD_8 

{ after(grammarAccess.getOctaveAccess().getDownCommaKeyword_1_0()); }
)

{ after(grammarAccess.getOctaveAccess().getDownCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestAccess().getTypeIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getRestAccess().getTypeIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__DurationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestAccess().getDurationDurationParserRuleCall_1_0()); }
	ruleDuration{ after(grammarAccess.getRestAccess().getDurationDurationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__PostEventsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestAccess().getPostEventsPostEventParserRuleCall_2_0()); }
	rulePostEvent{ after(grammarAccess.getRestAccess().getPostEventsPostEventParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__NotesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChordAccess().getNotesNoteParserRuleCall_2_0()); }
	ruleNote{ after(grammarAccess.getChordAccess().getNotesNoteParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__DurationAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChordAccess().getDurationDurationParserRuleCall_4_0()); }
	ruleDuration{ after(grammarAccess.getChordAccess().getDurationDurationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__PostEventsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChordAccess().getPostEventsPostEventParserRuleCall_5_0()); }
	rulePostEvent{ after(grammarAccess.getChordAccess().getPostEventsPostEventParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__MusicFunctionAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getMusicFunctionReferenceParserRuleCall_0_1_0()); }
	ruleReference{ after(grammarAccess.getPostEventAccess().getMusicFunctionReferenceParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__DirectionAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getDirectionDirectionEnumRuleCall_1_0_0()); }
	ruleDirection{ after(grammarAccess.getPostEventAccess().getDirectionDirectionEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__EventAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getEventEventWithRequiredDirectionParserRuleCall_1_1_0()); }
	ruleEventWithRequiredDirection{ after(grammarAccess.getPostEventAccess().getEventEventWithRequiredDirectionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__DirectionAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getDirectionDirectionEnumRuleCall_2_0_0()); }
	ruleDirection{ after(grammarAccess.getPostEventAccess().getDirectionDirectionEnumRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostEvent__EventAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostEventAccess().getEventEventWithOptionalDirectionParserRuleCall_2_1_0()); }
	ruleEventWithOptionalDirection{ after(grammarAccess.getPostEventAccess().getEventEventWithOptionalDirectionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventWithRequiredDirection__ScriptAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventWithRequiredDirectionAccess().getScriptScriptWithRequiredDirectionEnumRuleCall_0_0()); }
	ruleScriptWithRequiredDirection{ after(grammarAccess.getEventWithRequiredDirectionAccess().getScriptScriptWithRequiredDirectionEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventWithOptionalDirection__ScriptAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventWithOptionalDirectionAccess().getScriptScriptWithOptionalDirectionEnumRuleCall_0_0()); }
	ruleScriptWithOptionalDirection{ after(grammarAccess.getEventWithOptionalDirectionAccess().getScriptScriptWithOptionalDirectionEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tremolo__DivisionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTremoloAccess().getDivisionINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getTremoloAccess().getDivisionINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__TonicAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeySignatureAccess().getTonicIDTerminalRuleCall_1_0_0_0()); }
	RULE_ID{ after(grammarAccess.getKeySignatureAccess().getTonicIDTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__ModeAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeySignatureAccess().getModeReferenceParserRuleCall_1_0_1_0()); }
	ruleReference{ after(grammarAccess.getKeySignatureAccess().getModeReferenceParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__DefaultAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeySignatureAccess().getDefaultDefaultKeyword_1_1_0()); }
(
{ before(grammarAccess.getKeySignatureAccess().getDefaultDefaultKeyword_1_1_0()); }

	KEYWORD_68 

{ after(grammarAccess.getKeySignatureAccess().getDefaultDefaultKeyword_1_1_0()); }
)

{ after(grammarAccess.getKeySignatureAccess().getDefaultDefaultKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeSignature__FractionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeSignatureAccess().getFractionFractionParserRuleCall_1_0()); }
	ruleFraction{ after(grammarAccess.getTimeSignatureAccess().getFractionFractionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__LabelAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoAccess().getLabelTempoLabelParserRuleCall_1_0_0_0()); }
	ruleTempoLabel{ after(grammarAccess.getTempoAccess().getLabelTempoLabelParserRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__ValueAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoAccess().getValueTempoValueParserRuleCall_1_0_1_0()); }
	ruleTempoValue{ after(grammarAccess.getTempoAccess().getValueTempoValueParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__LabelAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoAccess().getLabelTempoLabelParserRuleCall_1_1_0()); }
	ruleTempoLabel{ after(grammarAccess.getTempoAccess().getLabelTempoLabelParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TempoValue__DurationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoValueAccess().getDurationDurationParserRuleCall_0_0()); }
	ruleDuration{ after(grammarAccess.getTempoValueAccess().getDurationDurationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TempoValue__BpmAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTempoValueAccess().getBpmINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getTempoValueAccess().getBpmINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Partial__DurationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPartialAccess().getDurationDurationParserRuleCall_2_0()); }
	ruleDuration{ after(grammarAccess.getPartialAccess().getDurationDurationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__MarkAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkAccess().getMarkScalarParserRuleCall_2_0()); }
	ruleScalar{ after(grammarAccess.getMarkAccess().getMarkScalarParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__DurationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipAccess().getDurationDurationParserRuleCall_1_0()); }
	ruleDuration{ after(grammarAccess.getSkipAccess().getDurationDurationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__AssignmentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getAssignmentAssignmentCrossReference_1_0()); }
(
{ before(grammarAccess.getReferenceAccess().getAssignmentAssignmentIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getReferenceAccess().getAssignmentAssignmentIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getReferenceAccess().getAssignmentAssignmentCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__MusicAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getMusicMusicParserRuleCall_1_0_2_0()); }
	ruleMusic{ after(grammarAccess.getSequentialMusicAccess().getMusicMusicParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialMusic__MusicAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialMusicAccess().getMusicMusicParserRuleCall_1_1_1_0()); }
	ruleMusic{ after(grammarAccess.getSequentialMusicAccess().getMusicMusicParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__MusicAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getMusicMusicParserRuleCall_1_0_2_0()); }
	ruleMusic{ after(grammarAccess.getSimultaneousMusicAccess().getMusicMusicParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousMusic__MusicAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousMusicAccess().getMusicMusicParserRuleCall_1_1_1_0()); }
	ruleMusic{ after(grammarAccess.getSimultaneousMusicAccess().getMusicMusicParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__ContextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getContextIdOrStringParserRuleCall_1_0()); }
	ruleIdOrString{ after(grammarAccess.getNewContextAccess().getContextIdOrStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__IdAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getIdIdOrStringParserRuleCall_2_1_0()); }
	ruleIdOrString{ after(grammarAccess.getNewContextAccess().getIdIdOrStringParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__ModificationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getModificationContextModificationParserRuleCall_3_0()); }
	ruleContextModification{ after(grammarAccess.getNewContextAccess().getModificationContextModificationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewContext__MusicAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewContextAccess().getMusicMusicParserRuleCall_4_0()); }
	ruleMusic{ after(grammarAccess.getNewContextAccess().getMusicMusicParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextModification__ModifiersAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextModificationAccess().getModifiersContextModifierParserRuleCall_3_0()); }
	ruleContextModifier{ after(grammarAccess.getContextModificationAccess().getModifiersContextModifierParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetProperty__PropertyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPropertyAccess().getPropertyIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSetPropertyAccess().getPropertyIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetProperty__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPropertyAccess().getValueScalarParserRuleCall_2_0()); }
	ruleScalar{ after(grammarAccess.getSetPropertyAccess().getValueScalarParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnsetProperty__PropertyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsetPropertyAccess().getPropertyIdOrStringParserRuleCall_1_0()); }
	ruleIdOrString{ after(grammarAccess.getUnsetPropertyAccess().getPropertyIdOrStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideProperty__PropertyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridePropertyAccess().getPropertyIdOrStringParserRuleCall_1_0()); }
	ruleIdOrString{ after(grammarAccess.getOverridePropertyAccess().getPropertyIdOrStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideProperty__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridePropertyAccess().getPathSchemeParserRuleCall_2_0()); }
	ruleScheme{ after(grammarAccess.getOverridePropertyAccess().getPathSchemeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideProperty__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridePropertyAccess().getValueSchemeParserRuleCall_4_0()); }
	ruleScheme{ after(grammarAccess.getOverridePropertyAccess().getValueSchemeParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RevertProperty__PropertyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRevertPropertyAccess().getPropertyIdOrStringParserRuleCall_1_0()); }
	ruleIdOrString{ after(grammarAccess.getRevertPropertyAccess().getPropertyIdOrStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RevertProperty__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRevertPropertyAccess().getPathSchemeParserRuleCall_2_0()); }
	ruleScheme{ after(grammarAccess.getRevertPropertyAccess().getPathSchemeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefaultModifier__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefaultModifierAccess().getTypeContextDefaultModifierTypeParserRuleCall_1_0()); }
	ruleContextDefaultModifierType{ after(grammarAccess.getContextDefaultModifierAccess().getTypeContextDefaultModifierTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextDefaultModifier__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextDefaultModifierAccess().getValueIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getContextDefaultModifierAccess().getValueIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__PitchAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getPitchPitchParserRuleCall_1_0()); }
	rulePitch{ after(grammarAccess.getRelativeMusicAccess().getPitchPitchParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeMusic__MusicAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeMusicAccess().getMusicCompositeMusicParserRuleCall_2_0()); }
	ruleCompositeMusic{ after(grammarAccess.getRelativeMusicAccess().getMusicCompositeMusicParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatedMusic__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatedMusicAccess().getTypeIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRepeatedMusicAccess().getTypeIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatedMusic__NumberAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatedMusicAccess().getNumberINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getRepeatedMusicAccess().getNumberINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatedMusic__MusicAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatedMusicAccess().getMusicMusicParserRuleCall_3_0()); }
	ruleMusic{ after(grammarAccess.getRepeatedMusicAccess().getMusicMusicParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatedMusic__AlternativeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatedMusicAccess().getAlternativeAlternativeMusicParserRuleCall_4_0()); }
	ruleAlternativeMusic{ after(grammarAccess.getRepeatedMusicAccess().getAlternativeAlternativeMusicParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeMusic__MusicAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeMusicAccess().getMusicMusicOrSchemeParserRuleCall_3_0()); }
	ruleMusicOrScheme{ after(grammarAccess.getAlternativeMusicAccess().getMusicMusicOrSchemeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__BaseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDurationAccess().getBaseINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getDurationAccess().getBaseINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__DotsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDurationAccess().getDotsFullStopKeyword_1_0()); }
(
{ before(grammarAccess.getDurationAccess().getDotsFullStopKeyword_1_0()); }

	KEYWORD_10 

{ after(grammarAccess.getDurationAccess().getDotsFullStopKeyword_1_0()); }
)

{ after(grammarAccess.getDurationAccess().getDotsFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__MultipliersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDurationAccess().getMultipliersDurationMultiplierParserRuleCall_2_0()); }
	ruleDurationMultiplier{ after(grammarAccess.getDurationAccess().getMultipliersDurationMultiplierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fraction__NumeratorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionAccess().getNumeratorINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getFractionAccess().getNumeratorINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fraction__DenominatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionAccess().getDenominatorINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getFractionAccess().getDenominatorINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FractionOrNumber__NumeratorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionOrNumberAccess().getNumeratorINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getFractionOrNumberAccess().getNumeratorINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FractionOrNumber__DenominatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFractionOrNumberAccess().getDenominatorINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getFractionOrNumberAccess().getDenominatorINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextChange__ContextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextChangeAccess().getContextIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getContextChangeAccess().getContextIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextChange__IdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextChangeAccess().getIdIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getContextChangeAccess().getIdIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MusicPropertyDefinition__OnceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicPropertyDefinitionAccess().getOnceOnceKeyword_0_0()); }
(
{ before(grammarAccess.getMusicPropertyDefinitionAccess().getOnceOnceKeyword_0_0()); }

	KEYWORD_47 

{ after(grammarAccess.getMusicPropertyDefinitionAccess().getOnceOnceKeyword_0_0()); }
)

{ after(grammarAccess.getMusicPropertyDefinitionAccess().getOnceOnceKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MusicPropertyDefinition__OperationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMusicPropertyDefinitionAccess().getOperationMusicPropertyOperationParserRuleCall_1_0()); }
	ruleMusicPropertyOperation{ after(grammarAccess.getMusicPropertyDefinitionAccess().getOperationMusicPropertyOperationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideMusicProperty__ObjectAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverrideMusicPropertyAccess().getObjectContextPropertySpecificationParserRuleCall_1_0()); }
	ruleContextPropertySpecification{ after(grammarAccess.getOverrideMusicPropertyAccess().getObjectContextPropertySpecificationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideMusicProperty__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverrideMusicPropertyAccess().getPathSchemeParserRuleCall_2_0()); }
	ruleScheme{ after(grammarAccess.getOverrideMusicPropertyAccess().getPathSchemeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OverrideMusicProperty__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverrideMusicPropertyAccess().getValueScalarParserRuleCall_4_0()); }
	ruleScalar{ after(grammarAccess.getOverrideMusicPropertyAccess().getValueScalarParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RevertMusicProperty__ObjectAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRevertMusicPropertyAccess().getObjectContextPropertySpecificationParserRuleCall_1_0()); }
	ruleContextPropertySpecification{ after(grammarAccess.getRevertMusicPropertyAccess().getObjectContextPropertySpecificationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RevertMusicProperty__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRevertMusicPropertyAccess().getPathSchemeParserRuleCall_2_0()); }
	ruleScheme{ after(grammarAccess.getRevertMusicPropertyAccess().getPathSchemeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetMusicProperty__ObjectAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMusicPropertyAccess().getObjectContextPropertySpecificationParserRuleCall_1_0()); }
	ruleContextPropertySpecification{ after(grammarAccess.getSetMusicPropertyAccess().getObjectContextPropertySpecificationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetMusicProperty__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMusicPropertyAccess().getValueScalarParserRuleCall_3_0()); }
	ruleScalar{ after(grammarAccess.getSetMusicPropertyAccess().getValueScalarParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnsetMusicProperty__ObjectAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsetMusicPropertyAccess().getObjectContextPropertySpecificationParserRuleCall_1_0()); }
	ruleContextPropertySpecification{ after(grammarAccess.getUnsetMusicPropertyAccess().getObjectContextPropertySpecificationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


