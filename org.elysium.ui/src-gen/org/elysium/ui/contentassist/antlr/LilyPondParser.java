/*
* generated by Xtext
*/
package org.elysium.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.elysium.services.LilyPondGrammarAccess;

public class LilyPondParser extends AbstractContentAssistParser {
	
	@Inject
	private LilyPondGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.elysium.ui.contentassist.antlr.internal.InternalLilyPondParser createParser() {
		org.elysium.ui.contentassist.antlr.internal.InternalLilyPondParser result = new org.elysium.ui.contentassist.antlr.internal.InternalLilyPondParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getBlockAccess().getAlternatives(), "rule__Block__Alternatives");
					put(grammarAccess.getSchemeValueAccess().getAlternatives(), "rule__SchemeValue__Alternatives");
					put(grammarAccess.getSchemeTextLiteralsAccess().getAlternatives(), "rule__SchemeTextLiterals__Alternatives");
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getCustomCommandAccess().getAlternatives(), "rule__CustomCommand__Alternatives");
					put(grammarAccess.getShortCommandAccess().getIdAlternatives_1_0(), "rule__ShortCommand__IdAlternatives_1_0");
					put(grammarAccess.getPresetCommandAccess().getAlternatives(), "rule__PresetCommand__Alternatives");
					put(grammarAccess.getTextAccess().getValueAlternatives_0(), "rule__Text__ValueAlternatives_0");
					put(grammarAccess.getSimpleBlockAccess().getGroup(), "rule__SimpleBlock__Group__0");
					put(grammarAccess.getSimultaneousBlockAccess().getGroup(), "rule__SimultaneousBlock__Group__0");
					put(grammarAccess.getSchemeAccess().getGroup(), "rule__Scheme__Group__0");
					put(grammarAccess.getSchemeExpressionAccess().getGroup(), "rule__SchemeExpression__Group__0");
					put(grammarAccess.getSchemeListAccess().getGroup(), "rule__SchemeList__Group__0");
					put(grammarAccess.getSchemeBlockAccess().getGroup(), "rule__SchemeBlock__Group__0");
					put(grammarAccess.getLongCommandAccess().getGroup(), "rule__LongCommand__Group__0");
					put(grammarAccess.getShortCommandAccess().getGroup(), "rule__ShortCommand__Group__0");
					put(grammarAccess.getIncludeAccess().getGroup(), "rule__Include__Group__0");
					put(grammarAccess.getIncludeKeywordAccess().getGroup(), "rule__IncludeKeyword__Group__0");
					put(grammarAccess.getVersionAccess().getGroup(), "rule__Version__Group__0");
					put(grammarAccess.getVersionKeywordAccess().getGroup(), "rule__VersionKeyword__Group__0");
					put(grammarAccess.getLilyPondAccess().getExpressionsAssignment(), "rule__LilyPond__ExpressionsAssignment");
					put(grammarAccess.getSimpleBlockAccess().getExpressionsAssignment_2(), "rule__SimpleBlock__ExpressionsAssignment_2");
					put(grammarAccess.getSimultaneousBlockAccess().getExpressionsAssignment_2(), "rule__SimultaneousBlock__ExpressionsAssignment_2");
					put(grammarAccess.getSchemeAccess().getValueAssignment_1(), "rule__Scheme__ValueAssignment_1");
					put(grammarAccess.getSchemeExpressionAccess().getQuotedAssignment_0(), "rule__SchemeExpression__QuotedAssignment_0");
					put(grammarAccess.getSchemeExpressionAccess().getValueAssignment_1(), "rule__SchemeExpression__ValueAssignment_1");
					put(grammarAccess.getSchemeBooleanAccess().getValueAssignment(), "rule__SchemeBoolean__ValueAssignment");
					put(grammarAccess.getSchemeListAccess().getExpressionsAssignment_1(), "rule__SchemeList__ExpressionsAssignment_1");
					put(grammarAccess.getSchemeBlockAccess().getExpressionsAssignment_1(), "rule__SchemeBlock__ExpressionsAssignment_1");
					put(grammarAccess.getSchemeTextAccess().getValueAssignment(), "rule__SchemeText__ValueAssignment");
					put(grammarAccess.getLongCommandAccess().getIdAssignment_1(), "rule__LongCommand__IdAssignment_1");
					put(grammarAccess.getShortCommandAccess().getIdAssignment_1(), "rule__ShortCommand__IdAssignment_1");
					put(grammarAccess.getIncludeAccess().getIdAssignment_0(), "rule__Include__IdAssignment_0");
					put(grammarAccess.getIncludeAccess().getImportURIAssignment_1(), "rule__Include__ImportURIAssignment_1");
					put(grammarAccess.getVersionAccess().getIdAssignment_0(), "rule__Version__IdAssignment_0");
					put(grammarAccess.getVersionAccess().getVersionAssignment_1(), "rule__Version__VersionAssignment_1");
					put(grammarAccess.getTextAccess().getValueAssignment(), "rule__Text__ValueAssignment");
					put(grammarAccess.getNumberAccess().getValueAssignment(), "rule__Number__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.elysium.ui.contentassist.antlr.internal.InternalLilyPondParser typedParser = (org.elysium.ui.contentassist.antlr.internal.InternalLilyPondParser) parser;
			typedParser.entryRuleLilyPond();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT" };
	}
	
	public LilyPondGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LilyPondGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
