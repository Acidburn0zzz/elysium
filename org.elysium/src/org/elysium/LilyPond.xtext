grammar org.elysium.LilyPond

hidden(WS, SL_COMMENT, ML_COMMENT)

generate lilyPond "http://www.elysium.org/LilyPond"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

LilyPond: expressions+=ToplevelExpression*;

ToplevelExpression: Assignment | Scheme | Header | Book | BookPart | Score | CompositeMusic | Markup | MarkupLines | OutputDefinition | Version | Include | SourceFileName | SourceFileLine;

Assignment: name=IdOrString "=" value=Value;

Value: Score | Book | BookPart | OutputDefinition | ContextDefinition | Music | PostEvent | STRING | Scheme | Markup | INT; /* TODO string '+' string */

Scheme: "#" value=SchemeExpression;

SchemeExpression: quoted?="'"? value=SchemeValue;

SchemeValue: SchemeBoolean | SchemeList | SchemeBlock | SchemeText | SchemeNumber;

SchemeBoolean: value=BOOL;

SchemeList: {SchemeList} "(" expressions+=SchemeExpression* ")";

SchemeBlock: "#{" /* TODO notemode */ "#}";

SchemeText: value=SchemeTextLiterals;

SchemeTextLiterals: "\\\\" | IdOrString | ANY_OTHER;

SchemeNumber hidden(): hexadecimal?="#x"? value=INT;

ContextDefinition: {ContextDefinition} "\\context" "{" elements+=ContextDefinitionElement* "}";

ContextDefinitionElement: GrobDescriptions | ContextModifier;

GrobDescriptions: "\\grobdescriptions" value=Scheme;

Header: {Header} "\\header" "{" assignments+=PropertyAssignment* "}";

PropertyAssignment: property=IdOrString "=" value=Value;

OutputDefinition: Paper | Midi | Layout;

OutputDefinitionElement: PropertyAssignment | ContextDefinition;

Paper: {Paper} "\\paper" "{" elements+=OutputDefinitionElement* "}";

Midi: {Midi} "\\midi" "{" elements+=OutputDefinitionElement* "}";

Layout: {Layout} "\\layout" "{" elements+=OutputDefinitionElement* "}";

Score: "\\score" "{" music=Music other+=ScoreElement* "}";

ScoreElement: Music | Header | OutputDefinition;

Book: {Book} "\\book" "{" elements+=BookElement* "}";

BookElement: BookPart | BookPartElement;

BookPart: {BookPart} "\\bookpart" "{" elements+=BookPartElement* "}";

BookPartElement: Paper | Score | CompositeMusic | Markup | MarkupLines | Header; 

Markup: {Markup} "\\markup" "{" /* TODO */ "}";

MarkupLines: {MarkupLines} "\\markuplines" "{" /* TODO */ "}";

Version: "\\version" version=STRING;

Include: "\\include" importURI=STRING;

SourceFileName: "\\sourcefilename" filename=STRING;

SourceFileLine: "\\sourcefileline" line=INT;

Music: SimpleMusic | CompositeMusic;

SimpleMusic: Event | ContextChange | MusicPropertyDefinition;

Event: Note | Rest | Chord | KeySignature | TimeSignature | Tempo | Partial | Mark | Skip | Tie | BeamStart | BeamEnd | BarCheck | Reference;

Note: pitch=Pitch duration=Duration? rest?="\\rest"? postEvents+=PostEvent*;

Pitch: base=ID octaveCheck?="="? octaveShift=Octave? reminderAccidental?="!"? cautionaryAccidental?="?"?;

Octave: up+="'"+ | down+=","+;

Rest: type=ID duration=Duration? postEvents+=PostEvent*;

Chord: {Chord} "<" notes+=Note* ">" duration=Duration? postEvents+=PostEvent*;

PostEvent: "-" musicFunction=Reference | direction=Direction event=EventWithRequiredDirection | direction=Direction? event=EventWithOptionalDirection;

enum Direction: default="-" | above="^" | below="_";

EventWithRequiredDirection: script=ScriptWithRequiredDirection | GenTextDef;

enum ScriptWithRequiredDirection: marcato="^" | stopped="+" | tenuto="-" | staccatissimo="|" | accent=">" | staccato="." | portato="_";

GenTextDef: Markup | STRING | INT;

EventWithOptionalDirection: script=ScriptWithOptionalDirection | Tremolo;

enum ScriptWithOptionalDirection: beamStart='[' | beamEnd=']' | tie='~' | slurStart='(' | slurEnd=')' | phrasingSlurStart="\\(" | phrasingSlurEnd="\\)" | diminuendo="\\>" | crescendo="\\<" | dynamicChangeEnd="\\!";

Tremolo: {Tremolo} ":" division=INT?;

KeySignature: "\\key" ((tonic=ID mode=Reference) | default?="\\default");

TimeSignature: "\\time" fraction=Fraction;

Tempo: "\\tempo" ((label=TempoLabel? value=TempoValue) | (label=TempoLabel));  

TempoLabel: STRING | Markup;

TempoValue: duration=Duration "=" bpm=INT;

Partial: {Partial} "\\partial" duration=Duration;

Mark: {Mark} "\\mark" mark=Scalar;

Skip: "\\skip" duration=Duration;

Tie: {Tie} "\\~";

BeamStart: {BeamStart} "\\[";

BeamEnd: {BeamEnd} "\\]";

BarCheck: {BarCheck} "|";

Reference hidden(): "\\" assignment=[Assignment];

CompositeMusic: SequentialMusic | SimultaneousMusic | NewContext | RelativeMusic | RepeatedMusic;

SequentialMusic: {SequentialMusic} ("\\sequential" "{" music+=Music* "}" | "{" music+=Music* "}");

SimultaneousMusic: {SimultaneousMusic} ("\\simultaneous" "{" music+=Music* "}" | "<<" music+=Music* ">>");

NewContext: "\\new" context=IdOrString ("=" id=IdOrString)? modification=ContextModification? music=Music;

ContextModification: {ContextModification} "\\with" "{" modifiers+=ContextModifier* "}";

ContextModifier: PropertyOperation | ContextDefaultModifier;

PropertyOperation: SetProperty | UnsetProperty | OverrideProperty | RevertProperty;

SetProperty: property=ID "=" value=Scalar;

Scalar: IdOrString | INT | Scheme | Markup;

UnsetProperty: "\\unset" property=IdOrString;

OverrideProperty: "\\override" property=IdOrString path=Scheme "=" value=Scheme;
  
RevertProperty: "\\revert" property=IdOrString path=Scheme;

ContextDefaultModifier: {ContextDefaultModifier} type=ContextDefaultModifierType value=ID;

ContextDefaultModifierType: {ContextDefaultModifierType} ("\\consists" | "\\remove" | "\\accepts" | "\\defaultchild" | "\\denies" | "\\alias" | "\\type" | "\\description" | "\\name");

RelativeMusic: "\\relative" pitch=Pitch? music=CompositeMusic;

RepeatedMusic: "\\repeat" type=ID number=INT music=Music alternative=AlternativeMusic?;

AlternativeMusic: {AlternativeMusic} "\\alternative" "{" music+=MusicOrScheme* "}";

MusicOrScheme: Music | Scheme;

Duration: base=INT dots+="."* multipliers+=DurationMultiplier*;

DurationMultiplier: "*" FractionOrNumber;

Fraction hidden(): numerator=INT "/" denominator=INT;

FractionOrNumber hidden(): numerator=INT ("/" denominator=INT)?;

ContextChange: "\\change" context=ID "=" id=ID;

MusicPropertyDefinition: once?="\\once"? operation=MusicPropertyOperation;

MusicPropertyOperation: OverrideMusicProperty | RevertMusicProperty | SetMusicProperty | UnsetMusicProperty;

OverrideMusicProperty: "\\override" object=ContextPropertySpecification path=Scheme "=" value=Scalar;

RevertMusicProperty: "\\revert" object=ContextPropertySpecification path=Scheme;

SetMusicProperty: "\\set" object=ContextPropertySpecification "=" value=Scalar;

UnsetMusicProperty: "\\unset" object=ContextPropertySpecification;

ContextPropertySpecification: IdOrString ("." IdOrString);

IdOrString: ID | STRING;

terminal STRING: '"' ("\\" ("b" | "t" | "n" | "f" | "r" | '"' | "'" | "\\") | !("\\" | '"'))* '"';

terminal INT returns ecore::EInt: ("0".."9")+;

terminal BOOL returns ecore::EBoolean: "#f" | "#t";

terminal ID: ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "-")*;

terminal WS: (" " | "\t" | "\r" | "\n")+;

terminal SL_COMMENT: "%" !("\n" | "\r")* ("\r"? "\n")?;

terminal ML_COMMENT: "%{" -> "%}";

terminal ANY_OTHER:	.;