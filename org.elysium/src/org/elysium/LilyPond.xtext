grammar org.elysium.LilyPond hidden(WS, SL_COMMENT, ML_COMMENT)

generate lilypond "http://www.elysium.org/LilyPond"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

LilyPond: expressions+=ToplevelExpression*;

ToplevelExpression: Assignment | CommonExpression;

Expression: PropertyAssignment | CommonExpression;

CommonExpression: Command | Block | Scheme | Text | Number;

Assignment: name=(Identifier | STRING) "=" value=Expression;

PropertyAssignment: id=(Identifier | STRING) "=" value=Expression;

Block: SimpleBlock | SimultaneousBlock;

SimpleBlock: {SimpleBlock} "{" expressions+=Expression* "}";

SimultaneousBlock: {SimultaneousBlock} "<<" expressions+=Expression* ">>";

Command: SpecialCommand | Reference;

SpecialCommand: Include | Version | Markup | MarkupLines | Context | Other;

Include: "\\" "include" importURI=STRING;

Version: "\\" "version" version=STRING;

Markup: "\\" "markup" body=MarkupBody;

MarkupLines: "\\" "markuplines" body=MarkupBody;

MarkupBody: {MarkupBody} command+=(Scheme | UnparsedCommand)* block=UnparsedBlock?;

Context: {Context} "\\" "context" block=UnparsedBlock?;

Other: "\\" keyword=(SpecialCharacter | "(" | ")" | OtherName);

OtherName: "accepts" | "addlyrics" | "alias" | "alternative" | "book" | "bookpart" | "change" | "chordmode" | "chords" | "consists" | "default" | "defaultchild" | "denies" | "description" | "drummode" | "drums" | "figuremode" | "figures" | "grobdescriptions" | "header" | "key" | "layout" | "lyricmode" | "lyrics" | "lyricsto" | "maininput" | "mark" | "midi" | "name" | "new" | "notemode" | "objectid" | "octave" | "once" | "override" | "paper" | "partial" | "relative" | "remove" | "repeat" | "rest" | "revert" | "score" | "sequential" | "set" | "simultaneous" | "skip" | "sourcefileline" | "sourcefilename" | "tempo" | "time" | "times" | "transpose" | "type" | "unset" | "with";

SpecialCommandName: "include" | "version" | "markup" | "markuplines" | "context" | OtherName;

SpecialCharacter: "!" | "+" | "<" | ">" | "[" | "]" | "~";

UnparsedBlock: {UnparsedBlock} "{" expressions+=UnparsedExpression* "}";

UnparsedExpression: UnparsedCommand | UnparsedBlock | Scheme | Text | Number;

UnparsedCommand: "\\" command=(Identifier | SpecialCommandName);

Reference: "\\" assignment=[Assignment|Identifier];

Text: value=(SchemeTextLiteral | "(" | ")" | "'" | "," | ":");

Number: value=INT;

Scheme hidden(WS, SCHEME_SL_COMMENT, SCHEME_ML_COMMENT): "#" value=SchemeExpression;

SchemeExpression: (quoted?="'"? | quasiquoted?="`"? | unquoted?=","? | variable?="$"?)? value=SchemeValue;

SchemeValue: SchemeBoolean | SchemeList | SchemeBlock | SchemeCharacter | SchemeText | SchemeNumber| SchemeMarkupCommand;

SchemeBoolean: value=Boolean;

SchemeList: {SchemeList} (vector?="#")? "(" expressions+=SchemeExpression* ")";

SchemeBlock: "#{" expressions+=Expression+ "#}";

SchemeCharacter: "#\\" value=(ALPHA | SpecialCharacter | ANY_OTHER);

SchemeText: value=SchemeId;

SchemeId hidden(): SchemeTextLiteral ((":" | "::") SchemeTextLiteral)*;

SchemeTextLiteral: "\\\\" | "=" | "-" | SpecialCharacter | SpecialCommandName | Identifier | STRING | ANY_OTHER;

SchemeNumber hidden(): radix=SchemeNumberRadix? value=INT;

SchemeNumberRadix: "#" ALPHA;

SchemeMarkupCommand hidden(): "#:" command=(Identifier | SpecialCommandName);

Identifier hidden(): ALPHA ("-" ALPHA)*;

Boolean returns ecore::EBoolean: "#" ALPHA;

terminal STRING: '"' ("\\" ("b" | "t" | "n" | "f" | "r" | '"' | "'" | "\\") | !("\\" | '"'))* '"';

terminal INT returns ecore::EInt: ("0".."9")+;

terminal ALPHA: ("a".."z" | "A".."Z")+;

terminal WS: (" " | "\t" | "\r" | "\n")+;

terminal SL_COMMENT: "%" !("\n" | "\r")* ("\r"? "\n")?;

terminal ML_COMMENT: "%{" -> "%}";

terminal SCHEME_SL_COMMENT: ";" !("\n" | "\r")* ("\r"? "\n")?;

terminal SCHEME_ML_COMMENT: "#!" -> "!#";

terminal ANY_OTHER:	.;