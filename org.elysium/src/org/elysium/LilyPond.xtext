grammar org.elysium.LilyPond

hidden(WS, SL_COMMENT, ML_COMMENT)

generate lilyPond "http://www.elysium.org/LilyPond"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

LilyPond: expressions+=Expression*;

Expression: Block | Scheme | Command | Text | Number;

Block: SimpleBlock | SimultaneousBlock;

SimpleBlock: {SimpleBlock} "{" expressions+=Expression* "}";

SimultaneousBlock: {SimultaneousBlock} "<<" expressions+=Expression* ">>";

Scheme: "#" value=SchemeExpression;

SchemeExpression: (quoted?="'"? | quasiquoted?="`"? | unquoted?=","?) value=SchemeValue;

SchemeValue: SchemeBoolean | SchemeList | SchemeBlock | SchemeText | SchemeNumber;

SchemeBoolean: value=BOOL;

SchemeList: {SchemeList} "(" expressions+=SchemeExpression* ")";

SchemeBlock: "#{" expressions+=Expression+ "#}";

SchemeText: value=SchemeTextLiterals;

SchemeTextLiterals: "\\\\" | ID | STRING | ANY_OTHER;

SchemeNumber hidden(): hexadecimal?="#x"? value=INT;

Command: ArbitraryCommand | SpecialCommand;

ArbitraryCommand: keyword=ArbitraryCommandKeyword;

ArbitraryCommandKeyword hidden(): "\\" (ID | "(" | ")" | ANY_OTHER);

SpecialCommand: Include | Version | SourceFileName | SourceFileLine;

Include: "\\include" importURI=STRING;

Version: "\\version" version=STRING;

SourceFileName: "\\sourcefilename" filename=STRING;

SourceFileLine: "\\sourcefileline" line=INT;

Text: value=(SchemeTextLiterals | "'" | "," | "(" | ")");

Number: value=INT;

terminal STRING: '"' ("\\" ("b" | "t" | "n" | " f" | "r" | '"' | "'" | "\\") | !("\\" | '"'))* '"';

terminal INT returns ecore::EInt: ("0".."9")+;

terminal BOOL returns ecore::EBoolean: "#f" | "#t";

terminal ID: ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "-")*;

terminal WS: (" " | "\t" | "\r" | "\n")+;

terminal SL_COMMENT: "%" !("\n" | "\r")* ("\r"? "\n")?;

terminal ML_COMMENT: "%{" -> "%}";

terminal ANY_OTHER:	.;