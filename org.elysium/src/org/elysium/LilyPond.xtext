grammar org.elysium.LilyPond

hidden(WS, SL_COMMENT, ML_COMMENT)

generate lilypond "http://www.elysium.org/LilyPond"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

LilyPond: expressions+=ToplevelExpression*;

ToplevelExpression: Assignment | CommonExpression;

Expression: PropertyAssignment | CommonExpression;

CommonExpression: Command | Block | Scheme | Text | Number;

Assignment: name=(ID | STRING) "=" value=Expression;

PropertyAssignment: id=(ID | STRING) "=" value=Expression;

Block: SimpleBlock | SimultaneousBlock;

SimpleBlock: {SimpleBlock} "{" expressions+=Expression* "}";

SimultaneousBlock: {SimultaneousBlock} "<<" expressions+=Expression* ">>";

Command: SpecialCommand | Reference;

SpecialCommand: Include | Version | Markup;

Include: "\\" keyword="include" importURI=STRING;

Version: "\\" keyword="version" version=STRING;

Markup: "\\" keyword=("markup" | "markuplines") block=MarkupBlock;

MarkupBlock: {MarkupBlock} "{" expressions+=MarkupExpression* "}";

MarkupExpression: MarkupCommand | MarkupBlock | Scheme | Text | Number;

MarkupCommand: "\\" command=ID;

Reference: "\\" assignment=[Assignment|ReferenceName];

ReferenceName: ID | "(" | ")" | SpecialCharacter;

SpecialCharacter: "!" | "+" | "<" | ">" | "[" | "]" | "~";

Text: value=(SchemeTextLiterals | "(" | ")" | "'" | ",");

Number: value=INT;

Scheme hidden(WS, SCHEME_SL_COMMENT, SCHEME_ML_COMMENT): "#" value=SchemeExpression;

SchemeExpression: (quoted?="'"? | quasiquoted?="`"? | unquoted?=","? | variable?="$") value=SchemeValue;

SchemeValue: SchemeBoolean | SchemeList | SchemeBlock | SchemeCharacter | SchemeText | SchemeNumber| SchemeMarkupCommand;

SchemeBoolean: value=BOOL;

SchemeList: {SchemeList} vector?="#"? "(" expressions+=SchemeExpression* ")";

SchemeBlock: "#{" expressions+=Expression+ "#}";

SchemeCharacter: "#\\" value=(ID | SpecialCharacter | ANY_OTHER);

SchemeText: value=SchemeTextLiterals;

SchemeTextLiterals: "\\\\" | "=" | SpecialCharacter | ID | STRING | ANY_OTHER;

SchemeNumber hidden(): radix=SchemeNumberRadix? value=INT;

SchemeNumberRadix hidden(): "#" ID;

SchemeMarkupCommand hidden(): "#:" command=ID;

terminal STRING: '"' ("\\" ("b" | "t" | "n" | "f" | "r" | '"' | "'" | "\\") | !("\\" | '"'))* '"';

terminal INT returns ecore::EInt: ("0".."9")+;

BOOL returns ecore::EBoolean: "#" ID;

terminal ID: ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "-")*;

terminal WS: (" " | "\t" | "\r" | "\n")+;

terminal SL_COMMENT: "%" !("\n" | "\r")* ("\r"? "\n")?;

terminal ML_COMMENT: "%{" -> "%}";

terminal SCHEME_SL_COMMENT: ";" !("\n" | "\r")* ("\r"? "\n")?;

terminal SCHEME_ML_COMMENT: "#!" -> "!#";

terminal ANY_OTHER:	.;