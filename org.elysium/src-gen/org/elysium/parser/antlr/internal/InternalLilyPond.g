/*
* generated by Xtext
*/
parser grammar InternalLilyPond;

options {
	tokenVocab=InternalLilyPond;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package org.elysium.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.elysium.services.LilyPondGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

 	private LilyPondGrammarAccess grammarAccess;
 	
    public InternalLilyPondParser(TokenStream input, IAstFactory factory, LilyPondGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/elysium/parser/antlr/internal/InternalLilyPond.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LilyPond";	
   	} 
   	   	
   	@Override
   	protected LilyPondGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLilyPond
entryRuleLilyPond returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getLilyPondRule(), currentNode); }
	 iv_ruleLilyPond=ruleLilyPond 
	 { $current=$iv_ruleLilyPond.current; } 
	 EOF 
;

// Rule LilyPond
ruleLilyPond returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLilyPondAccess().getExpressionsToplevelExpressionParserRuleCall_0(), currentNode); 
	    }
		lv_expressions_0_0=ruleToplevelExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLilyPondRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_0_0, 
	        		"ToplevelExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
;





// Entry rule entryRuleToplevelExpression
entryRuleToplevelExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getToplevelExpressionRule(), currentNode); }
	 iv_ruleToplevelExpression=ruleToplevelExpression 
	 { $current=$iv_ruleToplevelExpression.current; } 
	 EOF 
;

// Rule ToplevelExpression
ruleToplevelExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getToplevelExpressionAccess().getAssignmentParserRuleCall_0(), currentNode); 
    }
    this_Assignment_0=ruleAssignment
    {
        $current = $this_Assignment_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getToplevelExpressionAccess().getCommonExpressionParserRuleCall_1(), currentNode); 
    }
    this_CommonExpression_1=ruleCommonExpression
    {
        $current = $this_CommonExpression_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getPropertyAssignmentParserRuleCall_0(), currentNode); 
    }
    this_PropertyAssignment_0=rulePropertyAssignment
    {
        $current = $this_PropertyAssignment_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getCommonExpressionParserRuleCall_1(), currentNode); 
    }
    this_CommonExpression_1=ruleCommonExpression
    {
        $current = $this_CommonExpression_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCommonExpression
entryRuleCommonExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCommonExpressionRule(), currentNode); }
	 iv_ruleCommonExpression=ruleCommonExpression 
	 { $current=$iv_ruleCommonExpression.current; } 
	 EOF 
;

// Rule CommonExpression
ruleCommonExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCommonExpressionAccess().getCommandParserRuleCall_0(), currentNode); 
    }
    this_Command_0=ruleCommand
    {
        $current = $this_Command_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCommonExpressionAccess().getBlockParserRuleCall_1(), currentNode); 
    }
    this_Block_1=ruleBlock
    {
        $current = $this_Block_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCommonExpressionAccess().getSchemeParserRuleCall_2(), currentNode); 
    }
    this_Scheme_2=ruleScheme
    {
        $current = $this_Scheme_2.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCommonExpressionAccess().getTextParserRuleCall_3(), currentNode); 
    }
    this_Text_3=ruleText
    {
        $current = $this_Text_3.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCommonExpressionAccess().getNumberParserRuleCall_4(), currentNode); 
    }
    this_Number_4=ruleNumber
    {
        $current = $this_Number_4.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentRule(), currentNode); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_name_0_1=RULE_ID
		{
			createLeafNode(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_1, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_name_0_2=RULE_STRING
		{
			createLeafNode(grammarAccess.getAssignmentAccess().getNameSTRINGTerminalRuleCall_0_0_1(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_2, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePropertyAssignment
entryRulePropertyAssignment returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyAssignmentRule(), currentNode); }
	 iv_rulePropertyAssignment=rulePropertyAssignment 
	 { $current=$iv_rulePropertyAssignment.current; } 
	 EOF 
;

// Rule PropertyAssignment
rulePropertyAssignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_id_0_1=RULE_ID
		{
			createLeafNode(grammarAccess.getPropertyAssignmentAccess().getIdIDTerminalRuleCall_0_0_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_0_1, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_id_0_2=RULE_STRING
		{
			createLeafNode(grammarAccess.getPropertyAssignmentAccess().getIdSTRINGTerminalRuleCall_0_0_1(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_0_2, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getPropertyAssignmentAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyAssignmentAccess().getValueExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getSimpleBlockParserRuleCall_0(), currentNode); 
    }
    this_SimpleBlock_0=ruleSimpleBlock
    {
        $current = $this_SimpleBlock_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getSimultaneousBlockParserRuleCall_1(), currentNode); 
    }
    this_SimultaneousBlock_1=ruleSimultaneousBlock
    {
        $current = $this_SimultaneousBlock_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSimpleBlock
entryRuleSimpleBlock returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleBlockRule(), currentNode); }
	 iv_ruleSimpleBlock=ruleSimpleBlock 
	 { $current=$iv_ruleSimpleBlock.current; } 
	 EOF 
;

// Rule SimpleBlock
ruleSimpleBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSimpleBlockAccess().getSimpleBlockAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSimpleBlockAccess().getSimpleBlockAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
	KEYWORD_16 
    {
        createLeafNode(grammarAccess.getSimpleBlockAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleBlockAccess().getExpressionsExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_17 
    {
        createLeafNode(grammarAccess.getSimpleBlockAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleSimultaneousBlock
entryRuleSimultaneousBlock returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimultaneousBlockRule(), currentNode); }
	 iv_ruleSimultaneousBlock=ruleSimultaneousBlock 
	 { $current=$iv_ruleSimultaneousBlock.current; } 
	 EOF 
;

// Rule SimultaneousBlock
ruleSimultaneousBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSimultaneousBlockAccess().getSimultaneousBlockAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSimultaneousBlockAccess().getSimultaneousBlockAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
	KEYWORD_23 
    {
        createLeafNode(grammarAccess.getSimultaneousBlockAccess().getLessThanSignLessThanSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimultaneousBlockAccess().getExpressionsExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimultaneousBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_24 
    {
        createLeafNode(grammarAccess.getSimultaneousBlockAccess().getGreaterThanSignGreaterThanSignKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCommandRule(), currentNode); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCommandAccess().getSpecialCommandParserRuleCall_0(), currentNode); 
    }
    this_SpecialCommand_0=ruleSpecialCommand
    {
        $current = $this_SpecialCommand_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCommandAccess().getReferenceParserRuleCall_1(), currentNode); 
    }
    this_Reference_1=ruleReference
    {
        $current = $this_Reference_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSpecialCommand
entryRuleSpecialCommand returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSpecialCommandRule(), currentNode); }
	 iv_ruleSpecialCommand=ruleSpecialCommand 
	 { $current=$iv_ruleSpecialCommand.current; } 
	 EOF 
;

// Rule SpecialCommand
ruleSpecialCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSpecialCommandAccess().getIncludeParserRuleCall_0(), currentNode); 
    }
    this_Include_0=ruleInclude
    {
        $current = $this_Include_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSpecialCommandAccess().getVersionParserRuleCall_1(), currentNode); 
    }
    this_Version_1=ruleVersion
    {
        $current = $this_Version_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSpecialCommandAccess().getMarkupParserRuleCall_2(), currentNode); 
    }
    this_Markup_2=ruleMarkup
    {
        $current = $this_Markup_2.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleInclude
entryRuleInclude returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getIncludeRule(), currentNode); }
	 iv_ruleInclude=ruleInclude 
	 { $current=$iv_ruleInclude.current; } 
	 EOF 
;

// Rule Include
ruleInclude returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_keyword_0_0=
	KEYWORD_28 
    {
        createLeafNode(grammarAccess.getIncludeAccess().getKeywordIncludeKeyword_0_0(), "keyword"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIncludeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "keyword", lv_keyword_0_0, "\\include", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIncludeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleVersion
entryRuleVersion returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVersionRule(), currentNode); }
	 iv_ruleVersion=ruleVersion 
	 { $current=$iv_ruleVersion.current; } 
	 EOF 
;

// Rule Version
ruleVersion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_keyword_0_0=
	KEYWORD_29 
    {
        createLeafNode(grammarAccess.getVersionAccess().getKeywordVersionKeyword_0_0(), "keyword"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "keyword", lv_keyword_0_0, "\\version", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_version_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getVersionAccess().getVersionSTRINGTerminalRuleCall_1_0(), "version"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"version",
	        		lv_version_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleMarkup
entryRuleMarkup returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getMarkupRule(), currentNode); }
	 iv_ruleMarkup=ruleMarkup 
	 { $current=$iv_ruleMarkup.current; } 
	 EOF 
;

// Rule Markup
ruleMarkup returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMarkupAccess().getKeywordMarkupKeywordParserRuleCall_0_0(), currentNode); 
	    }
		lv_keyword_0_0=ruleMarkupKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMarkupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"keyword",
	        		lv_keyword_0_0, 
	        		"MarkupKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMarkupAccess().getBlockMarkupBlockParserRuleCall_1_0(), currentNode); 
	    }
		lv_block_1_0=ruleMarkupBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMarkupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_1_0, 
	        		"MarkupBlock", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleMarkupKeyword
entryRuleMarkupKeyword returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ currentNode = createCompositeNode(grammarAccess.getMarkupKeywordRule(), currentNode); } 
	 iv_ruleMarkupKeyword=ruleMarkupKeyword 
	 { $current=$iv_ruleMarkupKeyword.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule MarkupKeyword
ruleMarkupKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_27 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMarkupKeywordAccess().getMarkupKeyword_0(), null); 
    }
(
	kw=KEYWORD_26 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMarkupKeywordAccess().getLinesKeyword_1(), null); 
    }
)?)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleMarkupBlock
entryRuleMarkupBlock returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getMarkupBlockRule(), currentNode); }
	 iv_ruleMarkupBlock=ruleMarkupBlock 
	 { $current=$iv_ruleMarkupBlock.current; } 
	 EOF 
;

// Rule MarkupBlock
ruleMarkupBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMarkupBlockAccess().getMarkupBlockAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMarkupBlockAccess().getMarkupBlockAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
	KEYWORD_16 
    {
        createLeafNode(grammarAccess.getMarkupBlockAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMarkupBlockAccess().getExpressionsMarkupExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleMarkupExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMarkupBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"MarkupExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_17 
    {
        createLeafNode(grammarAccess.getMarkupBlockAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleMarkupExpression
entryRuleMarkupExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getMarkupExpressionRule(), currentNode); }
	 iv_ruleMarkupExpression=ruleMarkupExpression 
	 { $current=$iv_ruleMarkupExpression.current; } 
	 EOF 
;

// Rule MarkupExpression
ruleMarkupExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMarkupExpressionAccess().getMarkupCommandParserRuleCall_0(), currentNode); 
    }
    this_MarkupCommand_0=ruleMarkupCommand
    {
        $current = $this_MarkupCommand_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMarkupExpressionAccess().getMarkupBlockParserRuleCall_1(), currentNode); 
    }
    this_MarkupBlock_1=ruleMarkupBlock
    {
        $current = $this_MarkupBlock_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMarkupExpressionAccess().getSchemeParserRuleCall_2(), currentNode); 
    }
    this_Scheme_2=ruleScheme
    {
        $current = $this_Scheme_2.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMarkupExpressionAccess().getTextParserRuleCall_3(), currentNode); 
    }
    this_Text_3=ruleText
    {
        $current = $this_Text_3.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMarkupExpressionAccess().getNumberParserRuleCall_4(), currentNode); 
    }
    this_Number_4=ruleNumber
    {
        $current = $this_Number_4.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleMarkupCommand
entryRuleMarkupCommand returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getMarkupCommandRule(), currentNode); }
	 iv_ruleMarkupCommand=ruleMarkupCommand 
	 { $current=$iv_ruleMarkupCommand.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule MarkupCommand
ruleMarkupCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_13 
    {
        createLeafNode(grammarAccess.getMarkupCommandAccess().getReverseSolidusKeyword_0(), null); 
    }
(
(
		lv_command_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMarkupCommandAccess().getCommandIDTerminalRuleCall_1_0(), "command"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMarkupCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"command",
	        		lv_command_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceRule(), currentNode); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_13 
    {
        createLeafNode(grammarAccess.getReferenceAccess().getReverseSolidusKeyword_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceAccess().getAssignmentAssignmentCrossReference_1_0(), currentNode); 
	    }
		ruleReferenceName		{ 
	        currentNode = currentNode.getParent();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleReferenceName
entryRuleReferenceName returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceNameRule(), currentNode); } 
	 iv_ruleReferenceName=ruleReferenceName 
	 { $current=$iv_ruleReferenceName.current.getText(); }  
	 EOF 
;

// Rule ReferenceName
ruleReferenceName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getReferenceNameAccess().getIDTerminalRuleCall_0(), null); 
    }

    |
	kw=KEYWORD_5 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getReferenceNameAccess().getLeftParenthesisKeyword_1(), null); 
    }

    |
	kw=KEYWORD_6 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getReferenceNameAccess().getRightParenthesisKeyword_2(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getReferenceNameAccess().getSpecialCharacterParserRuleCall_3(), currentNode); 
    }
    this_SpecialCharacter_3=ruleSpecialCharacter    {
		$current.merge(this_SpecialCharacter_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleSpecialCharacter
entryRuleSpecialCharacter returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getSpecialCharacterRule(), currentNode); } 
	 iv_ruleSpecialCharacter=ruleSpecialCharacter 
	 { $current=$iv_ruleSpecialCharacter.current.getText(); }  
	 EOF 
;

// Rule SpecialCharacter
ruleSpecialCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSpecialCharacterAccess().getExclamationMarkKeyword_0(), null); 
    }

    |
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSpecialCharacterAccess().getPlusSignKeyword_1(), null); 
    }

    |
	kw=KEYWORD_9 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSpecialCharacterAccess().getLessThanSignKeyword_2(), null); 
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSpecialCharacterAccess().getGreaterThanSignKeyword_3(), null); 
    }

    |
	kw=KEYWORD_12 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSpecialCharacterAccess().getLeftSquareBracketKeyword_4(), null); 
    }

    |
	kw=KEYWORD_14 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSpecialCharacterAccess().getRightSquareBracketKeyword_5(), null); 
    }

    |
	kw=KEYWORD_18 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSpecialCharacterAccess().getTildeKeyword_6(), null); 
    }
)
    ;





// Entry rule entryRuleText
entryRuleText returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getTextRule(), currentNode); }
	 iv_ruleText=ruleText 
	 { $current=$iv_ruleText.current; } 
	 EOF 
;

// Rule Text
ruleText returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTextAccess().getValueSchemeTextLiteralsParserRuleCall_0_0(), currentNode); 
	    }
		lv_value_0_1=ruleSchemeTextLiterals		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_1, 
	        		"SchemeTextLiterals", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		lv_value_0_2=
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getTextAccess().getValueLeftParenthesisKeyword_0_1(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_0_3=
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getTextAccess().getValueRightParenthesisKeyword_0_2(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_0_4=
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getTextAccess().getValueApostropheKeyword_0_3(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_0_5=
	KEYWORD_8 
    {
        createLeafNode(grammarAccess.getTextAccess().getValueCommaKeyword_0_4(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
;





// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumberRule(), currentNode); }
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current; } 
	 EOF 
;

// Rule Number
ruleNumber returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumberRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleScheme
entryRuleScheme returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SCHEME_SL_COMMENT", "RULE_SCHEME_ML_COMMENT");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeRule(), currentNode); }
	 iv_ruleScheme=ruleScheme 
	 { $current=$iv_ruleScheme.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Scheme
ruleScheme returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SCHEME_SL_COMMENT", "RULE_SCHEME_ML_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getSchemeAccess().getNumberSignKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSchemeAccess().getValueSchemeExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_1_0=ruleSchemeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"SchemeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSchemeExpression
entryRuleSchemeExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeExpressionRule(), currentNode); }
	 iv_ruleSchemeExpression=ruleSchemeExpression 
	 { $current=$iv_ruleSchemeExpression.current; } 
	 EOF 
;

// Rule SchemeExpression
ruleSchemeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_quoted_0_0=
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getSchemeExpressionAccess().getQuotedApostropheKeyword_0_0_0(), "quoted"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "quoted", true, "\'", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
    |(
(
		lv_quasiquoted_1_0=
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getSchemeExpressionAccess().getQuasiquotedGraveAccentKeyword_0_1_0(), "quasiquoted"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "quasiquoted", true, "`", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
    |(
(
		lv_unquoted_2_0=
	KEYWORD_8 
    {
        createLeafNode(grammarAccess.getSchemeExpressionAccess().getUnquotedCommaKeyword_0_2_0(), "unquoted"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "unquoted", true, ",", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
    |(
(
		lv_variable_3_0=
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getSchemeExpressionAccess().getVariableDollarSignKeyword_0_3_0(), "variable"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "variable", true, "$", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSchemeExpressionAccess().getValueSchemeValueParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_4_0=ruleSchemeValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_4_0, 
	        		"SchemeValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSchemeValue
entryRuleSchemeValue returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeValueRule(), currentNode); }
	 iv_ruleSchemeValue=ruleSchemeValue 
	 { $current=$iv_ruleSchemeValue.current; } 
	 EOF 
;

// Rule SchemeValue
ruleSchemeValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSchemeValueAccess().getSchemeBooleanParserRuleCall_0(), currentNode); 
    }
    this_SchemeBoolean_0=ruleSchemeBoolean
    {
        $current = $this_SchemeBoolean_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSchemeValueAccess().getSchemeListParserRuleCall_1(), currentNode); 
    }
    this_SchemeList_1=ruleSchemeList
    {
        $current = $this_SchemeList_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSchemeValueAccess().getSchemeBlockParserRuleCall_2(), currentNode); 
    }
    this_SchemeBlock_2=ruleSchemeBlock
    {
        $current = $this_SchemeBlock_2.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSchemeValueAccess().getSchemeCharacterParserRuleCall_3(), currentNode); 
    }
    this_SchemeCharacter_3=ruleSchemeCharacter
    {
        $current = $this_SchemeCharacter_3.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSchemeValueAccess().getSchemeTextParserRuleCall_4(), currentNode); 
    }
    this_SchemeText_4=ruleSchemeText
    {
        $current = $this_SchemeText_4.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSchemeValueAccess().getSchemeNumberParserRuleCall_5(), currentNode); 
    }
    this_SchemeNumber_5=ruleSchemeNumber
    {
        $current = $this_SchemeNumber_5.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSchemeValueAccess().getSchemeMarkupCommandParserRuleCall_6(), currentNode); 
    }
    this_SchemeMarkupCommand_6=ruleSchemeMarkupCommand
    {
        $current = $this_SchemeMarkupCommand_6.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSchemeBoolean
entryRuleSchemeBoolean returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeBooleanRule(), currentNode); }
	 iv_ruleSchemeBoolean=ruleSchemeBoolean 
	 { $current=$iv_ruleSchemeBoolean.current; } 
	 EOF 
;

// Rule SchemeBoolean
ruleSchemeBoolean returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSchemeBooleanAccess().getValueBOOLParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleBOOL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeBooleanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"BOOL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleSchemeList
entryRuleSchemeList returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeListRule(), currentNode); }
	 iv_ruleSchemeList=ruleSchemeList 
	 { $current=$iv_ruleSchemeList.current; } 
	 EOF 
;

// Rule SchemeList
ruleSchemeList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSchemeListAccess().getSchemeListAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSchemeListAccess().getSchemeListAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_vector_1_0=
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getSchemeListAccess().getVectorNumberSignKeyword_1_0(), "vector"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "vector", true, "#", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getSchemeListAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSchemeListAccess().getExpressionsSchemeExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_expressions_3_0=ruleSchemeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_3_0, 
	        		"SchemeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getSchemeListAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleSchemeBlock
entryRuleSchemeBlock returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeBlockRule(), currentNode); }
	 iv_ruleSchemeBlock=ruleSchemeBlock 
	 { $current=$iv_ruleSchemeBlock.current; } 
	 EOF 
;

// Rule SchemeBlock
ruleSchemeBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_21 
    {
        createLeafNode(grammarAccess.getSchemeBlockAccess().getNumberSignLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSchemeBlockAccess().getExpressionsExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expressions_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
	KEYWORD_22 
    {
        createLeafNode(grammarAccess.getSchemeBlockAccess().getNumberSignRightCurlyBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleSchemeCharacter
entryRuleSchemeCharacter returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeCharacterRule(), currentNode); }
	 iv_ruleSchemeCharacter=ruleSchemeCharacter 
	 { $current=$iv_ruleSchemeCharacter.current; } 
	 EOF 
;

// Rule SchemeCharacter
ruleSchemeCharacter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_20 
    {
        createLeafNode(grammarAccess.getSchemeCharacterAccess().getNumberSignReverseSolidusKeyword_0(), null); 
    }
(
(
(
		lv_value_1_1=RULE_ID
		{
			createLeafNode(grammarAccess.getSchemeCharacterAccess().getValueIDTerminalRuleCall_1_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeCharacterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_1, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getSchemeCharacterAccess().getValueSpecialCharacterParserRuleCall_1_0_1(), currentNode); 
	    }
		lv_value_1_2=ruleSpecialCharacter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeCharacterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_2, 
	        		"SpecialCharacter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		lv_value_1_3=RULE_ANY_OTHER
		{
			createLeafNode(grammarAccess.getSchemeCharacterAccess().getValueANY_OTHERTerminalRuleCall_1_0_2(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeCharacterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_3, 
	        		"ANY_OTHER", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))
;





// Entry rule entryRuleSchemeText
entryRuleSchemeText returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeTextRule(), currentNode); }
	 iv_ruleSchemeText=ruleSchemeText 
	 { $current=$iv_ruleSchemeText.current; } 
	 EOF 
;

// Rule SchemeText
ruleSchemeText returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSchemeTextAccess().getValueSchemeTextLiteralsParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleSchemeTextLiterals		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeTextRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"SchemeTextLiterals", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleSchemeTextLiterals
entryRuleSchemeTextLiterals returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeTextLiteralsRule(), currentNode); } 
	 iv_ruleSchemeTextLiterals=ruleSchemeTextLiterals 
	 { $current=$iv_ruleSchemeTextLiterals.current.getText(); }  
	 EOF 
;

// Rule SchemeTextLiterals
ruleSchemeTextLiterals returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_25 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSchemeTextLiteralsAccess().getReverseSolidusReverseSolidusKeyword_0(), null); 
    }

    |
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSchemeTextLiteralsAccess().getEqualsSignKeyword_1(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSchemeTextLiteralsAccess().getSpecialCharacterParserRuleCall_2(), currentNode); 
    }
    this_SpecialCharacter_2=ruleSpecialCharacter    {
		$current.merge(this_SpecialCharacter_2);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getSchemeTextLiteralsAccess().getIDTerminalRuleCall_3(), null); 
    }

    |    this_STRING_4=RULE_STRING    {
		$current.merge(this_STRING_4);
    }

    { 
    createLeafNode(grammarAccess.getSchemeTextLiteralsAccess().getSTRINGTerminalRuleCall_4(), null); 
    }

    |    this_ANY_OTHER_5=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_5);
    }

    { 
    createLeafNode(grammarAccess.getSchemeTextLiteralsAccess().getANY_OTHERTerminalRuleCall_5(), null); 
    }
)
    ;





// Entry rule entryRuleSchemeNumber
entryRuleSchemeNumber returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeNumberRule(), currentNode); }
	 iv_ruleSchemeNumber=ruleSchemeNumber 
	 { $current=$iv_ruleSchemeNumber.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeNumber
ruleSchemeNumber returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSchemeNumberAccess().getRadixSchemeNumberRadixParserRuleCall_0_0(), currentNode); 
	    }
		lv_radix_0_0=ruleSchemeNumberRadix		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeNumberRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"radix",
	        		lv_radix_0_0, 
	        		"SchemeNumberRadix", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_value_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSchemeNumberAccess().getValueINTTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeNumberRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSchemeNumberRadix
entryRuleSchemeNumberRadix returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeNumberRadixRule(), currentNode); } 
	 iv_ruleSchemeNumberRadix=ruleSchemeNumberRadix 
	 { $current=$iv_ruleSchemeNumberRadix.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeNumberRadix
ruleSchemeNumberRadix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSchemeNumberRadixAccess().getNumberSignKeyword_0(), null); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getSchemeNumberRadixAccess().getIDTerminalRuleCall_1(), null); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSchemeMarkupCommand
entryRuleSchemeMarkupCommand returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemeMarkupCommandRule(), currentNode); }
	 iv_ruleSchemeMarkupCommand=ruleSchemeMarkupCommand 
	 { $current=$iv_ruleSchemeMarkupCommand.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SchemeMarkupCommand
ruleSchemeMarkupCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_19 
    {
        createLeafNode(grammarAccess.getSchemeMarkupCommandAccess().getNumberSignColonKeyword_0(), null); 
    }
(
(
		lv_command_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSchemeMarkupCommandAccess().getCommandIDTerminalRuleCall_1_0(), "command"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemeMarkupCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"command",
	        		lv_command_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleBOOL
entryRuleBOOL returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getBOOLRule(), currentNode); } 
	 iv_ruleBOOL=ruleBOOL 
	 { $current=$iv_ruleBOOL.current.getText(); }  
	 EOF 
;

// Rule BOOL
ruleBOOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBOOLAccess().getNumberSignKeyword_0(), null); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getBOOLAccess().getIDTerminalRuleCall_1(), null); 
    }
)
    ;





