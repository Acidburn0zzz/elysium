/*
* generated by Xtext
*/

package org.elysium.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class LilyPondGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LilyPondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LilyPond");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsToplevelExpressionParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//LilyPond:
		//	expressions+=ToplevelExpression*;
		public ParserRule getRule() { return rule; }

		//expressions+=ToplevelExpression*
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }

		//ToplevelExpression
		public RuleCall getExpressionsToplevelExpressionParserRuleCall_0() { return cExpressionsToplevelExpressionParserRuleCall_0; }
	}

	public class ToplevelExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ToplevelExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommonExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ToplevelExpression:
		//	Assignment | CommonExpression;
		public ParserRule getRule() { return rule; }

		//Assignment | CommonExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//CommonExpression
		public RuleCall getCommonExpressionParserRuleCall_1() { return cCommonExpressionParserRuleCall_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommonExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	PropertyAssignment | CommonExpression;
		public ParserRule getRule() { return rule; }

		//PropertyAssignment | CommonExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropertyAssignment
		public RuleCall getPropertyAssignmentParserRuleCall_0() { return cPropertyAssignmentParserRuleCall_0; }

		//CommonExpression
		public RuleCall getCommonExpressionParserRuleCall_1() { return cCommonExpressionParserRuleCall_1; }
	}

	public class CommonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommonExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSchemeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumberParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//CommonExpression:
		//	Command | Block | Scheme | Text | Number;
		public ParserRule getRule() { return rule; }

		//Command | Block | Scheme | Text | Number
		public Alternatives getAlternatives() { return cAlternatives; }

		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }

		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }

		//Scheme
		public RuleCall getSchemeParserRuleCall_2() { return cSchemeParserRuleCall_2; }

		//Text
		public RuleCall getTextParserRuleCall_3() { return cTextParserRuleCall_3; }

		//Number
		public RuleCall getNumberParserRuleCall_4() { return cNumberParserRuleCall_4; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//	name=(ID | STRING) "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//name=(ID | STRING) "=" value=Expression
		public Group getGroup() { return cGroup; }

		//name=(ID | STRING)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID | STRING
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0_1() { return cNameSTRINGTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class PropertyAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cIdAlternatives_0_0 = (Alternatives)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0_0 = (RuleCall)cIdAlternatives_0_0.eContents().get(0);
		private final RuleCall cIdSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cIdAlternatives_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PropertyAssignment:
		//	id=(ID | STRING) "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//id=(ID | STRING) "=" value=Expression
		public Group getGroup() { return cGroup; }

		//id=(ID | STRING)
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID | STRING
		public Alternatives getIdAlternatives_0_0() { return cIdAlternatives_0_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0_0() { return cIdIDTerminalRuleCall_0_0_0; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_0_0_1() { return cIdSTRINGTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimultaneousBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Block:
		//	SimpleBlock | SimultaneousBlock;
		public ParserRule getRule() { return rule; }

		//SimpleBlock | SimultaneousBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleBlock
		public RuleCall getSimpleBlockParserRuleCall_0() { return cSimpleBlockParserRuleCall_0; }

		//SimultaneousBlock
		public RuleCall getSimultaneousBlockParserRuleCall_1() { return cSimultaneousBlockParserRuleCall_1; }
	}

	public class SimpleBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleBlock:
		//	{SimpleBlock} "{" expressions+=Expression* "}";
		public ParserRule getRule() { return rule; }

		//{SimpleBlock} "{" expressions+=Expression* "}"
		public Group getGroup() { return cGroup; }

		//{SimpleBlock}
		public Action getSimpleBlockAction_0() { return cSimpleBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//expressions+=Expression*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SimultaneousBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimultaneousBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimultaneousBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimultaneousBlock:
		//	{SimultaneousBlock} "<<" expressions+=Expression* ">>";
		public ParserRule getRule() { return rule; }

		//{SimultaneousBlock} "<<" expressions+=Expression* ">>"
		public Group getGroup() { return cGroup; }

		//{SimultaneousBlock}
		public Action getSimultaneousBlockAction_0() { return cSimultaneousBlockAction_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1() { return cLessThanSignLessThanSignKeyword_1; }

		//expressions+=Expression*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_3() { return cGreaterThanSignGreaterThanSignKeyword_3; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecialCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Command:
		//	SpecialCommand | Reference;
		public ParserRule getRule() { return rule; }

		//SpecialCommand | Reference
		public Alternatives getAlternatives() { return cAlternatives; }

		//SpecialCommand
		public RuleCall getSpecialCommandParserRuleCall_0() { return cSpecialCommandParserRuleCall_0; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
	}

	public class SpecialCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cTildeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//SpecialCharacter returns ecore::EString:
		//	"!" | "?" | "+" | "<" | ">" | "[" | "]" | "~";
		public ParserRule getRule() { return rule; }

		//"!" | "?" | "+" | "<" | ">" | "[" | "]" | "~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }

		//"~"
		public Keyword getTildeKeyword_7() { return cTildeKeyword_7; }
	}

	public class UnparsedBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnparsedBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnparsedBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsUnparsedExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnparsedBlock:
		//	{UnparsedBlock} "{" expressions+=UnparsedExpression* "}";
		public ParserRule getRule() { return rule; }

		//{UnparsedBlock} "{" expressions+=UnparsedExpression* "}"
		public Group getGroup() { return cGroup; }

		//{UnparsedBlock}
		public Action getUnparsedBlockAction_0() { return cUnparsedBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//expressions+=UnparsedExpression*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//UnparsedExpression
		public RuleCall getExpressionsUnparsedExpressionParserRuleCall_2_0() { return cExpressionsUnparsedExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class UnparsedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnparsedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnparsedCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnparsedBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSchemeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumberParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//UnparsedExpression:
		//	UnparsedCommand | UnparsedBlock | Scheme | Text | Number;
		public ParserRule getRule() { return rule; }

		//UnparsedCommand | UnparsedBlock | Scheme | Text | Number
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnparsedCommand
		public RuleCall getUnparsedCommandParserRuleCall_0() { return cUnparsedCommandParserRuleCall_0; }

		//UnparsedBlock
		public RuleCall getUnparsedBlockParserRuleCall_1() { return cUnparsedBlockParserRuleCall_1; }

		//Scheme
		public RuleCall getSchemeParserRuleCall_2() { return cSchemeParserRuleCall_2; }

		//Text
		public RuleCall getTextParserRuleCall_3() { return cTextParserRuleCall_3; }

		//Number
		public RuleCall getNumberParserRuleCall_4() { return cNumberParserRuleCall_4; }
	}

	public class UnparsedCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnparsedCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommandAlternatives_1_0 = (Alternatives)cCommandAssignment_1.eContents().get(0);
		private final RuleCall cCommandIDTerminalRuleCall_1_0_0 = (RuleCall)cCommandAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommandSpecialCommandNameParserRuleCall_1_0_1 = (RuleCall)cCommandAlternatives_1_0.eContents().get(1);
		
		//UnparsedCommand:
		//	"\\" command=(ID | SpecialCommandName);
		public ParserRule getRule() { return rule; }

		//"\\" command=(ID | SpecialCommandName)
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//command=(ID | SpecialCommandName)
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }

		//ID | SpecialCommandName
		public Alternatives getCommandAlternatives_1_0() { return cCommandAlternatives_1_0; }

		//ID
		public RuleCall getCommandIDTerminalRuleCall_1_0_0() { return cCommandIDTerminalRuleCall_1_0_0; }

		//SpecialCommandName
		public RuleCall getCommandSpecialCommandNameParserRuleCall_1_0_1() { return cCommandSpecialCommandNameParserRuleCall_1_0_1; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssignmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAssignmentAssignmentCrossReference_1_0 = (CrossReference)cAssignmentAssignment_1.eContents().get(0);
		private final RuleCall cAssignmentAssignmentIDTerminalRuleCall_1_0_1 = (RuleCall)cAssignmentAssignmentCrossReference_1_0.eContents().get(1);
		
		//Reference:
		//	"\\" assignment=[Assignment];
		public ParserRule getRule() { return rule; }

		//"\\" assignment=[Assignment]
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//assignment=[Assignment]
		public Assignment getAssignmentAssignment_1() { return cAssignmentAssignment_1; }

		//[Assignment]
		public CrossReference getAssignmentAssignmentCrossReference_1_0() { return cAssignmentAssignmentCrossReference_1_0; }

		//ID
		public RuleCall getAssignmentAssignmentIDTerminalRuleCall_1_0_1() { return cAssignmentAssignmentIDTerminalRuleCall_1_0_1; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueSchemeTextValueSegmentParserRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueLeftParenthesisKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueRightParenthesisKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueApostropheKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueCommaKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueColonKeyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		
		//Text:
		//	value=(SchemeTextValueSegment | "(" | ")" | "\'" | "," | ":");
		public ParserRule getRule() { return rule; }

		//value=(SchemeTextValueSegment | "(" | ")" | "\'" | "," | ":")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SchemeTextValueSegment | "(" | ")" | "\'" | "," | ":"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//SchemeTextValueSegment
		public RuleCall getValueSchemeTextValueSegmentParserRuleCall_0_0() { return cValueSchemeTextValueSegmentParserRuleCall_0_0; }

		//"("
		public Keyword getValueLeftParenthesisKeyword_0_1() { return cValueLeftParenthesisKeyword_0_1; }

		//")"
		public Keyword getValueRightParenthesisKeyword_0_2() { return cValueRightParenthesisKeyword_0_2; }

		//"\'"
		public Keyword getValueApostropheKeyword_0_3() { return cValueApostropheKeyword_0_3; }

		//","
		public Keyword getValueCommaKeyword_0_4() { return cValueCommaKeyword_0_4; }

		//":"
		public Keyword getValueColonKeyword_0_5() { return cValueColonKeyword_0_5; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Number:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class SpecialCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIncludeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVersionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMarkupParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMarkupLinesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBlockCommandParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOutputDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRelativeMusicParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNewContextParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOtherParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//// Commands
		//SpecialCommand:
		//	Include | Version | Markup | MarkupLines | BlockCommand | OutputDefinition | RelativeMusic | NewContext | Other;
		public ParserRule getRule() { return rule; }

		//Include | Version | Markup | MarkupLines | BlockCommand | OutputDefinition | RelativeMusic | NewContext | Other
		public Alternatives getAlternatives() { return cAlternatives; }

		//Include
		public RuleCall getIncludeParserRuleCall_0() { return cIncludeParserRuleCall_0; }

		//Version
		public RuleCall getVersionParserRuleCall_1() { return cVersionParserRuleCall_1; }

		//Markup
		public RuleCall getMarkupParserRuleCall_2() { return cMarkupParserRuleCall_2; }

		//MarkupLines
		public RuleCall getMarkupLinesParserRuleCall_3() { return cMarkupLinesParserRuleCall_3; }

		//BlockCommand
		public RuleCall getBlockCommandParserRuleCall_4() { return cBlockCommandParserRuleCall_4; }

		//OutputDefinition
		public RuleCall getOutputDefinitionParserRuleCall_5() { return cOutputDefinitionParserRuleCall_5; }

		//RelativeMusic
		public RuleCall getRelativeMusicParserRuleCall_6() { return cRelativeMusicParserRuleCall_6; }

		//NewContext
		public RuleCall getNewContextParserRuleCall_7() { return cNewContextParserRuleCall_7; }

		//Other
		public RuleCall getOtherParserRuleCall_8() { return cOtherParserRuleCall_8; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cKeywordIncludeKeyword_1_0 = (Keyword)cKeywordAssignment_1.eContents().get(0);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		
		//Include:
		//	"\\" keyword="include" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"\\" keyword="include" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//keyword="include"
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//"include"
		public Keyword getKeywordIncludeKeyword_1_0() { return cKeywordIncludeKeyword_1_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_0() { return cImportURISTRINGTerminalRuleCall_2_0; }
	}

	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cKeywordVersionKeyword_1_0 = (Keyword)cKeywordAssignment_1.eContents().get(0);
		private final Assignment cVersionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionSTRINGTerminalRuleCall_2_0 = (RuleCall)cVersionAssignment_2.eContents().get(0);
		
		//Version:
		//	"\\" keyword="version" version=STRING;
		public ParserRule getRule() { return rule; }

		//"\\" keyword="version" version=STRING
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//keyword="version"
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//"version"
		public Keyword getKeywordVersionKeyword_1_0() { return cKeywordVersionKeyword_1_0; }

		//version=STRING
		public Assignment getVersionAssignment_2() { return cVersionAssignment_2; }

		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_2_0() { return cVersionSTRINGTerminalRuleCall_2_0; }
	}

	public class MarkupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Markup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cKeywordMarkupKeyword_1_0 = (Keyword)cKeywordAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyMarkupBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Markup:
		//	"\\" keyword="markup" body=MarkupBody;
		public ParserRule getRule() { return rule; }

		//"\\" keyword="markup" body=MarkupBody
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//keyword="markup"
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//"markup"
		public Keyword getKeywordMarkupKeyword_1_0() { return cKeywordMarkupKeyword_1_0; }

		//body=MarkupBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//MarkupBody
		public RuleCall getBodyMarkupBodyParserRuleCall_2_0() { return cBodyMarkupBodyParserRuleCall_2_0; }
	}

	public class MarkupLinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MarkupLines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cKeywordMarkuplinesKeyword_1_0 = (Keyword)cKeywordAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyMarkupBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//MarkupLines:
		//	"\\" keyword="markuplines" body=MarkupBody;
		public ParserRule getRule() { return rule; }

		//"\\" keyword="markuplines" body=MarkupBody
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//keyword="markuplines"
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//"markuplines"
		public Keyword getKeywordMarkuplinesKeyword_1_0() { return cKeywordMarkuplinesKeyword_1_0; }

		//body=MarkupBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//MarkupBody
		public RuleCall getBodyMarkupBodyParserRuleCall_2_0() { return cBodyMarkupBodyParserRuleCall_2_0; }
	}

	public class MarkupBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MarkupBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMarkupBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommandAlternatives_1_0 = (Alternatives)cCommandAssignment_1.eContents().get(0);
		private final RuleCall cCommandSchemeParserRuleCall_1_0_0 = (RuleCall)cCommandAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommandUnparsedCommandParserRuleCall_1_0_1 = (RuleCall)cCommandAlternatives_1_0.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockUnparsedBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//MarkupBody:
		//	{MarkupBody} command+=(Scheme | UnparsedCommand)* block=UnparsedBlock?;
		public ParserRule getRule() { return rule; }

		//{MarkupBody} command+=(Scheme | UnparsedCommand)* block=UnparsedBlock?
		public Group getGroup() { return cGroup; }

		//{MarkupBody}
		public Action getMarkupBodyAction_0() { return cMarkupBodyAction_0; }

		//command+=(Scheme | UnparsedCommand)*
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }

		//Scheme | UnparsedCommand
		public Alternatives getCommandAlternatives_1_0() { return cCommandAlternatives_1_0; }

		//Scheme
		public RuleCall getCommandSchemeParserRuleCall_1_0_0() { return cCommandSchemeParserRuleCall_1_0_0; }

		//UnparsedCommand
		public RuleCall getCommandUnparsedCommandParserRuleCall_1_0_1() { return cCommandUnparsedCommandParserRuleCall_1_0_1; }

		//block=UnparsedBlock?
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//UnparsedBlock
		public RuleCall getBlockUnparsedBlockParserRuleCall_2_0() { return cBlockUnparsedBlockParserRuleCall_2_0; }
	}

	public class BlockCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cKeywordAlternatives_1_0 = (Alternatives)cKeywordAssignment_1.eContents().get(0);
		private final Keyword cKeywordBookKeyword_1_0_0 = (Keyword)cKeywordAlternatives_1_0.eContents().get(0);
		private final Keyword cKeywordBookpartKeyword_1_0_1 = (Keyword)cKeywordAlternatives_1_0.eContents().get(1);
		private final Keyword cKeywordContextKeyword_1_0_2 = (Keyword)cKeywordAlternatives_1_0.eContents().get(2);
		private final Keyword cKeywordHeaderKeyword_1_0_3 = (Keyword)cKeywordAlternatives_1_0.eContents().get(3);
		private final Keyword cKeywordScoreKeyword_1_0_4 = (Keyword)cKeywordAlternatives_1_0.eContents().get(4);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockSimpleBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//BlockCommand:
		//	"\\" keyword=("book" | "bookpart" | "context" | "header" | "score") block=SimpleBlock;
		public ParserRule getRule() { return rule; }

		//"\\" keyword=("book" | "bookpart" | "context" | "header" | "score") block=SimpleBlock
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//keyword=("book" | "bookpart" | "context" | "header" | "score")
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//"book" | "bookpart" | "context" | "header" | "score"
		public Alternatives getKeywordAlternatives_1_0() { return cKeywordAlternatives_1_0; }

		//"book"
		public Keyword getKeywordBookKeyword_1_0_0() { return cKeywordBookKeyword_1_0_0; }

		//"bookpart"
		public Keyword getKeywordBookpartKeyword_1_0_1() { return cKeywordBookpartKeyword_1_0_1; }

		//"context"
		public Keyword getKeywordContextKeyword_1_0_2() { return cKeywordContextKeyword_1_0_2; }

		//"header"
		public Keyword getKeywordHeaderKeyword_1_0_3() { return cKeywordHeaderKeyword_1_0_3; }

		//"score"
		public Keyword getKeywordScoreKeyword_1_0_4() { return cKeywordScoreKeyword_1_0_4; }

		//block=SimpleBlock
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//SimpleBlock
		public RuleCall getBlockSimpleBlockParserRuleCall_2_0() { return cBlockSimpleBlockParserRuleCall_2_0; }
	}

	public class OutputDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cKeywordAlternatives_1_0 = (Alternatives)cKeywordAssignment_1.eContents().get(0);
		private final Keyword cKeywordPaperKeyword_1_0_0 = (Keyword)cKeywordAlternatives_1_0.eContents().get(0);
		private final Keyword cKeywordMidiKeyword_1_0_1 = (Keyword)cKeywordAlternatives_1_0.eContents().get(1);
		private final Keyword cKeywordLayoutKeyword_1_0_2 = (Keyword)cKeywordAlternatives_1_0.eContents().get(2);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockUnparsedBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//OutputDefinition:
		//	"\\" keyword=("paper" | "midi" | "layout") block=UnparsedBlock;
		public ParserRule getRule() { return rule; }

		//"\\" keyword=("paper" | "midi" | "layout") block=UnparsedBlock
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//keyword=("paper" | "midi" | "layout")
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//"paper" | "midi" | "layout"
		public Alternatives getKeywordAlternatives_1_0() { return cKeywordAlternatives_1_0; }

		//"paper"
		public Keyword getKeywordPaperKeyword_1_0_0() { return cKeywordPaperKeyword_1_0_0; }

		//"midi"
		public Keyword getKeywordMidiKeyword_1_0_1() { return cKeywordMidiKeyword_1_0_1; }

		//"layout"
		public Keyword getKeywordLayoutKeyword_1_0_2() { return cKeywordLayoutKeyword_1_0_2; }

		//block=UnparsedBlock
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//UnparsedBlock
		public RuleCall getBlockUnparsedBlockParserRuleCall_2_0() { return cBlockUnparsedBlockParserRuleCall_2_0; }
	}

	public class RelativeMusicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelativeMusic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cKeywordRelativeKeyword_1_0 = (Keyword)cKeywordAssignment_1.eContents().get(0);
		private final Assignment cPitchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPitchPitchParserRuleCall_2_0 = (RuleCall)cPitchAssignment_2.eContents().get(0);
		private final Assignment cMusicAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMusicExpressionParserRuleCall_3_0 = (RuleCall)cMusicAssignment_3.eContents().get(0);
		
		//RelativeMusic:
		//	"\\" keyword="relative" pitch=Pitch? music=Expression;
		public ParserRule getRule() { return rule; }

		//"\\" keyword="relative" pitch=Pitch? music=Expression
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//keyword="relative"
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//"relative"
		public Keyword getKeywordRelativeKeyword_1_0() { return cKeywordRelativeKeyword_1_0; }

		//pitch=Pitch?
		public Assignment getPitchAssignment_2() { return cPitchAssignment_2; }

		//Pitch
		public RuleCall getPitchPitchParserRuleCall_2_0() { return cPitchPitchParserRuleCall_2_0; }

		//music=Expression
		public Assignment getMusicAssignment_3() { return cMusicAssignment_3; }

		//Expression
		public RuleCall getMusicExpressionParserRuleCall_3_0() { return cMusicExpressionParserRuleCall_3_0; }
	}

	public class PitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseIDTerminalRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Assignment cOctaveCheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOctaveCheckEqualsSignKeyword_1_0 = (Keyword)cOctaveCheckAssignment_1.eContents().get(0);
		private final Assignment cOctaveShiftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOctaveShiftOctaveParserRuleCall_2_0 = (RuleCall)cOctaveShiftAssignment_2.eContents().get(0);
		private final Assignment cReminderAccidentalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cReminderAccidentalExclamationMarkKeyword_3_0 = (Keyword)cReminderAccidentalAssignment_3.eContents().get(0);
		private final Assignment cCautionaryAccidentalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cCautionaryAccidentalQuestionMarkKeyword_4_0 = (Keyword)cCautionaryAccidentalAssignment_4.eContents().get(0);
		
		//Pitch:
		//	base=ID octaveCheck?="="? octaveShift=Octave? reminderAccidental?="!"? cautionaryAccidental?="?"?;
		public ParserRule getRule() { return rule; }

		//base=ID octaveCheck?="="? octaveShift=Octave? reminderAccidental?="!"? cautionaryAccidental?="?"?
		public Group getGroup() { return cGroup; }

		//base=ID
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//ID
		public RuleCall getBaseIDTerminalRuleCall_0_0() { return cBaseIDTerminalRuleCall_0_0; }

		//octaveCheck?="="?
		public Assignment getOctaveCheckAssignment_1() { return cOctaveCheckAssignment_1; }

		//"="
		public Keyword getOctaveCheckEqualsSignKeyword_1_0() { return cOctaveCheckEqualsSignKeyword_1_0; }

		//octaveShift=Octave?
		public Assignment getOctaveShiftAssignment_2() { return cOctaveShiftAssignment_2; }

		//Octave
		public RuleCall getOctaveShiftOctaveParserRuleCall_2_0() { return cOctaveShiftOctaveParserRuleCall_2_0; }

		//reminderAccidental?="!"?
		public Assignment getReminderAccidentalAssignment_3() { return cReminderAccidentalAssignment_3; }

		//"!"
		public Keyword getReminderAccidentalExclamationMarkKeyword_3_0() { return cReminderAccidentalExclamationMarkKeyword_3_0; }

		//cautionaryAccidental?="?"?
		public Assignment getCautionaryAccidentalAssignment_4() { return cCautionaryAccidentalAssignment_4; }

		//"?"
		public Keyword getCautionaryAccidentalQuestionMarkKeyword_4_0() { return cCautionaryAccidentalQuestionMarkKeyword_4_0; }
	}

	public class OctaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Octave");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cUpApostropheKeyword_0_0 = (Keyword)cUpAssignment_0.eContents().get(0);
		private final Assignment cDownAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDownCommaKeyword_1_0 = (Keyword)cDownAssignment_1.eContents().get(0);
		
		//Octave:
		//	up+="\'"+ | down+=","+;
		public ParserRule getRule() { return rule; }

		//up+="\'"+ | down+=","+
		public Alternatives getAlternatives() { return cAlternatives; }

		//up+="\'"+
		public Assignment getUpAssignment_0() { return cUpAssignment_0; }

		//"\'"
		public Keyword getUpApostropheKeyword_0_0() { return cUpApostropheKeyword_0_0; }

		//down+=","+
		public Assignment getDownAssignment_1() { return cDownAssignment_1; }

		//","
		public Keyword getDownCommaKeyword_1_0() { return cDownCommaKeyword_1_0; }
	}

	public class NewContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cKeywordAlternatives_1_0 = (Alternatives)cKeywordAssignment_1.eContents().get(0);
		private final Keyword cKeywordNewKeyword_1_0_0 = (Keyword)cKeywordAlternatives_1_0.eContents().get(0);
		private final Keyword cKeywordContextKeyword_1_0_1 = (Keyword)cKeywordAlternatives_1_0.eContents().get(1);
		private final Assignment cContextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextIDTerminalRuleCall_2_0 = (RuleCall)cContextAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_3_1_0 = (RuleCall)cIdAssignment_3_1.eContents().get(0);
		private final Assignment cModificationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModificationContextModificationParserRuleCall_4_0 = (RuleCall)cModificationAssignment_4.eContents().get(0);
		private final Assignment cMusicAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMusicExpressionParserRuleCall_5_0 = (RuleCall)cMusicAssignment_5.eContents().get(0);
		
		//NewContext:
		//	"\\" keyword=("new" | "context") context=ID ("=" id=ID)? modification=ContextModification? music=Expression;
		public ParserRule getRule() { return rule; }

		//"\\" keyword=("new" | "context") context=ID ("=" id=ID)? modification=ContextModification? music=Expression
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//keyword=("new" | "context")
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//"new" | "context"
		public Alternatives getKeywordAlternatives_1_0() { return cKeywordAlternatives_1_0; }

		//"new"
		public Keyword getKeywordNewKeyword_1_0_0() { return cKeywordNewKeyword_1_0_0; }

		//"context"
		public Keyword getKeywordContextKeyword_1_0_1() { return cKeywordContextKeyword_1_0_1; }

		//context=ID
		public Assignment getContextAssignment_2() { return cContextAssignment_2; }

		//ID
		public RuleCall getContextIDTerminalRuleCall_2_0() { return cContextIDTerminalRuleCall_2_0; }

		//("=" id=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//id=ID
		public Assignment getIdAssignment_3_1() { return cIdAssignment_3_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_1_0() { return cIdIDTerminalRuleCall_3_1_0; }

		//modification=ContextModification?
		public Assignment getModificationAssignment_4() { return cModificationAssignment_4; }

		//ContextModification
		public RuleCall getModificationContextModificationParserRuleCall_4_0() { return cModificationContextModificationParserRuleCall_4_0; }

		//music=Expression
		public Assignment getMusicAssignment_5() { return cMusicAssignment_5; }

		//Expression
		public RuleCall getMusicExpressionParserRuleCall_5_0() { return cMusicExpressionParserRuleCall_5_0; }
	}

	public class ContextModificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextModification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockUnparsedBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//ContextModification:
		//	"\\" "with" block=UnparsedBlock;
		public ParserRule getRule() { return rule; }

		//"\\" "with" block=UnparsedBlock
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//block=UnparsedBlock
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//UnparsedBlock
		public RuleCall getBlockUnparsedBlockParserRuleCall_2_0() { return cBlockUnparsedBlockParserRuleCall_2_0; }
	}

	public class OtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Other");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cKeywordAlternatives_1_0 = (Alternatives)cKeywordAssignment_1.eContents().get(0);
		private final RuleCall cKeywordSpecialCharacterParserRuleCall_1_0_0 = (RuleCall)cKeywordAlternatives_1_0.eContents().get(0);
		private final Keyword cKeywordLeftParenthesisKeyword_1_0_1 = (Keyword)cKeywordAlternatives_1_0.eContents().get(1);
		private final Keyword cKeywordRightParenthesisKeyword_1_0_2 = (Keyword)cKeywordAlternatives_1_0.eContents().get(2);
		private final RuleCall cKeywordOtherNameParserRuleCall_1_0_3 = (RuleCall)cKeywordAlternatives_1_0.eContents().get(3);
		
		//Other:
		//	"\\" keyword=(SpecialCharacter | "(" | ")" | OtherName);
		public ParserRule getRule() { return rule; }

		//"\\" keyword=(SpecialCharacter | "(" | ")" | OtherName)
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//keyword=(SpecialCharacter | "(" | ")" | OtherName)
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//SpecialCharacter | "(" | ")" | OtherName
		public Alternatives getKeywordAlternatives_1_0() { return cKeywordAlternatives_1_0; }

		//SpecialCharacter
		public RuleCall getKeywordSpecialCharacterParserRuleCall_1_0_0() { return cKeywordSpecialCharacterParserRuleCall_1_0_0; }

		//"("
		public Keyword getKeywordLeftParenthesisKeyword_1_0_1() { return cKeywordLeftParenthesisKeyword_1_0_1; }

		//")"
		public Keyword getKeywordRightParenthesisKeyword_1_0_2() { return cKeywordRightParenthesisKeyword_1_0_2; }

		//OtherName
		public RuleCall getKeywordOtherNameParserRuleCall_1_0_3() { return cKeywordOtherNameParserRuleCall_1_0_3; }
	}

	public class OtherNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAcceptsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAddlyricsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAliasKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAlternativeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cChangeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cChordmodeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cChordsKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cConsistsKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDefaultKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDefaultchildKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cDeniesKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cDescriptionKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cDrummodeKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cDrumsKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cFiguremodeKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cFiguresKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cGrobdescriptionsKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cKeyKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cLyricmodeKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cLyricsKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cLyricstoKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cMaininputKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cMarkKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cNameKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cNotemodeKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cObjectidKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cOctaveKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cOnceKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cOverrideKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cPartialKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cRemoveKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cRepeatKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cRestKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cRevertKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cSequentialKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cSetKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cSimultaneousKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cSkipKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cSourcefilelineKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cSourcefilenameKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cTempoKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cTimeKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cTimesKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cTransposeKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cTypeKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cUnsetKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cWithKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		
		//OtherName returns ecore::EString:
		//	"accepts" | "addlyrics" | "alias" | "alternative" | "change" | "chordmode" | "chords" | "consists" | "default" |
		//	"defaultchild" | "denies" | "description" | "drummode" | "drums" | "figuremode" | "figures" | "grobdescriptions" |
		//	"key" | "lyricmode" | "lyrics" | "lyricsto" | "maininput" | "mark" | "name" | "notemode" | "objectid" | "octave" |
		//	"once" | "override" | "partial" | "remove" | "repeat" | "rest" | "revert" | "sequential" | "set" | "simultaneous" |
		//	"skip" | "sourcefileline" | "sourcefilename" | "tempo" | "time" | "times" | "transpose" | "type" | "unset" | "with";
		public ParserRule getRule() { return rule; }

		//"accepts" | "addlyrics" | "alias" | "alternative" | "change" | "chordmode" | "chords" | "consists" | "default" |
		//"defaultchild" | "denies" | "description" | "drummode" | "drums" | "figuremode" | "figures" | "grobdescriptions" |
		//"key" | "lyricmode" | "lyrics" | "lyricsto" | "maininput" | "mark" | "name" | "notemode" | "objectid" | "octave" |
		//"once" | "override" | "partial" | "remove" | "repeat" | "rest" | "revert" | "sequential" | "set" | "simultaneous" |
		//"skip" | "sourcefileline" | "sourcefilename" | "tempo" | "time" | "times" | "transpose" | "type" | "unset" | "with"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"accepts"
		public Keyword getAcceptsKeyword_0() { return cAcceptsKeyword_0; }

		//"addlyrics"
		public Keyword getAddlyricsKeyword_1() { return cAddlyricsKeyword_1; }

		//"alias"
		public Keyword getAliasKeyword_2() { return cAliasKeyword_2; }

		//"alternative"
		public Keyword getAlternativeKeyword_3() { return cAlternativeKeyword_3; }

		//"change"
		public Keyword getChangeKeyword_4() { return cChangeKeyword_4; }

		//"chordmode"
		public Keyword getChordmodeKeyword_5() { return cChordmodeKeyword_5; }

		//"chords"
		public Keyword getChordsKeyword_6() { return cChordsKeyword_6; }

		//"consists"
		public Keyword getConsistsKeyword_7() { return cConsistsKeyword_7; }

		//"default"
		public Keyword getDefaultKeyword_8() { return cDefaultKeyword_8; }

		//"defaultchild"
		public Keyword getDefaultchildKeyword_9() { return cDefaultchildKeyword_9; }

		//"denies"
		public Keyword getDeniesKeyword_10() { return cDeniesKeyword_10; }

		//"description"
		public Keyword getDescriptionKeyword_11() { return cDescriptionKeyword_11; }

		//"drummode"
		public Keyword getDrummodeKeyword_12() { return cDrummodeKeyword_12; }

		//"drums"
		public Keyword getDrumsKeyword_13() { return cDrumsKeyword_13; }

		//"figuremode"
		public Keyword getFiguremodeKeyword_14() { return cFiguremodeKeyword_14; }

		//"figures"
		public Keyword getFiguresKeyword_15() { return cFiguresKeyword_15; }

		//"grobdescriptions"
		public Keyword getGrobdescriptionsKeyword_16() { return cGrobdescriptionsKeyword_16; }

		//"key"
		public Keyword getKeyKeyword_17() { return cKeyKeyword_17; }

		//"lyricmode"
		public Keyword getLyricmodeKeyword_18() { return cLyricmodeKeyword_18; }

		//"lyrics"
		public Keyword getLyricsKeyword_19() { return cLyricsKeyword_19; }

		//"lyricsto"
		public Keyword getLyricstoKeyword_20() { return cLyricstoKeyword_20; }

		//"maininput"
		public Keyword getMaininputKeyword_21() { return cMaininputKeyword_21; }

		//"mark"
		public Keyword getMarkKeyword_22() { return cMarkKeyword_22; }

		//"name"
		public Keyword getNameKeyword_23() { return cNameKeyword_23; }

		//"notemode"
		public Keyword getNotemodeKeyword_24() { return cNotemodeKeyword_24; }

		//"objectid"
		public Keyword getObjectidKeyword_25() { return cObjectidKeyword_25; }

		//"octave"
		public Keyword getOctaveKeyword_26() { return cOctaveKeyword_26; }

		//"once"
		public Keyword getOnceKeyword_27() { return cOnceKeyword_27; }

		//"override"
		public Keyword getOverrideKeyword_28() { return cOverrideKeyword_28; }

		//"partial"
		public Keyword getPartialKeyword_29() { return cPartialKeyword_29; }

		//"remove"
		public Keyword getRemoveKeyword_30() { return cRemoveKeyword_30; }

		//"repeat"
		public Keyword getRepeatKeyword_31() { return cRepeatKeyword_31; }

		//"rest"
		public Keyword getRestKeyword_32() { return cRestKeyword_32; }

		//"revert"
		public Keyword getRevertKeyword_33() { return cRevertKeyword_33; }

		//"sequential"
		public Keyword getSequentialKeyword_34() { return cSequentialKeyword_34; }

		//"set"
		public Keyword getSetKeyword_35() { return cSetKeyword_35; }

		//"simultaneous"
		public Keyword getSimultaneousKeyword_36() { return cSimultaneousKeyword_36; }

		//"skip"
		public Keyword getSkipKeyword_37() { return cSkipKeyword_37; }

		//"sourcefileline"
		public Keyword getSourcefilelineKeyword_38() { return cSourcefilelineKeyword_38; }

		//"sourcefilename"
		public Keyword getSourcefilenameKeyword_39() { return cSourcefilenameKeyword_39; }

		//"tempo"
		public Keyword getTempoKeyword_40() { return cTempoKeyword_40; }

		//"time"
		public Keyword getTimeKeyword_41() { return cTimeKeyword_41; }

		//"times"
		public Keyword getTimesKeyword_42() { return cTimesKeyword_42; }

		//"transpose"
		public Keyword getTransposeKeyword_43() { return cTransposeKeyword_43; }

		//"type"
		public Keyword getTypeKeyword_44() { return cTypeKeyword_44; }

		//"unset"
		public Keyword getUnsetKeyword_45() { return cUnsetKeyword_45; }

		//"with"
		public Keyword getWithKeyword_46() { return cWithKeyword_46; }
	}

	public class SpecialCommandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialCommandName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVersionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMarkupKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMarkuplinesKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBookKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBookpartKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cContextKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cHeaderKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cScoreKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPaperKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cMidiKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLayoutKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cRelativeKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cNewKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cWithKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final RuleCall cOtherNameParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		//SpecialCommandName returns ecore::EString:
		//	"include" | "version" | "markup" | "markuplines" | "book" | "bookpart" | "context" | "header" | "score" | "paper" |
		//	"midi" | "layout" | "relative" | "new" | "with" | OtherName;
		public ParserRule getRule() { return rule; }

		//"include" | "version" | "markup" | "markuplines" | "book" | "bookpart" | "context" | "header" | "score" | "paper" |
		//"midi" | "layout" | "relative" | "new" | "with" | OtherName
		public Alternatives getAlternatives() { return cAlternatives; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//"version"
		public Keyword getVersionKeyword_1() { return cVersionKeyword_1; }

		//"markup"
		public Keyword getMarkupKeyword_2() { return cMarkupKeyword_2; }

		//"markuplines"
		public Keyword getMarkuplinesKeyword_3() { return cMarkuplinesKeyword_3; }

		//"book"
		public Keyword getBookKeyword_4() { return cBookKeyword_4; }

		//"bookpart"
		public Keyword getBookpartKeyword_5() { return cBookpartKeyword_5; }

		//"context"
		public Keyword getContextKeyword_6() { return cContextKeyword_6; }

		//"header"
		public Keyword getHeaderKeyword_7() { return cHeaderKeyword_7; }

		//"score"
		public Keyword getScoreKeyword_8() { return cScoreKeyword_8; }

		//"paper"
		public Keyword getPaperKeyword_9() { return cPaperKeyword_9; }

		//"midi"
		public Keyword getMidiKeyword_10() { return cMidiKeyword_10; }

		//"layout"
		public Keyword getLayoutKeyword_11() { return cLayoutKeyword_11; }

		//"relative"
		public Keyword getRelativeKeyword_12() { return cRelativeKeyword_12; }

		//"new"
		public Keyword getNewKeyword_13() { return cNewKeyword_13; }

		//"with"
		public Keyword getWithKeyword_14() { return cWithKeyword_14; }

		//OtherName
		public RuleCall getOtherNameParserRuleCall_15() { return cOtherNameParserRuleCall_15; }
	}

	public class SchemeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scheme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSchemeExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//// Scheme
		//Scheme hidden(WS, SCHEME_SL_COMMENT, SCHEME_ML_COMMENT):
		//	"#" value=SchemeExpression;
		public ParserRule getRule() { return rule; }

		//"#" value=SchemeExpression
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//value=SchemeExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//SchemeExpression
		public RuleCall getValueSchemeExpressionParserRuleCall_1_0() { return cValueSchemeExpressionParserRuleCall_1_0; }
	}

	public class SchemeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cQuotedAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cQuotedApostropheKeyword_0_0_0 = (Keyword)cQuotedAssignment_0_0.eContents().get(0);
		private final Assignment cQuasiquotedAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cQuasiquotedGraveAccentKeyword_0_1_0 = (Keyword)cQuasiquotedAssignment_0_1.eContents().get(0);
		private final Assignment cUnquotedAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cUnquotedCommaKeyword_0_2_0 = (Keyword)cUnquotedAssignment_0_2.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSchemeValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SchemeExpression:
		//	(quoted?="\'"? | quasiquoted?="`"? | unquoted?=","?)? value=SchemeValue;
		public ParserRule getRule() { return rule; }

		//(quoted?="\'"? | quasiquoted?="`"? | unquoted?=","?)? value=SchemeValue
		public Group getGroup() { return cGroup; }

		//(quoted?="\'"? | quasiquoted?="`"? | unquoted?=","?)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//quoted?="\'"?
		public Assignment getQuotedAssignment_0_0() { return cQuotedAssignment_0_0; }

		//"\'"
		public Keyword getQuotedApostropheKeyword_0_0_0() { return cQuotedApostropheKeyword_0_0_0; }

		//quasiquoted?="`"?
		public Assignment getQuasiquotedAssignment_0_1() { return cQuasiquotedAssignment_0_1; }

		//"`"
		public Keyword getQuasiquotedGraveAccentKeyword_0_1_0() { return cQuasiquotedGraveAccentKeyword_0_1_0; }

		//unquoted?=","?
		public Assignment getUnquotedAssignment_0_2() { return cUnquotedAssignment_0_2; }

		//","
		public Keyword getUnquotedCommaKeyword_0_2_0() { return cUnquotedCommaKeyword_0_2_0; }

		//value=SchemeValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//SchemeValue
		public RuleCall getValueSchemeValueParserRuleCall_1_0() { return cValueSchemeValueParserRuleCall_1_0; }
	}

	public class SchemeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSchemeBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSchemeListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSchemeBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSchemeCharacterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSchemeTextParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSchemeNumberParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSchemeMarkupCommandParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//SchemeValue:
		//	SchemeBoolean | SchemeList | SchemeBlock | SchemeCharacter | SchemeText | SchemeNumber | SchemeMarkupCommand;
		public ParserRule getRule() { return rule; }

		//SchemeBoolean | SchemeList | SchemeBlock | SchemeCharacter | SchemeText | SchemeNumber | SchemeMarkupCommand
		public Alternatives getAlternatives() { return cAlternatives; }

		//SchemeBoolean
		public RuleCall getSchemeBooleanParserRuleCall_0() { return cSchemeBooleanParserRuleCall_0; }

		//SchemeList
		public RuleCall getSchemeListParserRuleCall_1() { return cSchemeListParserRuleCall_1; }

		//SchemeBlock
		public RuleCall getSchemeBlockParserRuleCall_2() { return cSchemeBlockParserRuleCall_2; }

		//SchemeCharacter
		public RuleCall getSchemeCharacterParserRuleCall_3() { return cSchemeCharacterParserRuleCall_3; }

		//SchemeText
		public RuleCall getSchemeTextParserRuleCall_4() { return cSchemeTextParserRuleCall_4; }

		//SchemeNumber
		public RuleCall getSchemeNumberParserRuleCall_5() { return cSchemeNumberParserRuleCall_5; }

		//SchemeMarkupCommand
		public RuleCall getSchemeMarkupCommandParserRuleCall_6() { return cSchemeMarkupCommandParserRuleCall_6; }
	}

	public class SchemeBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeBoolean");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSchemeBooleanValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SchemeBoolean:
		//	value=SchemeBooleanValue;
		public ParserRule getRule() { return rule; }

		//value=SchemeBooleanValue
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SchemeBooleanValue
		public RuleCall getValueSchemeBooleanValueParserRuleCall_0() { return cValueSchemeBooleanValueParserRuleCall_0; }
	}

	public class SchemeBooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeBooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SchemeBooleanValue returns ecore::EBoolean:
		//	"#" ID;
		public ParserRule getRule() { return rule; }

		//"#" ID
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class SchemeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSchemeListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVectorNumberSignKeyword_1_0 = (Keyword)cVectorAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionsSchemeExpressionParserRuleCall_3_0 = (RuleCall)cExpressionsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SchemeList:
		//	{SchemeList} vector?="#"? "(" expressions+=SchemeExpression* ")";
		public ParserRule getRule() { return rule; }

		//{SchemeList} vector?="#"? "(" expressions+=SchemeExpression* ")"
		public Group getGroup() { return cGroup; }

		//{SchemeList}
		public Action getSchemeListAction_0() { return cSchemeListAction_0; }

		//vector?="#"?
		public Assignment getVectorAssignment_1() { return cVectorAssignment_1; }

		//"#"
		public Keyword getVectorNumberSignKeyword_1_0() { return cVectorNumberSignKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expressions+=SchemeExpression*
		public Assignment getExpressionsAssignment_3() { return cExpressionsAssignment_3; }

		//SchemeExpression
		public RuleCall getExpressionsSchemeExpressionParserRuleCall_3_0() { return cExpressionsSchemeExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SchemeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsSchemeBlockElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Keyword cNumberSignRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SchemeBlock:
		//	"#{" elements+=SchemeBlockElement+ "#}";
		public ParserRule getRule() { return rule; }

		//"#{" elements+=SchemeBlockElement+ "#}"
		public Group getGroup() { return cGroup; }

		//"#{"
		public Keyword getNumberSignLeftCurlyBracketKeyword_0() { return cNumberSignLeftCurlyBracketKeyword_0; }

		//elements+=SchemeBlockElement+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//SchemeBlockElement
		public RuleCall getElementsSchemeBlockElementParserRuleCall_1_0() { return cElementsSchemeBlockElementParserRuleCall_1_0; }

		//"#}"
		public Keyword getNumberSignRightCurlyBracketKeyword_2() { return cNumberSignRightCurlyBracketKeyword_2; }
	}

	public class SchemeBlockElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeBlockElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSchemeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SchemeBlockElement:
		//	Expression | SchemeReference;
		public ParserRule getRule() { return rule; }

		//Expression | SchemeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//SchemeReference
		public RuleCall getSchemeReferenceParserRuleCall_1() { return cSchemeReferenceParserRuleCall_1; }
	}

	public class SchemeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdSchemeIdentifierParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//SchemeReference:
		//	"$" id=SchemeIdentifier;
		public ParserRule getRule() { return rule; }

		//"$" id=SchemeIdentifier
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//id=SchemeIdentifier
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//SchemeIdentifier
		public RuleCall getIdSchemeIdentifierParserRuleCall_1_0() { return cIdSchemeIdentifierParserRuleCall_1_0; }
	}

	public class SchemeCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeCharacter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueSpecialCharacterParserRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		private final RuleCall cValueANY_OTHERTerminalRuleCall_1_0_2 = (RuleCall)cValueAlternatives_1_0.eContents().get(2);
		
		//SchemeCharacter:
		//	"#\\" value=(ID | SpecialCharacter | ANY_OTHER);
		public ParserRule getRule() { return rule; }

		//"#\\" value=(ID | SpecialCharacter | ANY_OTHER)
		public Group getGroup() { return cGroup; }

		//"#\\"
		public Keyword getNumberSignReverseSolidusKeyword_0() { return cNumberSignReverseSolidusKeyword_0; }

		//value=(ID | SpecialCharacter | ANY_OTHER)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ID | SpecialCharacter | ANY_OTHER
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0_0() { return cValueIDTerminalRuleCall_1_0_0; }

		//SpecialCharacter
		public RuleCall getValueSpecialCharacterParserRuleCall_1_0_1() { return cValueSpecialCharacterParserRuleCall_1_0_1; }

		//ANY_OTHER
		public RuleCall getValueANY_OTHERTerminalRuleCall_1_0_2() { return cValueANY_OTHERTerminalRuleCall_1_0_2; }
	}

	public class SchemeTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeText");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSchemeTextValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SchemeText:
		//	value=SchemeTextValue;
		public ParserRule getRule() { return rule; }

		//value=SchemeTextValue
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SchemeTextValue
		public RuleCall getValueSchemeTextValueParserRuleCall_0() { return cValueSchemeTextValueParserRuleCall_0; }
	}

	public class SchemeTextValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeTextValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSchemeTextValueSegmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cSchemeTextValueSegmentParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//SchemeTextValue returns ecore::EString hidden():
		//	SchemeTextValueSegment (":" ":"? SchemeTextValueSegment)*;
		public ParserRule getRule() { return rule; }

		//SchemeTextValueSegment (":" ":"? SchemeTextValueSegment)*
		public Group getGroup() { return cGroup; }

		//SchemeTextValueSegment
		public RuleCall getSchemeTextValueSegmentParserRuleCall_0() { return cSchemeTextValueSegmentParserRuleCall_0; }

		//(":" ":"? SchemeTextValueSegment)*
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//":"?
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//SchemeTextValueSegment
		public RuleCall getSchemeTextValueSegmentParserRuleCall_1_2() { return cSchemeTextValueSegmentParserRuleCall_1_2; }
	}

	public class SchemeTextValueSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeTextValueSegment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cReverseSolidusReverseSolidusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final RuleCall cSpecialCharacterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSpecialCommandNameParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSchemeIdentifierParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSTRINGTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cINTTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cANY_OTHERTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//SchemeTextValueSegment returns ecore::EString:
		//	"\\\\" | "=" | "-" | SpecialCharacter | SpecialCommandName | SchemeIdentifier | STRING | INT | ANY_OTHER;
		public ParserRule getRule() { return rule; }

		//"\\\\" | "=" | "-" | SpecialCharacter | SpecialCommandName | SchemeIdentifier | STRING | INT | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }

		//"\\\\"
		public Keyword getReverseSolidusReverseSolidusKeyword_0() { return cReverseSolidusReverseSolidusKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//SpecialCharacter
		public RuleCall getSpecialCharacterParserRuleCall_3() { return cSpecialCharacterParserRuleCall_3; }

		//SpecialCommandName
		public RuleCall getSpecialCommandNameParserRuleCall_4() { return cSpecialCommandNameParserRuleCall_4; }

		//SchemeIdentifier
		public RuleCall getSchemeIdentifierParserRuleCall_5() { return cSchemeIdentifierParserRuleCall_5; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_6() { return cSTRINGTerminalRuleCall_6; }

		//INT
		public RuleCall getINTTerminalRuleCall_7() { return cINTTerminalRuleCall_7; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_8() { return cANY_OTHERTerminalRuleCall_8; }
	}

	public class SchemeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//SchemeIdentifier returns ecore::EString hidden():
		//	ID ("-" ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("-" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("-" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class SchemeNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRadixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRadixSchemeNumberRadixParserRuleCall_0_0 = (RuleCall)cRadixAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SchemeNumber hidden():
		//	radix=SchemeNumberRadix? value=INT;
		public ParserRule getRule() { return rule; }

		//radix=SchemeNumberRadix? value=INT
		public Group getGroup() { return cGroup; }

		//radix=SchemeNumberRadix?
		public Assignment getRadixAssignment_0() { return cRadixAssignment_0; }

		//SchemeNumberRadix
		public RuleCall getRadixSchemeNumberRadixParserRuleCall_0_0() { return cRadixSchemeNumberRadixParserRuleCall_0_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class SchemeNumberRadixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeNumberRadix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SchemeNumberRadix returns ecore::EString:
		//	"#" ID;
		public ParserRule getRule() { return rule; }

		//"#" ID
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class SchemeMarkupCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemeMarkupCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommandAlternatives_1_0 = (Alternatives)cCommandAssignment_1.eContents().get(0);
		private final RuleCall cCommandIDTerminalRuleCall_1_0_0 = (RuleCall)cCommandAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommandSpecialCommandNameParserRuleCall_1_0_1 = (RuleCall)cCommandAlternatives_1_0.eContents().get(1);
		
		//SchemeMarkupCommand hidden():
		//	"#:" command=(ID | SpecialCommandName);
		public ParserRule getRule() { return rule; }

		//"#:" command=(ID | SpecialCommandName)
		public Group getGroup() { return cGroup; }

		//"#:"
		public Keyword getNumberSignColonKeyword_0() { return cNumberSignColonKeyword_0; }

		//command=(ID | SpecialCommandName)
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }

		//ID | SpecialCommandName
		public Alternatives getCommandAlternatives_1_0() { return cCommandAlternatives_1_0; }

		//ID
		public RuleCall getCommandIDTerminalRuleCall_1_0_0() { return cCommandIDTerminalRuleCall_1_0_0; }

		//SpecialCommandName
		public RuleCall getCommandSpecialCommandNameParserRuleCall_1_0_1() { return cCommandSpecialCommandNameParserRuleCall_1_0_1; }
	}
	
	
	private LilyPondElements pLilyPond;
	private ToplevelExpressionElements pToplevelExpression;
	private ExpressionElements pExpression;
	private CommonExpressionElements pCommonExpression;
	private AssignmentElements pAssignment;
	private PropertyAssignmentElements pPropertyAssignment;
	private BlockElements pBlock;
	private SimpleBlockElements pSimpleBlock;
	private SimultaneousBlockElements pSimultaneousBlock;
	private CommandElements pCommand;
	private SpecialCharacterElements pSpecialCharacter;
	private UnparsedBlockElements pUnparsedBlock;
	private UnparsedExpressionElements pUnparsedExpression;
	private UnparsedCommandElements pUnparsedCommand;
	private ReferenceElements pReference;
	private TextElements pText;
	private NumberElements pNumber;
	private SpecialCommandElements pSpecialCommand;
	private IncludeElements pInclude;
	private VersionElements pVersion;
	private MarkupElements pMarkup;
	private MarkupLinesElements pMarkupLines;
	private MarkupBodyElements pMarkupBody;
	private BlockCommandElements pBlockCommand;
	private OutputDefinitionElements pOutputDefinition;
	private RelativeMusicElements pRelativeMusic;
	private PitchElements pPitch;
	private OctaveElements pOctave;
	private NewContextElements pNewContext;
	private ContextModificationElements pContextModification;
	private OtherElements pOther;
	private OtherNameElements pOtherName;
	private SpecialCommandNameElements pSpecialCommandName;
	private SchemeElements pScheme;
	private SchemeExpressionElements pSchemeExpression;
	private SchemeValueElements pSchemeValue;
	private SchemeBooleanElements pSchemeBoolean;
	private SchemeBooleanValueElements pSchemeBooleanValue;
	private SchemeListElements pSchemeList;
	private SchemeBlockElements pSchemeBlock;
	private SchemeBlockElementElements pSchemeBlockElement;
	private SchemeReferenceElements pSchemeReference;
	private SchemeCharacterElements pSchemeCharacter;
	private SchemeTextElements pSchemeText;
	private SchemeTextValueElements pSchemeTextValue;
	private SchemeTextValueSegmentElements pSchemeTextValueSegment;
	private SchemeIdentifierElements pSchemeIdentifier;
	private SchemeNumberElements pSchemeNumber;
	private SchemeNumberRadixElements pSchemeNumberRadix;
	private SchemeMarkupCommandElements pSchemeMarkupCommand;
	private TerminalRule tSTRING;
	private TerminalRule tINT;
	private TerminalRule tID;
	private TerminalRule tWS;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSCHEME_SL_COMMENT;
	private TerminalRule tSCHEME_ML_COMMENT;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public LilyPondGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//LilyPond:
	//	expressions+=ToplevelExpression*;
	public LilyPondElements getLilyPondAccess() {
		return (pLilyPond != null) ? pLilyPond : (pLilyPond = new LilyPondElements());
	}
	
	public ParserRule getLilyPondRule() {
		return getLilyPondAccess().getRule();
	}

	//ToplevelExpression:
	//	Assignment | CommonExpression;
	public ToplevelExpressionElements getToplevelExpressionAccess() {
		return (pToplevelExpression != null) ? pToplevelExpression : (pToplevelExpression = new ToplevelExpressionElements());
	}
	
	public ParserRule getToplevelExpressionRule() {
		return getToplevelExpressionAccess().getRule();
	}

	//Expression:
	//	PropertyAssignment | CommonExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//CommonExpression:
	//	Command | Block | Scheme | Text | Number;
	public CommonExpressionElements getCommonExpressionAccess() {
		return (pCommonExpression != null) ? pCommonExpression : (pCommonExpression = new CommonExpressionElements());
	}
	
	public ParserRule getCommonExpressionRule() {
		return getCommonExpressionAccess().getRule();
	}

	//Assignment:
	//	name=(ID | STRING) "=" value=Expression;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//PropertyAssignment:
	//	id=(ID | STRING) "=" value=Expression;
	public PropertyAssignmentElements getPropertyAssignmentAccess() {
		return (pPropertyAssignment != null) ? pPropertyAssignment : (pPropertyAssignment = new PropertyAssignmentElements());
	}
	
	public ParserRule getPropertyAssignmentRule() {
		return getPropertyAssignmentAccess().getRule();
	}

	//Block:
	//	SimpleBlock | SimultaneousBlock;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//SimpleBlock:
	//	{SimpleBlock} "{" expressions+=Expression* "}";
	public SimpleBlockElements getSimpleBlockAccess() {
		return (pSimpleBlock != null) ? pSimpleBlock : (pSimpleBlock = new SimpleBlockElements());
	}
	
	public ParserRule getSimpleBlockRule() {
		return getSimpleBlockAccess().getRule();
	}

	//SimultaneousBlock:
	//	{SimultaneousBlock} "<<" expressions+=Expression* ">>";
	public SimultaneousBlockElements getSimultaneousBlockAccess() {
		return (pSimultaneousBlock != null) ? pSimultaneousBlock : (pSimultaneousBlock = new SimultaneousBlockElements());
	}
	
	public ParserRule getSimultaneousBlockRule() {
		return getSimultaneousBlockAccess().getRule();
	}

	//Command:
	//	SpecialCommand | Reference;
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//SpecialCharacter returns ecore::EString:
	//	"!" | "?" | "+" | "<" | ">" | "[" | "]" | "~";
	public SpecialCharacterElements getSpecialCharacterAccess() {
		return (pSpecialCharacter != null) ? pSpecialCharacter : (pSpecialCharacter = new SpecialCharacterElements());
	}
	
	public ParserRule getSpecialCharacterRule() {
		return getSpecialCharacterAccess().getRule();
	}

	//UnparsedBlock:
	//	{UnparsedBlock} "{" expressions+=UnparsedExpression* "}";
	public UnparsedBlockElements getUnparsedBlockAccess() {
		return (pUnparsedBlock != null) ? pUnparsedBlock : (pUnparsedBlock = new UnparsedBlockElements());
	}
	
	public ParserRule getUnparsedBlockRule() {
		return getUnparsedBlockAccess().getRule();
	}

	//UnparsedExpression:
	//	UnparsedCommand | UnparsedBlock | Scheme | Text | Number;
	public UnparsedExpressionElements getUnparsedExpressionAccess() {
		return (pUnparsedExpression != null) ? pUnparsedExpression : (pUnparsedExpression = new UnparsedExpressionElements());
	}
	
	public ParserRule getUnparsedExpressionRule() {
		return getUnparsedExpressionAccess().getRule();
	}

	//UnparsedCommand:
	//	"\\" command=(ID | SpecialCommandName);
	public UnparsedCommandElements getUnparsedCommandAccess() {
		return (pUnparsedCommand != null) ? pUnparsedCommand : (pUnparsedCommand = new UnparsedCommandElements());
	}
	
	public ParserRule getUnparsedCommandRule() {
		return getUnparsedCommandAccess().getRule();
	}

	//Reference:
	//	"\\" assignment=[Assignment];
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//Text:
	//	value=(SchemeTextValueSegment | "(" | ")" | "\'" | "," | ":");
	public TextElements getTextAccess() {
		return (pText != null) ? pText : (pText = new TextElements());
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//Number:
	//	value=INT;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//// Commands
	//SpecialCommand:
	//	Include | Version | Markup | MarkupLines | BlockCommand | OutputDefinition | RelativeMusic | NewContext | Other;
	public SpecialCommandElements getSpecialCommandAccess() {
		return (pSpecialCommand != null) ? pSpecialCommand : (pSpecialCommand = new SpecialCommandElements());
	}
	
	public ParserRule getSpecialCommandRule() {
		return getSpecialCommandAccess().getRule();
	}

	//Include:
	//	"\\" keyword="include" importURI=STRING;
	public IncludeElements getIncludeAccess() {
		return (pInclude != null) ? pInclude : (pInclude = new IncludeElements());
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//Version:
	//	"\\" keyword="version" version=STRING;
	public VersionElements getVersionAccess() {
		return (pVersion != null) ? pVersion : (pVersion = new VersionElements());
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}

	//Markup:
	//	"\\" keyword="markup" body=MarkupBody;
	public MarkupElements getMarkupAccess() {
		return (pMarkup != null) ? pMarkup : (pMarkup = new MarkupElements());
	}
	
	public ParserRule getMarkupRule() {
		return getMarkupAccess().getRule();
	}

	//MarkupLines:
	//	"\\" keyword="markuplines" body=MarkupBody;
	public MarkupLinesElements getMarkupLinesAccess() {
		return (pMarkupLines != null) ? pMarkupLines : (pMarkupLines = new MarkupLinesElements());
	}
	
	public ParserRule getMarkupLinesRule() {
		return getMarkupLinesAccess().getRule();
	}

	//MarkupBody:
	//	{MarkupBody} command+=(Scheme | UnparsedCommand)* block=UnparsedBlock?;
	public MarkupBodyElements getMarkupBodyAccess() {
		return (pMarkupBody != null) ? pMarkupBody : (pMarkupBody = new MarkupBodyElements());
	}
	
	public ParserRule getMarkupBodyRule() {
		return getMarkupBodyAccess().getRule();
	}

	//BlockCommand:
	//	"\\" keyword=("book" | "bookpart" | "context" | "header" | "score") block=SimpleBlock;
	public BlockCommandElements getBlockCommandAccess() {
		return (pBlockCommand != null) ? pBlockCommand : (pBlockCommand = new BlockCommandElements());
	}
	
	public ParserRule getBlockCommandRule() {
		return getBlockCommandAccess().getRule();
	}

	//OutputDefinition:
	//	"\\" keyword=("paper" | "midi" | "layout") block=UnparsedBlock;
	public OutputDefinitionElements getOutputDefinitionAccess() {
		return (pOutputDefinition != null) ? pOutputDefinition : (pOutputDefinition = new OutputDefinitionElements());
	}
	
	public ParserRule getOutputDefinitionRule() {
		return getOutputDefinitionAccess().getRule();
	}

	//RelativeMusic:
	//	"\\" keyword="relative" pitch=Pitch? music=Expression;
	public RelativeMusicElements getRelativeMusicAccess() {
		return (pRelativeMusic != null) ? pRelativeMusic : (pRelativeMusic = new RelativeMusicElements());
	}
	
	public ParserRule getRelativeMusicRule() {
		return getRelativeMusicAccess().getRule();
	}

	//Pitch:
	//	base=ID octaveCheck?="="? octaveShift=Octave? reminderAccidental?="!"? cautionaryAccidental?="?"?;
	public PitchElements getPitchAccess() {
		return (pPitch != null) ? pPitch : (pPitch = new PitchElements());
	}
	
	public ParserRule getPitchRule() {
		return getPitchAccess().getRule();
	}

	//Octave:
	//	up+="\'"+ | down+=","+;
	public OctaveElements getOctaveAccess() {
		return (pOctave != null) ? pOctave : (pOctave = new OctaveElements());
	}
	
	public ParserRule getOctaveRule() {
		return getOctaveAccess().getRule();
	}

	//NewContext:
	//	"\\" keyword=("new" | "context") context=ID ("=" id=ID)? modification=ContextModification? music=Expression;
	public NewContextElements getNewContextAccess() {
		return (pNewContext != null) ? pNewContext : (pNewContext = new NewContextElements());
	}
	
	public ParserRule getNewContextRule() {
		return getNewContextAccess().getRule();
	}

	//ContextModification:
	//	"\\" "with" block=UnparsedBlock;
	public ContextModificationElements getContextModificationAccess() {
		return (pContextModification != null) ? pContextModification : (pContextModification = new ContextModificationElements());
	}
	
	public ParserRule getContextModificationRule() {
		return getContextModificationAccess().getRule();
	}

	//Other:
	//	"\\" keyword=(SpecialCharacter | "(" | ")" | OtherName);
	public OtherElements getOtherAccess() {
		return (pOther != null) ? pOther : (pOther = new OtherElements());
	}
	
	public ParserRule getOtherRule() {
		return getOtherAccess().getRule();
	}

	//OtherName returns ecore::EString:
	//	"accepts" | "addlyrics" | "alias" | "alternative" | "change" | "chordmode" | "chords" | "consists" | "default" |
	//	"defaultchild" | "denies" | "description" | "drummode" | "drums" | "figuremode" | "figures" | "grobdescriptions" |
	//	"key" | "lyricmode" | "lyrics" | "lyricsto" | "maininput" | "mark" | "name" | "notemode" | "objectid" | "octave" |
	//	"once" | "override" | "partial" | "remove" | "repeat" | "rest" | "revert" | "sequential" | "set" | "simultaneous" |
	//	"skip" | "sourcefileline" | "sourcefilename" | "tempo" | "time" | "times" | "transpose" | "type" | "unset" | "with";
	public OtherNameElements getOtherNameAccess() {
		return (pOtherName != null) ? pOtherName : (pOtherName = new OtherNameElements());
	}
	
	public ParserRule getOtherNameRule() {
		return getOtherNameAccess().getRule();
	}

	//SpecialCommandName returns ecore::EString:
	//	"include" | "version" | "markup" | "markuplines" | "book" | "bookpart" | "context" | "header" | "score" | "paper" |
	//	"midi" | "layout" | "relative" | "new" | "with" | OtherName;
	public SpecialCommandNameElements getSpecialCommandNameAccess() {
		return (pSpecialCommandName != null) ? pSpecialCommandName : (pSpecialCommandName = new SpecialCommandNameElements());
	}
	
	public ParserRule getSpecialCommandNameRule() {
		return getSpecialCommandNameAccess().getRule();
	}

	//// Scheme
	//Scheme hidden(WS, SCHEME_SL_COMMENT, SCHEME_ML_COMMENT):
	//	"#" value=SchemeExpression;
	public SchemeElements getSchemeAccess() {
		return (pScheme != null) ? pScheme : (pScheme = new SchemeElements());
	}
	
	public ParserRule getSchemeRule() {
		return getSchemeAccess().getRule();
	}

	//SchemeExpression:
	//	(quoted?="\'"? | quasiquoted?="`"? | unquoted?=","?)? value=SchemeValue;
	public SchemeExpressionElements getSchemeExpressionAccess() {
		return (pSchemeExpression != null) ? pSchemeExpression : (pSchemeExpression = new SchemeExpressionElements());
	}
	
	public ParserRule getSchemeExpressionRule() {
		return getSchemeExpressionAccess().getRule();
	}

	//SchemeValue:
	//	SchemeBoolean | SchemeList | SchemeBlock | SchemeCharacter | SchemeText | SchemeNumber | SchemeMarkupCommand;
	public SchemeValueElements getSchemeValueAccess() {
		return (pSchemeValue != null) ? pSchemeValue : (pSchemeValue = new SchemeValueElements());
	}
	
	public ParserRule getSchemeValueRule() {
		return getSchemeValueAccess().getRule();
	}

	//SchemeBoolean:
	//	value=SchemeBooleanValue;
	public SchemeBooleanElements getSchemeBooleanAccess() {
		return (pSchemeBoolean != null) ? pSchemeBoolean : (pSchemeBoolean = new SchemeBooleanElements());
	}
	
	public ParserRule getSchemeBooleanRule() {
		return getSchemeBooleanAccess().getRule();
	}

	//SchemeBooleanValue returns ecore::EBoolean:
	//	"#" ID;
	public SchemeBooleanValueElements getSchemeBooleanValueAccess() {
		return (pSchemeBooleanValue != null) ? pSchemeBooleanValue : (pSchemeBooleanValue = new SchemeBooleanValueElements());
	}
	
	public ParserRule getSchemeBooleanValueRule() {
		return getSchemeBooleanValueAccess().getRule();
	}

	//SchemeList:
	//	{SchemeList} vector?="#"? "(" expressions+=SchemeExpression* ")";
	public SchemeListElements getSchemeListAccess() {
		return (pSchemeList != null) ? pSchemeList : (pSchemeList = new SchemeListElements());
	}
	
	public ParserRule getSchemeListRule() {
		return getSchemeListAccess().getRule();
	}

	//SchemeBlock:
	//	"#{" elements+=SchemeBlockElement+ "#}";
	public SchemeBlockElements getSchemeBlockAccess() {
		return (pSchemeBlock != null) ? pSchemeBlock : (pSchemeBlock = new SchemeBlockElements());
	}
	
	public ParserRule getSchemeBlockRule() {
		return getSchemeBlockAccess().getRule();
	}

	//SchemeBlockElement:
	//	Expression | SchemeReference;
	public SchemeBlockElementElements getSchemeBlockElementAccess() {
		return (pSchemeBlockElement != null) ? pSchemeBlockElement : (pSchemeBlockElement = new SchemeBlockElementElements());
	}
	
	public ParserRule getSchemeBlockElementRule() {
		return getSchemeBlockElementAccess().getRule();
	}

	//SchemeReference:
	//	"$" id=SchemeIdentifier;
	public SchemeReferenceElements getSchemeReferenceAccess() {
		return (pSchemeReference != null) ? pSchemeReference : (pSchemeReference = new SchemeReferenceElements());
	}
	
	public ParserRule getSchemeReferenceRule() {
		return getSchemeReferenceAccess().getRule();
	}

	//SchemeCharacter:
	//	"#\\" value=(ID | SpecialCharacter | ANY_OTHER);
	public SchemeCharacterElements getSchemeCharacterAccess() {
		return (pSchemeCharacter != null) ? pSchemeCharacter : (pSchemeCharacter = new SchemeCharacterElements());
	}
	
	public ParserRule getSchemeCharacterRule() {
		return getSchemeCharacterAccess().getRule();
	}

	//SchemeText:
	//	value=SchemeTextValue;
	public SchemeTextElements getSchemeTextAccess() {
		return (pSchemeText != null) ? pSchemeText : (pSchemeText = new SchemeTextElements());
	}
	
	public ParserRule getSchemeTextRule() {
		return getSchemeTextAccess().getRule();
	}

	//SchemeTextValue returns ecore::EString hidden():
	//	SchemeTextValueSegment (":" ":"? SchemeTextValueSegment)*;
	public SchemeTextValueElements getSchemeTextValueAccess() {
		return (pSchemeTextValue != null) ? pSchemeTextValue : (pSchemeTextValue = new SchemeTextValueElements());
	}
	
	public ParserRule getSchemeTextValueRule() {
		return getSchemeTextValueAccess().getRule();
	}

	//SchemeTextValueSegment returns ecore::EString:
	//	"\\\\" | "=" | "-" | SpecialCharacter | SpecialCommandName | SchemeIdentifier | STRING | INT | ANY_OTHER;
	public SchemeTextValueSegmentElements getSchemeTextValueSegmentAccess() {
		return (pSchemeTextValueSegment != null) ? pSchemeTextValueSegment : (pSchemeTextValueSegment = new SchemeTextValueSegmentElements());
	}
	
	public ParserRule getSchemeTextValueSegmentRule() {
		return getSchemeTextValueSegmentAccess().getRule();
	}

	//SchemeIdentifier returns ecore::EString hidden():
	//	ID ("-" ID)*;
	public SchemeIdentifierElements getSchemeIdentifierAccess() {
		return (pSchemeIdentifier != null) ? pSchemeIdentifier : (pSchemeIdentifier = new SchemeIdentifierElements());
	}
	
	public ParserRule getSchemeIdentifierRule() {
		return getSchemeIdentifierAccess().getRule();
	}

	//SchemeNumber hidden():
	//	radix=SchemeNumberRadix? value=INT;
	public SchemeNumberElements getSchemeNumberAccess() {
		return (pSchemeNumber != null) ? pSchemeNumber : (pSchemeNumber = new SchemeNumberElements());
	}
	
	public ParserRule getSchemeNumberRule() {
		return getSchemeNumberAccess().getRule();
	}

	//SchemeNumberRadix returns ecore::EString:
	//	"#" ID;
	public SchemeNumberRadixElements getSchemeNumberRadixAccess() {
		return (pSchemeNumberRadix != null) ? pSchemeNumberRadix : (pSchemeNumberRadix = new SchemeNumberRadixElements());
	}
	
	public ParserRule getSchemeNumberRadixRule() {
		return getSchemeNumberRadixAccess().getRule();
	}

	//SchemeMarkupCommand hidden():
	//	"#:" command=(ID | SpecialCommandName);
	public SchemeMarkupCommandElements getSchemeMarkupCommandAccess() {
		return (pSchemeMarkupCommand != null) ? pSchemeMarkupCommand : (pSchemeMarkupCommand = new SchemeMarkupCommandElements());
	}
	
	public ParserRule getSchemeMarkupCommandRule() {
		return getSchemeMarkupCommandAccess().getRule();
	}

	//// Terminals
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z")+;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal SL_COMMENT:
	//	"%" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ML_COMMENT:
	//	"%{"->"%}";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SCHEME_SL_COMMENT:
	//	";" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSCHEME_SL_COMMENTRule() {
		return (tSCHEME_SL_COMMENT != null) ? tSCHEME_SL_COMMENT : (tSCHEME_SL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SCHEME_SL_COMMENT"));
	} 

	//terminal SCHEME_ML_COMMENT:
	//	"#!"->"!#";
	public TerminalRule getSCHEME_ML_COMMENTRule() {
		return (tSCHEME_ML_COMMENT != null) ? tSCHEME_ML_COMMENT : (tSCHEME_ML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SCHEME_ML_COMMENT"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
